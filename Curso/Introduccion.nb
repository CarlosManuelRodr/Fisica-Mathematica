(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    322732,       6638]
NotebookOptionsPosition[    298223,       6331]
NotebookOutlinePosition[    298573,       6346]
CellTagsIndexPosition[    298530,       6343]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["D\[IAcute]a 1 - Introducci\[OAcute]n al lenguaje", "Title",
 CellChangeTimes->{{3.7161564046486683`*^9, 
  3.716156414905035*^9}},ExpressionUUID->"bdff2f26-a159-4dca-82a8-\
f9ffc4e6d163"],

Cell[CellGroupData[{

Cell["Introducci\[OAcute]n", "Chapter",
 CellChangeTimes->{{3.716156506111926*^9, 
  3.7161565082721*^9}},ExpressionUUID->"f205be8a-e2b4-4387-8757-cacf562f9c17"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"googleCS", "=", 
   RowBox[{"ServiceConnect", "[", "\"\<GoogleCustomSearch\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"results", "=", 
   RowBox[{"googleCS", "[", 
    RowBox[{"\"\<Search\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Query\>\"", "\[Rule]", "\"\<Wolfram language\>\""}], ",", 
       
       RowBox[{"MaxItems", "\[Rule]", "200"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"WordCloud", "[", 
  RowBox[{"DeleteStopwords", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{"Map", "[", 
      RowBox[{"TextWords", ",", 
       RowBox[{"Normal", "[", 
        RowBox[{"results", "[", 
         RowBox[{"All", ",", "\"\<Snippet\>\""}], "]"}], "]"}]}], "]"}], 
     "]"}], "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.716154770061214*^9, 3.7161547736759*^9}, {
  3.716156358555408*^9, 3.716156388153757*^9}, {3.7161564222734413`*^9, 
  3.7161564263319187`*^9}},ExpressionUUID->"72dc9dd3-d17d-43df-8714-\
dd83419e2e9a"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"Wolfram\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.20710059171597633`],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"language\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.17087308296099504`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {12., -40.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"programming\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07305880932254558],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {-11., 41.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"Mathematica\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06581330757154934],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {0., 62.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"knowledge-based\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {0., 80.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Stephen\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05494505494505495],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {-8., -81.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"multi-paradigm\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {-3., 93.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"computational\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {0., -98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"programaci\[OAcute]n\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {3., 106.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"sophisticated\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {7., -111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"engineering\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {75., -81.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Language\[LongDash]\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-77., -68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"introduces\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04407680231856056],
     FontColor->RGBColor[1, 0.75, 0]], {-16., 118.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"experience\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-87., -84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"communicate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {0., -124.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"computing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {113., 26.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"developed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {113., 42.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"altogether\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {95., 75.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"symbolic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {-91., 79.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"APL\\\\nlanguage\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {92., 92.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"provides\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-109., 54.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"examples\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {80., -94.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"programs\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {110., 58.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Chapter\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-85., 92.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"including\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {-79., -100.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"powerful\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {78., 107.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"platform\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {55., 122.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"lenguaje\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {-80., 105.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"creating\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {-73., -113.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"practice\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {78., -110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"command\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {0., 132.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"approaches\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {79., -123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"general\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {-72., -129.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Research\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {-65., 132.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cloud\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04769955319405869],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {108., 121.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"making\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {-123., 38.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"algorithms\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {-97., 117.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"evaluate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {118., -132.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"science\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {0., -138.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"released\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {0., 142.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"external\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {58., -135.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"resources\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {66., 136.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Open\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {128., -69.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Image\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-137., -66.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"devices\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-53., -142.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"using\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {134., -84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"accessible\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {-73., 143.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tutorial\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {-133., -97.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"online\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-137., 89.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"natural\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {129., -104.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"instant\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {130., 102.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2014\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04407680231856056],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {-123., -114.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"access\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {27., -68.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"aspects\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-132., 103.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Start\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04045405144306243],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {-141., -34.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"building\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-120., -127.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"biggest\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {-118., 130.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Beyond\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {-102., -142.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"video\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {-136., 65.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"maths\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {133., -117.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"world\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-140., -48.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"way\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {142., 68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"built-\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {117., 136.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"used\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {-140., -140.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"answers\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {36., 22.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"book\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {-142., -82.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Alpha\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {-120., 141.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"code\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {24., -149.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Apr\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {-154., -13.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"allows\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {-11., -152.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"uses\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {45., 147.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"basics\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {59., -147.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2016\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {148., 78.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"GIFs\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {5., 152.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Real\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-155., 48.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"based\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {79., 146.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2017\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {-31., 153.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"free\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {92., -148.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Feb\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {-141., 113.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"broad\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {-81., 152.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tool\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {145., 114.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"new\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {111., 149.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2015\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {122., -144.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"basic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {-99., -153.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"best\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {-111., 152.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"de\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0368313005675643],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-155., 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"APL\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {-63., 22.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"140\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {156., 8.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Art\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {156., -2.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"wl\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {71., -67.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"25\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {155., -13.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"24\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {155., -25.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"28\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {-156., 12.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"23\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {-157., 23.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"14\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {157., 19.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"8\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {5., 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"6\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03320854969206618],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {5., -11.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"9\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {28., -4.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"7\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {28., -15.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.029585798816568046`],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {-15., 0.5},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  ImageSize->Large,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{-170.5, 167.5}, {-159., 160.}}]], "Input",
 CellChangeTimes->{
  3.7161564678168383`*^9},ExpressionUUID->"69982079-9894-47dc-837e-\
41adcd43ea99"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Un lenguaje con un paradigma:", "Chapter",
 CellChangeTimes->{{3.7162343404174623`*^9, 3.716234364080655*^9}, {
  3.716234394975843*^9, 
  3.71623439773571*^9}},ExpressionUUID->"2b6dd1b5-2dd8-4292-9bf0-\
a42a9b31cd4d"],

Cell[CellGroupData[{

Cell["Posiblemente el lenguaje de m\[AAcute]s alto nivel", "Subchapter",
 CellChangeTimes->{{3.716234408855359*^9, 3.7162344185906057`*^9}, {
  3.7162344561658983`*^9, 
  3.716234463341735*^9}},ExpressionUUID->"e640789f-b38d-4725-9ebf-\
d837129c923d"],

Cell["\<\
Fuente: http://blog.wolfram.com/2016/11/09/the-2016-wolfram-one-liner-\
competition-winners/\
\>", "Text",
 CellChangeTimes->{{3.716237877030685*^9, 
  3.7162378840998487`*^9}},ExpressionUUID->"409080a8-81a5-4cc5-8403-\
27eeed43f783"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", " ", "=", " ", 
   RowBox[{"RandomImage", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", 
  RowBox[{"Magnify", "[", 
   RowBox[{
    RowBox[{"i", " ", "=", " ", 
     RowBox[{
      RowBox[{"NetInitialize", "[", 
       RowBox[{"NetChain", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ConvolutionLayer", "[", 
            RowBox[{"3", ",", "3"}], "]"}], ",", "Tanh"}], "}"}], ",", 
         RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Image\>\""}], ",", 
         RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Image\>\""}]}], "]"}], 
       "]"}], "[", "i", "]"}]}], ",", "3"}], "]"}], "]"}]}], "Input",Expressio\
nUUID->"7cef6025-ad26-4cb0-b259-fae131b025a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Todo es una expresi\[OAcute]n simb\[OAcute]lica", "Subchapter",
 CellChangeTimes->{
  3.716234449410939*^9},ExpressionUUID->"fc85992d-c33e-4d7d-8155-\
7d3112a20cf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagen", " ", "=", " ", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
jng9ZM0+v1v7eoqgfTpm8nUm9uS1yuxRWSR+VonEKe1NbT17gp028ayVceD1
kuO1jfGBxLYHutr0Mc4pFYtvlpnn0P4mO8MisX1fOHZHxmjfoNh00aKsHN1r
grfj5XZKfiEyipxqacJvXKbEPWkJSMnLRXxmNjaFRmLgiBD88v6ncdMdf8C3
L7kJ5194PX521b247Ipf4uHfvYjX+w3DpBmLsFd45dihb8eYnfNIrF3QWh/O
B7VbenNMxuypg204KWP5qPB0pFXGubDVzf6N3AOM+xZxz1tXNaLiUzFp+mK8
2X8M+g2ejDc/GC82Fh8Mn4hRE6YjdG+EzpVyTR71hKzSdzNzvKbfvskvGB3i
Y8cOtvv78JtYiXlx1tGyJwrrBbkHIWsbsvPzVPu1N1dUtPZgZb/As0BP/tv3
FVF/yD/jXPtcktGkc8VKQb/vf8+RWT+eL3FNqaNErt/tPXXF5mgliCQ2aNb5
d147jxzuQle3tVcdY4hAjraJz7UrPAr75ZoelZKGpNx8teS8At23JUP0h3sf
JeZLPJWVhbDEaOEsCcm5OVi3fTeGjJ6O3z31Nn50+b340nlX45sX3o7/+u+r
8H++cBn+80s/wYXfuxFX3Xg/HnzsOfQbOBI7Q3ehuChf52U6fXM0pu5NfSrR
huPC1cnuVhxnrloeJ0vHOffDnEJdte4Fkyvnt3Hbbrw7cAwe+v3LuP3+Z3H9
nX/EpVfeh59c9wC+c9kt+Nl1d+GJZ17HynVbkF9UomOXOmjfJ8n01u+LI/t+
FqYmgms42lus3kKsV3fpHoOFyC0s0Dk6+nTcg4z97hpaWnGS+9j6aoRMHpy6
Qx2ij256OwU5+vtyZPrfm33HyVF5aQW6Ort71+n7fk6ePG7lrMQOH5b49Wi3
+HVtmsNifU6hL8fA3NyO/RG61wSP3H+PLFGDyBH1h3sf5Yj/n1pUjOjMLOxJ
SEA0ewylpGJ/XDJGTpiF2+/5A37w01/ia9+8Hv/xf3+KL5/3c3zhy9fhmxfd
iu/96C589ZtX4hsXX4Wb7/yNaNZjmDI1BPv2h+r+xuzxTV1q4/yN+EzHD3X4
1kK0WHM9MuYPttSrf3e0zerPUFtdqb2v1qzdiKEjJqje3XbPE7jxzifxo6se
xLcuvQPf+P6t+MoF1+KSH9+Kb11yNX5x728xbeYilJW70dZU79+PgiwZjgL7
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
NGriXIydxhqKpRgxYQHeGzINT784UPXpd0+/i/seeRGPPdUPf3j2fTz7yhAM
H7cAy9bvx64IiS9SCnQPDO5vli1xBtcfpRc6dK/NPGGH87DMMRSWOpUlziGZ
fJ3Vh1XiHObAfcbaBmP6OzFT/8C/CzSu1eMet+6qGlRUWSwxT0eWrFydS7nm
kXV25CgxNUP3MOs84KtVDdzExadNzNExPqJvZ/w6O0fBuqCPssR9IbifOGvp
yRF9Oi/7dpSVo7uj07+vHn05y587o6bxkLxGleiXw12t+3xxHXkxr5F1jcqS
p6VN+21VNbXAJTxRl1irmiWvzRrwhNwiRGcUYH9SFkJjU7EtIkF9O9YJcV6W
NXezlqxV/27avOXKEfWIfRtmLliltXPjhQvm7JjnfvnFd/D6K++Jb9dfj3r7
tfc1d9d/wEgMGTEBo8WnGzd1DsZPX4CJM5ZiXMhSjJq0SFmaPGstRk9eigEj
ZuOD4bPwzsCpGDpmnvAmvM5YiYWrQrFxVxy270/RuSLWYyTm5Onao+TcfD2S
pYwCxkm5On/E/WmUI1eFaojFkZWnZqxj58diyOXXIXLE+SbuRe5yV6CislyP
vG/0iBwZPerJd7vUWJ9kOMrKd2ieLluO1CPmh/rSIua/7XvG2vXIXvMSZKnH
uKc4Geo+dFCNHNWL/1VeWqa9Uttb20SGfL0XbDVA3Nuo/eBBzRUkFBQgIS8f
ueKfOz01KBBfnXXPte2dyhI5cjc2qyYxb8da77Rip/xNISLT8kSHMrEzOkUt
NDYN2yOTxGeKEI52Yv7KzaJJ6zF9/iqEzFupxxkLVutx+rwVmDJdxv+4mcLR
WGFlCN5+czD6vzsC7783Eu/1Gy46NBRvvDFQGPsAr785CO9+MMrac5m5CdGj
6fPXiN+4UlmaPHsV5i3fIVq3DZNmrsH4kJW6dnz6/E2Yu3SH6tCGnfFisdiy
J1HrUyPTchCbnae5ybjMbOEqU/ezTczORRL3S/H1baCPxzwa82nao6vGa7Hk
7e2/2c34cfThyA3nn8gijfk/y9zKT6mrSvv42326/PIKFMp3kivfJXlS307O
lb4dWaqRa5rdr7P3aTB+HVkiR2ZdrOl3wpxEkKMeO3XmtMZFZEh7AQk3zC+Q
oTwZB4yVrL3i4WfohPwN9zVKy89DaFw89iYnIzZXxox8X9QaslQu3xHZYb8t
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
tuyN1fo/sk+GuG4qtaBYfbm0IhmnpS6ty82vqFJ+2IfZUVnln581LLAno99P
Ky/z5wwsn61cfTa79rCmlAyqltAvKyzSfpOcr8rzrc/TdXryHhob+fhhHpXG
a1puucUR/44csQ7d6BH7B9EXOdvHRBJrLJmvY22QqVUlS6af3b+TXxfYv8+Y
6ad1oLsTbR2t2kOL+4pQ4+31IcafM/XcZIhzr9QVjjvOm+5OSEVSvhMOj1fY
aoa7mTmGergaarQnIo/UIn6vrLljDBGRmqt5Ofp0q7aFqw6RoWnic02ZvxrT
6X9JPDLN3BZ25i8X/VixFfOWbVY/L2TOKmVntOgQj5xLWi7xFPnYIuxslCN7
epEjrmWgPxbqs73iT7LHT3iClWsLjU7ErqgEXePO59J/27wnRnni3/PxsMR0
ZYh7PHP+Na1Qru/i/9KPI0fMQ9JySss1l0Id0Do3l8UG52OpM/TXjBmm6OPR
7AxRd8hNlqNYjbc5N0XT+iNhibpElqhNn8QR9YivwfWFcclp2oeL8ZHpl2//
oW9nejWY9XzkyMRI/255ho/jyNpbr13YkbHvdilH/Kx6tF24OXnW33eBdLV2
H9MeBNwPkr1+kgvKkOGU76+yRvPdzMlx/0q3cEQtqqj3orzOo1rE75NaxHkj
5ru3c0/KvfFYsSVcfLntmL54o649mCh8MM5nHtoc5yzmHkjb1eYu2YLp8+R3
M5dr3nvytHmYJXHO0pWbsG7r/2/vPOCjuq7EbZoBt7glduw0J5veNt272Wzi
OIlTnV5c4t7BFNN77yCKChJCEkUSKqgLhJDooncwxRXb2AZssHGj2XD+9ztv
zpurx4C9+WfjbKT5/Q4zTNG8ee9+95R7zrkVum+f7pNZNk9y3X3BvDrdH6Zy
0QqZt3il1CxdrXvDLlq1UfNpa5Y3uNeWqcAKgv2GHYfQDwhdRC8J9Ch7ZQQc
bVMfaC3jeedulfU7Al9Ec3HICdq9W3s0hLFq9lLZsU22bNvsdM2mgKudO1XM
doMfdA/s4FcF7GzTXBETcijWYiu+C0cIdcdmX8LRivUbQ47YDwn7zc/15sZc
Ckf0DUKI2dneE9bv+/0e2/9ISbReZjZdUB9xSPdGwKajP6pfM677670d36dy
78uvyAbnT9cuX+3G3hp3LXe5a/OUu27UF70Y5KM++5zadDD09L7nlaFdzz0t
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
NMfpoBl5MsPppVnoKccQ+go9NT0nV21B+CGfmlxQzat2Qj99OGJvPn+/Px6b
2B606CZ8KHwkfCB0EHoJppD6FWvVnlu8YrUK7DSs3aiij51tV+30EPL408+G
/JBjyn5hpnN8Vnye7LE/j3KDGXLIsPG49/Mc/Njd+z2+/1HCb+WcEF8wm87s
Oc5vInZ4jnknWJON1ai4f4++HfQCf+zp52TaTGf3OLumqKJWYw/TZhZqfJs6
H/Lg4CdY85msY51xPXzEWJXBQ0bKAMfIwEHDpf+AoTreERjp03dQIxnoXu/f
f6D0d68NGjREhjndNGKEs+ngZ5yz6dzfT02dKhnp2HQpMnYMPtVYGT9ukkyc
lCKTp0xVWw/fKSkpTW0+bMCp+EFOZjldMnlKmtNjGTItM8fdu781bbrjZ5bT
a1mhHjK9ZLoJnrD9smbkBUzlzJasWY6//KI4S04vzS2br1JasUDK6dVADjj7
wcCOYwjfCFuv0POdqmL7vaCbyDU1dtBJ8xYskkXO7kMPUZdXWVUjFZXzpWHl
aq1hTaSHEukg39bwYw92Y+6lDgk/KZovFM0Pagpie1vCETlBxOmIMURz62An
GhvlduLEsbDnatBhCI6e1fmWa49tgq3PmKDWpWp+nRsv7rly5xuUOpvP+RxT
ktPV7gp0yGhlZ0BM13CPGE+wg+7p1XuAk/4yYMAg6dDhYXn44c7OD5oopaXl
smLFSvc7npTXXmM9jDx29u18wc2dT8j69Rtl3rwamTo1QxmEWXwo9NLkyRnK
Ef4Ux4T9l5yS7pjJlYV1S2SFs5vI6aTnKP0S6eGb72w3JM/ZcdwXFZe75+dJ
pbO9GNPEXhjX2Fv0iVm3ebvaXBXzFwb6qbBcfSziE8WlgW1ndl6544e1J3TO
+m27Q1m1cbuusXJfv2ylMsTfpb/go7uelMefek62PLpLOVrM+q077+Qt7D/w
subtGxFHYv3wubaMhbPZG9Eb74cbxgpzL2MnylFTYsnyDW1vS/wi5phwD6TY
nKTrrt6cZPlVQV1FcG1OnDqpHL114qTsP/yGHHzzqHt8So66y3PipIT7Ydse
pBbnO3b8lDy3d7+71puksKhMmTJ+Bg0eoXqJx8YRDPXs1V969OwrjzzS3emS
SbJ06VI9Zo6R47K5knVk7FTmTK6zzbf4gRs2bFKOYWfs2Cmqk5KTM4M43qRU
9aVy8wrlyaee1fFnY5B76gaOn3hH3njzuMqbbzk/88jbcuQoefEn5ag7EQi/
2RfW2l5985i8+PKr2jdm6Yp1UlZZq7EK4ny2ZyY8mZ/EfjlH3Re/9U6w3s3o
P/TmCX2Onuuc4yPHT4XfQe/oN9yXv37kuNNDax3bZbJq9Vo9bv/G5fRjr/6c
abaKv27IGOB5Gxe8xrnV/ZBi+ULWh6upcWTr0fhClteLzWtjMqrPOUescScn
J0uPHj1kSspkyZuTK/WLFzlbfLWs37xFtu3c5ebGR2XV+k1St3iF9qHJyJrh
9M14x8NgFWwv7K6p6dPdHL9Ant6zV7l69fCbstT5z8QAYAV9YSyhk7Dt0EMw
hD+UlZWl6xtcc45r4MCB8stf/lK+9KUvyeWXXy6XXHKJfOhDH5KPfOQj8rnP
fU5+8YtfOLtutK4x85kXnj/g5ut69Z/Qh/DDd2PvpaZlSl39Utn92FMyc1au
POT03oSkSW5clqhOYmxu2LhVNjo9g6xbv1l11oLaRU7X0je/2Om1qTJqXJL7
zc636z9IRo6doHHnTdt2yP6DryqDW7ftcnbdfI1NENezfZzR5Vt3Py07nnxO
snKL5OHufWXE2CSNW6DLiMPxd4gfLFrWoDFtfL9e/fo72zNb1q7bIDt2Pq7H
u2HjZuV+pbPvhgwZppKWli6VlZW6xsr6EOuFZWVlzs6doudowoQJqm8sn8Vi
DMYaOojPaR8uNwfjXzdVjiyPwdaNrH+zb9cx3uz8LV68WD72sY/JOeecI+ee
e660aNFC2rRpI61bt5ZLL79MLrr4A3Le+RfKVVd/VM6/4CJp2+4Cadf+fPf+
ltKqVRtpcU4b97i1tGrZVp9r2bKl+2xL+eQnPynf+973JDt7hrz5xjFZ7lga
NXKcDHA6yATfB1usd+++MmzYCMnPz3fvfU2WLV0sd95xm1x26cXu758jLc9p
4e5bRuQcldatWuj9VR++Qm655SZdZybWtHx5g9qFUxxDE5OS1a9KcbbdfGef
3fCTX+ixIvxWjpn7du3ayYUXXigf/OAV8uEPX+3ORzu5+OJL9b5t2/bhZ1q3
aRs+VmnRSj74oSvl+h/9RDIzM52efF127X5c4xjBnucLZGp2rtaa06v4ez/6
ufuM+xst3Llr0Vr/Rtt257nvaCuXXHq5tD/vAmnDd7rngr9/jt4zb5Q725Oc
FOaagoIC+ehHP6rXDmnVqpXKBz7wARX+Hr/LXkeuueYa/ZzpLHSSccWYYZ9L
5l30v7+OZPrs/R7f/yixdSOz65h/YAm/0b9xbjiHt99+u5x//vmNzrUv7du3
jz12Y9eNl3AstT439jhgqGWLc914bK3vvfCi4DMt3PXnuZtvvlWeeHyPFBWW
avxgiNNHQ51e0sduHiWeMHXqVKdDD7lxP1G+8uXPh5wYR63ceDOGzmt3vrRp
1VpfO7dNK/fd8fdeddWVzo6boCxVV1fL0KHDJSUlTRma7HTTbX+9S85rf5H3
O1qHY61du3PD3818kujeF+ad6HMfvPxSuffeu2XPnmedPl+ra7zTc+c4n7Je
62RvuaeDnNPuwoCjNu2kZau20vrcNu73OZbObX3ad8IFfPN/eL/55pt1jHOt
f/vb3wbn27Fv3+8/vuiii8LHXGM+z+OvfOUrjdY/jCf+rnFk+qiprsfa2hEc
2dqR7e1uOb++/fzNb37ztGsHO3bOGSvB45bu+fPD8cfjgKvW0q7tBXrP/1u2
PCc2f3IdLwjff/ttd8vqVetl+LDRMsj5RiOGj1FdNHz4SBk/Pkmv3ZQpk+TD
V34oZOK89m3Dx+3bnifntna8ntOqkT6CI6RNa8dB21axY27t+ByiLGHrJDnb
bZKz82DpFz//tR4rOiY4tjgD6FH73ZwH/1zAGvO7scNr/nsZv7zeIva37r//
QbWHWetlXam4cqFkO3/p57+/Wc5Bd7c5P6aLWuv54nNtWsf1Y5RPuz7XX3+9
2hncunXr1ug9MMc9f8Me21xox81j7GKbS+HE4gyMG/JdfLvO58j8qaYgludt
HDE+YYkYuN14n9l3f/7zn8O57rzzzgvPvc2Bdl0Cm6216iFfL+k4iEkwNt01
b2kMMQ9eGL4P+wo7q1/fQaqPiGUPHjzU2fTVsnDhQtUNjCd4aNe2TWC3tWyl
YrrIOOK+bZtzG+mtFjGG0IOMm7Fjx8rmzVtl+vRsGez8sWTnI/32N3/UY2nj
bDN+B/aP/7ttvDIO4cIfj3aefF0R1VOwH5yztroehd+TMSNfMnOLtY/Qn++4
33HUPrTr2l3g7K/27cLj948DfXLBBReE34v85je/CW1y/Ef+b8foXzP7DL8h
qp9+/etf6+fJtfNjEfjUzfooLhavgyNiLxZnMN/Sj3fPnz9fvvWtb4Vz1Re+
8IXwGjCu4/Nc3B/4xje+JV//+jfla1/7hlz7nf+Sz37mi3LlFR8J5/fWbfy5
NKa/nC3De8eNnaj2HBzhHxGbIK795S9/OfiulnGfB8HegZvWbg6/8kNXy1VX
flQ+9pGPu/urpd25wfzf3tljF114fjgOzT7DF6ivX+x8lixdX8JH4ru/8Pmv
xGzQlo3soLZtE+sCBN6Yx7GPLr744kb6mvNmfmWL8Ptbyo9/9kspLq+WlMyZ
Yc3f+NTp8pXv/Hegj1qeKxdffoW0aNUyNn8EfqnpOp/hD37wgxpbSUtL0/iR
3TIyMhrpIv+4jEHur7zySn38ne98R2MP3IxHGw/40InidU3RP+K32p7l5CDi
j3JesHFs3uGG/Wf2HTGa0tJS9aWoTfmv//qv2LiKz2XEFJCPf/waqaiokpqa
WrWZUlMydK5/4P6OytZ557UL7brLna9g+qhN6/bOd/iwdHukl+ojdFHXLj2k
qGiuDBw4OLzepoe4P69de2Xo/PYXyPXX/URuu/VO6dm9j3Tp1M09vl1+8N/X
yUeuurqRPsI288f+n/98k34HenDkiLFq2/XpPcD5MPdLr159pGfPnnLdddcp
Q6Z7oywxz9x9991qR/Xu3VtGjBghN910k8ZSTrO/7LHTdR+66qNao0seAzYd
gk4al5Ip3foODmrmk9PkVzf+JmQw+vfQMffff7+kp6drfAC7C/uLa8c1/exn
P6tzgfl4PPb5+8lPfiILFizQNSH8RfSN31fA2LA4g79+ZDl2TZEjhN/u15Rj
7zK/YPMZO9z763R+jjDx79P96sCuu+666935ftWd5wMyadIU1SsI/g4xg098
4mPKkY1Li+thS33gosvk/vs6SO9e/dVP6t6ttxsbRfKZz3wu1Av4CI3sNOcT
wUvXzt3loQcelk4du0rHhzq7/z8ifXr1lVtvvkU+dPkHQ/aCufuy8LgvueQy
p3MXhMfJ96KbRo4crfGHyZMny0MPPRTwf4Zx/Ne//lXjIDNmzJCJEyfKzJnk
l6dK9+7d1VaK2n6BbdtaPnrNv0nPfoM0j3VSxgypqGuQGUVVGm9gPbamfqnm
mQ4cNERtS5/feOyjncas58yZo7YD15MbPJjtEI0pBHPY5dK1a9ewJ4evd3x7
xNabGAv4XZYXpD3t3BhKVIfUFITfbLEGbDnOieWoMr/4/hH3nEObnyzfiutm
NkHczw5ivT/84Y+cvguYw+9Ar4wZPUHnedYyfvCD/1aONN4Q44iYBDG9iy68
VB52HPTq2U969uirn4O9du0C/yTuH7UJOfryF78id9x2pzzidFe3rj1VFyEP
3v+QdH64i2Oqg1z77e+EtmDUz+H7WdvFN8OOJN6OfTd27HgZNWqM/tYBAwY0
0mNmzwb+3fly3333qT0FQ9yPHz8+1A+MZd82VN3dJvAXz7/4Mu1/lJlbKNPo
dTx3nmTNKdd9zQvKajRHpKK6VpKmJKvfiS1m8QDzvRC+b+7cuRp35bZ69Wpd
T4vGWW3d4sMf/rCuu5kN4q9z+P6QPWd1n9guCOzhT1uealPlCN/Q8r2JdzOH
cX5giXMXzfmNnmPWZBuPxbif8/3vX+e+J5jPHn10p6xft1l27XxCjrx1QnN0
iDvDUSs3roOxGQgxvc999kvSw9ll2HPYVuiw3/zmd7o2Yz5BsFYU941+/tNf
OF4eUUEPwdNdd9wr99/7kHR4sKOTh+Tmv9wk7dsGvnqcX/N52su3v32t+mXE
2xF4giF00rhx46RLly6OhdNj/+gC9EK/fv10LZN1TPRXbm6umzNWqg2EX2dz
TqhHWuAjtpcrnB+X5nyjaeTmFVQoQzOLgx7GheULpKK2XnON4ChYn4rHB+zc
o2ewPVlTZezX1NTI5z//+Ubv9e85llmzZulY4Lr6usfPUfXX43X92tkrcEqe
iOUENeU9xWxu8W07y+NFsIHPVOdldt7ZOPrud7+nuW3cqPk76T5yYP8hKSut
crroh8G82Nb3US7Rz7Fe+4ff/0X1USfHBCyhk6699j/Fjz/7Nt2F518kf/jd
n1X/mD3X4cFOct89DypH9979gNxz171yy003y2WXXNpIH8VtpJZqN6KHNP/O
+XKwRP4FMfcxY8ZI586d3fg7z2OvbfjbmfMZl9g8jC/WWHTfQ3dui4uLQ13E
+9FjqsuIZ7ZoLbfeea/290vLydc+F/SfRSfllS3Q/sXUT9DXPmlKqjtncY4s
foh+gWW45doUFhbKpz71qZDxKPNXX321cpaod51fG+Pn/DMWGCPMscy3vi5i
DDVljizOb7Ydcw11E5bbwPlC5zMe/JvppbNxhPzylzfK7bffqeurv/n1H+Tb
3/pP+dhHPxnzhVpIm3NbaOzZPnfZZR+Un/30V/Kg82+IR3SGC8fSQ46Jj33s
EyFHvj4irn31hz8id95+j/pGDz/UVeWBezvKg/c9rDqJ17DvOnXsLF/8/Bca
ccR4tjjjpZdeLh07dAnzKFi/In8Cm5KYQceOHR0v8XEcXzMLxif2HBzBDvHg
uro69SE//vGPh5+J66TgHH37P78nQ0eNk6TUTEnNzlN+6ItO/6X88tozcNTy
NFuN/9fX1yuzn/jEJxr5Yn68/qtf/arGiMw+N7stUa4qbBCLYwzwe/Cfsf3R
RcSm/Ly6psoRc4j9ZqtDstwG1mNZcyCvhBgd82vUpns3jixebDkNtgYbSDD2
WrUOPvO5z33G+eI9NbaNjw9D9zgdgk7q4HTLXXfe5+bzD4SfY+z7HH32059T
HYRNB0OdOjwid952r3R8sIs8cF8Hjd/94Xd/lL/86Sb5t09+qpFdF89TaKk2
E+vAxLyJFcIS61bECYcOHapxBp8j00nxWMUlakt9+tOf1hwq/m+vxfM9gvP1
iWs+JV/56tekR5/+Go+j1iS7sEz7obNPB/tH5VbUSmFlXUKO4nr8A+H6L7FB
Yt4+5+ZD8R7+/7Of/awRJ77N5tsbCLzgY5FDRfzPejRgt6CLmC/ML/I5akos
+bXAzCnWx85yG+jRQE5dQ0ODPme2ss/T2Ti64IKLYvG3xuuwfl4Q60f4G7/9
7a9lwYKF2j9lz9N7dRzf62wy5D5nl930l796+UWxtc0WFq9rqTEG/KGHnS6B
oS4Pd1eGYOkOxwV8jRw+StLTMuRnN/xUP2vxArOzLF74pz/erHFCpG+fgcpQ
v34DZNCgQfLAAw8oR75vxfhEF/hjNhpL89fYYKxv377aP469JMmtS8vMUY6y
Ckp1fw72lmI/w7zKhWflyI9z+DybLefnzFmc/otf/KJe22g9jNWR22NsOBgq
KSnRnNYVK1bonGr7Tlgvu2itRFNiyJ83rM+J2XbYvXCEPsJOYC7y7ej3ypGJ
rSf5+Qw8f/HFF4XrR+bnP/DAQ7J92y7ZvetJ1QfoJFjCX4rm5wS5dMHa69e+
+nXp0a23+kSdO3ZTjtBL9939kCSNnyyL6pbKoZdf0S1Pe/fspfkNPgvB8Qd5
gTf+6nfySNeeGucgXghDrB8RQ7j33ns17s1nsZX8ceyPYcsDtfHs5z5ceuml
mnuelT1D9u7bL8/s3S9ZeQWSnjNHOWLPNfYGZX+p/Ko6KaoKehZXOZYmOI7I
/8WvMv1mf9v0jbETPTZ7nnvWt8xWN7vE7Dy7MXeig6hLYT6Fo/Xr14f93/0+
xcZRU9NFCDwYQ35+EPE600fU8KDbff3vx2/ejaN4rg+5leerBPZdjIcWZtu3
d+MyeP7rX/u25nznZM9WXwUbjxwds+ssRqV5Zq2CnNRvfv1b0qtHX+nwQGd5
pHNPZemOv94jY0ZOkEMvvRYvfnLT7QP33X/aOqbP0c9/dmMY32AtGIa6devh
7nvJnXfeqTkI5tPZWLV8aTjxx6+dl+iYDvhqKd/9/g+01o+8uuy8EimoqlV9
RD/NPKeH5lTXn5Ej+1vkTiTSScaWb1uazkR/UjMRnRt9287W6OGF2AJjgrUo
Yo+MCcaK1UtEOWpK8W/Lg0c3W19izpfF6/CXOY9+vq8fD303jvDZyc8mf7+s
rEKysnJ0bv/lL36jzBBn8K85+iaw91rLN79xrSyoqVe9QMzhV7/8ra4p+YzC
T9s27TS/+9vf/A/p4+wwdFC3Lr30Hp2UnjpdTr0dMHT8aFA82PGhhzUPL9AP
LcJ8tJCjn/9SOnXqojGOrl27qd/WpcsjupZKzvu5sVxr2LBxG7flgvUzfout
o4Xcx8TiEuRuW5xhft0SmTQ1S/OBChw/JoVV9brXmO6PpBylSZv2cY5M31m8
zo4LIZ7gM+zbeBzvjTfeGOaAmR4yjqK1Z7yO7iG2YOv1jA9sO+Zg00lNkSP0
ucUrOUfWu85yprjZeqw/Z/lxHepR/XFkOZk8/v73v9+o1368T8abUlRUJP/+
7/8eftbPy8MGhKcunburn49/9Jc/3xrGKYJaBjdWWrUL7cT/uPZ7GlsjLoH+
snjfrJn5oS465jg6fuyk+lqmD7GN/GPHZ//LX/6i8YS7777X8dRJHnzwQY3T
dejQQesPEs35gY91rlx91cflu//5ffnR9T+V6394g84HV155VaPxbPkQoU/m
Pjdw6Ait/aMnSk7+XN2DgF76MLR49SbNa5hXv1z3yiBn9dzzLtTaJt+ms+Mh
v451JOLu1DXa90ZtTJ6fPXt2oxo966/l2x7+OiLXkpiT1RnzHbDos+THHJqC
2O+1HpCmuy2fwbfl/Li36TGEtUa7hr5Nw2Ny0XyOfL+K68IaPzkpcdu+XcgS
Y/Jr//4t9ZGIn91y8+1y2aVXOrsQltrE7gOGyH/41Cc/qzVDxMexxWAIm3BG
Tq7yA0esX/GYHNgWnn/h21ysubBuOm3aNOWGfJnbbrtN/SJy18j7YZwG4zJa
U9Raee/Yoavcdef9jtfb9Hg4/k9+8t/i+aGt4vm5we9vKb/+ze9kWvZM3WOS
PkP0N5m/aKXuG8t+L9h19NkaOnaCtFK7Lh7z9HUNOojcdZvv6CuM3Wfs+3kQ
yLXXXhvmD/k3376L6iWzW1gfMZ3k5zM0tXpYq8G3NVjOC/Yc8020r4nV8kV1
fk5OTjgeo3UsP/jBD05bd7I8LK4x5568Tt8m8uN76B38lLvvcuP31jvlk9d8
Vtq0Pk85atUy0EXYTgixQeppiZuTV9qxYyf5/e//KGPGjAtzk8itWLdugxu7
H4rVQjS2KzkOiwkztsgBgh9008iRI2XYMKfvHn44jDH7PgcxB/Jrp6ZlSmrK
NOWoS+cecucd9yrT11//41h+dswnbNE4V/aXv/q1MkR9OL2ESuYt0NpyegbR
M7K6bpnWyvYfMkLanX+xtDw3iNmxtmvzALqU3Dr8XP/6kavkrzXZ+TaeyKfl
xuei+4pE+zdYbwZYStR3qynWlRtHlu+NPYfd69cfWR2x6ZDoeWZ82Xj0bSQd
G86m4G/zXdZnxL/xt5kP42uEgU6y+PaFF1wiN98UzOnUpn7j69cqQ+3bBXZd
O6uljvk1ffv2115B5B/cdNMtylPnzl3dnPl8+J28Fvex4n651TPAis3F7PtD
fgBxKsYKv4PeDthHQb1ba28NOchzx6d77fARWbpkpdx7z0Pyxz/c5Djs6PTY
7aF/b3lF1HBQ+3Fu6zZy1113SfHcUu01WVZZo7252MdC+zw6PUTNefm8WtVZ
57Ruq/5RlGf+tq2vcrPfga1Obl/UvjOh3pyYknHi97Wx3oXR6851ZY2RuTe6
HtuUGEIsVmdxOlurTrSnpekjv28tN2LB0doBW/P72te+Fta/cO5tfrPzTLzo
qquu8vyM1o3Wbq/40NWa841gG/3o+p85n6h9yFGLFnG/hntyLhnz2KjkmGE3
kqdjNWisg33mM58JuYnmmDK++JxfaxPVyxxz1D+y30xe06xZuWpDHnz5sDz5
xDNqV9511z1y6623hXnWuobcMqifsrwm9N7e51+Ul189LIdee1OWr16n/bme
es49d/hNeeb5ffLEnue054r5VGYP893MRfx91nkS1TIPHjw4ZCjR+tbvfve7
UKfY9fJvXC8/Rwh9ZPVHfn+GpshRtB7W6sqtP4Ox4vs4jEn0OZ9lnQmf3M+V
tGtlsSlynfn7/s16ZFDv4seHff8I+c63vyv5eUVhbsPvfvtn+dhHPxXTSUE8
nTo5fzxT+04NTbxXZTAGWAf74Q9/2Oi9xpHNA9SLcov2vWbOZdxg75LTEP1O
E+LyxPneeP2ovHTgFc0l3LnjcenRo5cbp3/QnDZ7r8bJnS5rE7Pv/vTH3+vf
p1/jnmeeV5Y2b9slz+17SZ58Zq+8dfyE9vsaNnxkmF/H8fu6BZaI35itYXMB
N/72d7/73YTHbYJtwTWFJ3Ja+N2+Le/Hi/CJ/HpYzk9Tzfn2OWJOQf/DUVQf
2dyETcNYww5A1+D/2HyGrR3Ms411Ez75N77xDf0csS/W/371q1+p7vDHVDA3
tg19JJii/oexSF4Ba7F33H6v/PC6G+TcNufHYnV+7RL66IrYd14mN9zwY3nw
wfula9fOct113w/WfM8JasmvuOKDp/kKH//4x6W2tlZ/p41BxhP53Yx/ag/g
/oorrmj0+1q0aOwX4q9873vfd3bUl+TTn/6s9nugxhY7k7U0bFHTo60Y++e2
Uo7oW/L1r39drvjwlfKFL35Z87ofe+oZ6dilm3zko9fINZ/8N/mP//huGJeJ
ivFELhI+J/qFedFfsyAXw2eOa+brVq7dDTfcoL2GiE1Qj2jnxJg0ewRu/P4M
zRy90SinDrFaFBtLdh0eeeSRRtfOz3mJXleYMr+H1xlf0Rgt7/H9X1tnxT+i
lnbTxm1qI9GDi/y6Dg91cX7S3TE/qXXoJ3/gAxeGa1HYSz5bNta59/O0rS+D
HQ95On4sxXKmozVv/riN1l3E7aw24XxAnI74+V/+cnMjm5XHQS+wcxr3/tEY
RCv56r9/Xbp07yXntHQ2MvkgbVrH4/PnxD/j29E2n9nf4nrZDX3MXJCob5Gf
sxQV5j2/h6bltPp9t4yjpmrXWd8t619n+7X4cQZfn6NXbC47fey0SugnJbo2
ls+m9dHeWobpo2uu+ZTk5MyUU5jjjqP0qdNj+W4DpHOn7hpP/uIXvurl2rQI
10ZNyI/w6+1M2rc/3bfBx2cs2JxrfoD5FH4fKn+s2m/211d9G9d4uvHG38gt
t/xVLr3kQ9KoZ9I5QU0vOUqN+lq0aCMXXHyZfOnLXw3nFf6u1U21OifoS+Hb
Af6x2bHeeuutYSzW6v+j77H1Pv/3WX4R15k4un8z/Ybtn8iua4o9vt/Nrov6
2ayd2LkmxpqoB47pKX/Nz9b9uTZRtqwuMxivF8p3vvMf2ttev//4KXnrzePa
u4d6oIEDhskjXVkbeljzhIJ+A+d71/+c03IkzJZrEau7Nbb4HN+N3eb3AvE5
sjXmqO2U6Dcnni9aac4g+RF33HGX9ngJ1rzaaG5GI92AfsTvadFS14YuvORy
+d5//zCWtxDTNW1ahRzRh4+cDD9eFz2uO+64Q38H+ZHGia//o7opGv9D8H+N
HX9NCW7OxtH7Pbb/kWLxOot7Y+ueqU8+8xr9P/34mq93rK9q9PlEY87mQGJm
lutJvx56pW7b9qiEy1Pufv++g8oR9bCDBg7XNc6HOz6ia6zEtenRRp1A4z4r
QX4okshn43XWW+lrbHkb0ZoBbqxhooP9Or1EvwNOERg2G9LuP/WpT2v/FNbA
fvbTG+Xqqz7hnm+rLDXOhY/lwzuGPnDpFfKDH/9Uexl/4StfjfVKjfdGgqNo
7y0/J5bfjP9J7I4bfhLnya/b8G0Krp3lgtu8x99inqJG3W7+OWLuJV4X7afa
FO06xDhK1L/O+v7ZDbs4Ly9P1/XwR//whz9o3ib5m/QFIAcgOztbpk+fro+J
bfEa7//Tn/6k60k///nPNc5A3IH5kto4at34fn/J7623jipHjz/2tPZzIObQ
r+9g1UVwRN8T9mzBfscfJn8a+5+czHhdXtxXY1xQ18330oeEecOP7XIuuKGL
/N/NOGId9qc//al+lvoe+kZSGwuHzC3JyZNl2LAh0qlTR+13fOONv5Sf/ewG
9bmo4SOH/dZb7pC/3nqX/O63N8m13/m+fOmL35Cvf+M78t3/+m/50Y9vkOtv
+Lnm2X31m9fKTbfdpXUU7FdBnOEH1/1YrvvhjzQn6Z6775QhA/rLpIkTtJcK
/Zk55xwTuuNHP/qR5jGx7mXXjBsxIq4Dr3PeOWdcM3pxcb3oPUG+Bt+B3HLL
LVJeXt5o/dCvm8Fnwgcgp9n6bjVzFOcoug5r85D1v2CutjxEq6VMdIvuR5Vo
Hx3/Osf/H4eJPJ5lS1dqrxHy7Pr0Hihdu/SUnj36ac8GcrDJIe3Tp5/WCLGP
S8+evTWX4b77HlBb6re//b3GnKkLf/HF/VrfZN/hH49fe2M8+a9Z/yTjjf/H
P38yJm/LibePqLz9DnvqHtc4NOuwxBs7PdzNHX9v6dt7mAzoN1L3DkyblqV7
k+UWlmhuHXsys88E+7uy9pqSMV0K5pbpXq6Nvyv+G7geflzOYv66J4h3fbjW
Z8r38f9Wol4n/v95H/YJc67fdyvRfstNRbBnrccJ6wVwxFzNubQYp5/DeKbz
b7Ecf0/RRDfbF8TGpcVSg+t/TMWGMP1Q5haXa5+hoKZukLI0oP9QfUzvBPLH
WZ9ByGeAJ+pXEfp1o7PgjH5F/G3dZ907NI7F1iz9sRLdpy7R8/HxG+eosZzU
Gm+4Jue2R3d3fANGyOSJ02XkyEm6b2a2Y2jWnGLJdazYPmFwRP+tvKJy3RuT
fZFfe+tYUPbBydHDaZyvw3lMlMdjx+nzw/tsPrBavkT7t3CzdVkbDxI7BsaL
3y/Ir4t9v8f0P1qsx4nF7Py+W7Z2aj0c/PFk48f0USJmjI0z7ekWfW+imnVy
s7Omz1TfCI5gqFfP4D7QTT20zo4YhPWc84XnyXMlb5W8N4v/IYFeio8nuzEW
/NgKr0d17uk6OM7RyVPu3Jw8pvro2LEj2k+R2gvy0Pv0HiwjR0yQzIx8mTw5
U/dlnlsR7BkW7GW5RKrqV6iwlzIssU9LWdV8ORbbL+rtk/F5yvaQj8aDeGxr
6H5PXH5Lon0r/f/718r0U/T8wA1zruV7+zVI/th6v8f3P0qsN4X1tLG9xMj1
MJ3kj533oo/ejRufrUR9npgWGePvvHNKc7PJ4aZvDzFv2CFex7zev98QFeq+
rced1oA7dqifwA6EPTiihom/c/TI2xoDjG7uyHdzDhKx7M/Tdj7sXMR/C+PZ
10uBvPPOCamoqHD+Sgc9HvJXhw8bJ+PHpjq/ZKbufUkvYnqoat143Qplif1A
4Yr81Okz8yS/qET3BbM92M5285mKzhF2/H5+j38OEu15xc3PNWZc4BdhtzDf
Wm5ddL/ypsSR5ef6vSDxk6xOC90NX1Hb+Gy6JXo70/UJ/n9SEtn7arqcCuLe
2VmzNd49aOBIx8oA9S8evP8RvcffQD/BGD6T2X0whf9EHR5MEderqpoXG2en
6xbik6yf8fuZa5FETJ1+/PFborxobrm5+WpzYptihyZNSFZhz7LpM3NlZmGx
FJRX6b7LsENON3vxoaPYmy8zO9jjmT3W+Arz7aI+UTSv9O9xs7/Ld2H7o3us
VtriUeiiRHkMTam23K8V8WuIsXlhyfxI2LLxhZDvwJjj/t2E9zNO7XOI1fbv
3/+i+9t73Wv73XV487TrSJwBjoYMHu3stDHStXNf6dKpj3R4sLvceccD8sD9
nZWlbo/0Dv2m7t36qC8CR+gn6i7I+aZeght6Lhj3wdhnLmUdhL5I5HfbXpi2
h4L/O+0xv4Xjx79mPub//h6Q8XEYcEQshPoNeobTqxVh/+ZpObMkZ06hzCmr
1LryUuOoslb3XS4urVKdNcPppJdeDuop3377dIVkthbn1Y7JjvNs8m7XzuYV
rj82HHOr1UpY/Z7FF5oyR/Z7Lf5mfhJjxPK/7dxZLM/2GmOsWR7R2cTei9hj
8rLoO7Nx43pZvXql+/9md90OePZGMD7ecSphthtHY0YnqXTs0E3uuP1+ueO2
B+Wmv9whd935oMbA4ahH975q3+EzsbbEPXLH7ffIxImTdb9lbqaPGI/MtYw7
euIQeycfnDVLennwO5lHbG3a/z1wx28glsz7+b+fSxXOA+7n0HefuCI9Wdkv
nb2VdE+a5KkyNTNbsmblad1eUVmwTzli+5gXz63QPdDZ65ncVTtu3y5DGOvw
T18ajonHHB/HejZ5t2tn+ybYdbd5lfEBP4jpovd7HP8zMGRzB+fD9hVjXDCv
MS8zF/nnlHNsXLzbdfI5QhhzXGfqXdasWSWLFtUpS+gmu4U6ww15eq8OHjRC
bbbOnXqqHrr15nvl1lvu1lw74uAwFMSUe2iPH/QRNUvU0LHOxF4vdjt+vLG9
BkccD+xwvPxGxPSxz5H9FuYAdBf80UeHe/6O3QJGg8fsj06cgT6S9DvGTzOO
UtIzJSN7pszML9KYN3vDstdyQXGlCvtOw1Hm9BmyZesO7zfE/TSYQjdQL0IO
Hcdi/Wn8855I3u36MXdy3dE/2L3Mreg8xgfjhHnX/KKmpn/OxBP3fv8t/CKf
J84hY8XsGf7P9XsvAosm2IxwSbxn+/atsnIlvZzWqm3nz+OMQ+Jrmzdtd775
GM31Nt2DPYcuuv22exwvndUPIiaHXwRD9GagdyQxcXqs0A/Cxp1/z29mfFhv
Q44tsDf362824bfa7+X9jKvg+LerDqNmyc8B8TmCYXrvs65ldh0sJaekK0fp
WTNkxuwCySsoCfmZU1Qh+YXlUlBYKrNzC3Xf5CVLG8KWR9F1CL4bvcixcEwW
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
xLyPHDsa1nH5HPk965s5ahoSXbP185BsbxCrhbJ8Y8sfsPiU5Y9aXizP8X7G
lOVWWq6P9eH4ex6/5cjDEXF7dKn11G/kqZ2hPmnfvgOydfM2WbZshczJK9Bc
jPT0aZrfeujQq1oLH88zOiXRei6+m7nD9qyKxk2apWmJH8OzvCNsM+wUyw2F
Kcaq5RBYPQf/Z/zyOuzho1iOmeVY/m/0VkNfWY4838N3cyx7YnuZRHvsJ6rp
thwlfrfFLbnnOE+PTzYOAvIeq2/hvHCu/BjD+31Nm+UfJ9E8I9NLlhPJ3Go+
iOVhW961n7fMeOJ1PzfZcsgsluB/799jnJmNZLE7xrHpT/jmmP2+VdGbv09b
lLPo81F9xndbfarVePt69/2+rs3yj5cz5Q35vpPVciTKwfZzko2daC+1/w3/
wM9V8/e/QTdgf9oeqhyXv6eQ3aK9Sawnj9Vyn6kmn+9D19o+O6aLLHc42iuh
Wf61JVE82feXovmu/n620ecsH90X/7sS5Vb8/0r0OMxXsjps89cY5+gOOIv2
lHuvN+OJ70XvYj/yt9FH9rctr7jZN2pa8j/JM7Zx6++d+F5zmP+3jj96bGaP
4usH9VXPhvFDvxe21Wb4fRftFt37zvo6Wt6H2XL8PavVs70e/HPzfl/bZnl/
5Gwcmc0TrWWIsvNe//bf65g5JmowLN5g4xiW0Eu2/4Cth1mMkfFvdhgMWL8Q
i60g1mPF6pzsb1gs0taKLD7XVPeUbJbEa7NRO8848tdyuPfzSBPlSthnozkJ
f0+e+Bt2bMY0z1suux8jMb/J+iL4/auw/1jvsv4kfg8F87Mstm92HP6R5TX5
dd5nOq/N0iz/V8X8Nj+HEAaw94iNo1OsD5PFDOyxxfys5wqfsR5ftvZr7Pjx
/Oi80yzN8q8gfp2F2XHWa87vo+L3FrG+KrYOhv3G+83+s5ikH3c5Wy5jszTL
/2WJ2pV+vwN/vdn6iphPFe0zkqhPj5/3878dT2mWZvlnkUT+mcXnz9RTxXjx
xY9Nvt+/qVma5f2QKEdnioPY+98tnn+29bBm/dQs/yrybmu/Fs9/r75Mop5N
zXnczfKvLu913EfXlBPpm79F3u/f3yzN8veQs8UB/PXlM435MzEX/XvNHDVL
szRLszRLszRLszRLszRLszRLszRLszRLszTLP4v8P4TGjOk=
      "], {{0, 230}, {210, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->{135.5, Automatic},
    ImageSizeRaw->{210, 230},
    PlotRange->{{0, 210}, {0, 230}}]}], ";"}]], "Input",
 CellChangeTimes->{{3.716236385811738*^9, 
  3.71623639109863*^9}},ExpressionUUID->"b9340e44-e82a-40ce-903f-\
f2aed75112ba"],

Cell[BoxData[
 RowBox[{"ImageRotate", "[", 
  RowBox[{"imagen", ",", 
   RowBox[{"\[Pi]", "/", "6"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7162364010998163`*^9, 
  3.7162364104736423`*^9}},ExpressionUUID->"6abeef85-bb47-42e7-a1f0-\
36a352b3efc6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", " ", "=", " ", "1.9"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageTransformation", "[", 
  RowBox[{"imagen", ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Re", "[", "#", "]"}], ",", 
        RowBox[{"Im", "[", "#", "]"}]}], "}"}], "&"}], "[", 
     RowBox[{"val", "/", 
      RowBox[{"(", 
       RowBox[{"1", "+", "I", "-", 
        RowBox[{"val", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "I"}], "}"}], ".", "#"}]}]}], ")"}]}], "]"}], 
    "&"}], ",", "600", ",", 
   RowBox[{"Padding", "\[Rule]", "\"\<Reflected\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.716236442698291*^9, 
  3.716236454329885*^9}},ExpressionUUID->"b633caf3-f330-4f93-ba47-\
70199403a6a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Funcional", "Subchapter",
 CellChangeTimes->{{3.7162344788370857`*^9, 
  3.716234479909213*^9}},ExpressionUUID->"ad858a3c-0d32-4a2d-87ce-\
1c7d45b2b7c8"],

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", 
  RowBox[{"Range", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.7162366619293203`*^9, 
  3.716236667119528*^9}},ExpressionUUID->"c5f97b32-24ce-4720-97ef-\
7167d4fe3984"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.716236669409409*^9, 
  3.71623667856706*^9}},ExpressionUUID->"58ee490a-d027-47aa-8fa7-\
c349487adf06"],

Cell[BoxData[
 RowBox[{"b", " ", "=", " ", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.716237372182273*^9, 
  3.716237384782058*^9}},ExpressionUUID->"91fbfd3d-83d5-4c40-aad8-\
96cf3992c755"],

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", "b", ",", 
   RowBox[{"{", 
    RowBox[{"All", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716237389814768*^9, 
  3.716237395381585*^9}},ExpressionUUID->"c30831ad-292b-45f4-9e2c-\
3ea28b49075d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basado en el conocimiento", "Subchapter",
 CellChangeTimes->{{3.7162344894685*^9, 
  3.716234492212591*^9}},ExpressionUUID->"d6aebf14-3e54-493a-bde5-\
8c5bc18e9305"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = " picture of a dog", Typeset`newq$$ = 
   " picture of a dog", Typeset`chosen$$ = 
   "Entity[\"Species\", \
\"Infraspecies:CanisLupusFamiliaris\"][EntityProperty[\"Species\", \
\"Image\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              " picture of a dog", 
               Defer[
                Entity["Species", "Infraspecies:CanisLupusFamiliaris"][
                 EntityProperty["Species", "Image"]]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 " picture of a dog", 
                  Defer[
                   Entity["Species", "Infraspecies:CanisLupusFamiliaris"][
                    EntityProperty["Species", "Image"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"dog\"",RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}],
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"","\"species specification\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}],
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"dog\"",RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}],
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"","\"species specification\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}],
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"dog\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}], 
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"", "\"species specification\""}, 
                    "Entity"], "[", 
                    TemplateBox[{"\"image\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}], 
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  " picture of a dog", 
                   Defer[
                    Entity["Species", "Infraspecies:CanisLupusFamiliaris"][
                    EntityProperty["Species", "Image"]]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    " picture of a dog", 
                    Defer[
                    Entity["Species", "Infraspecies:CanisLupusFamiliaris"][
                    EntityProperty["Species", "Image"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"dog\"",RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}],
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"","\"species specification\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}],
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"dog\"",RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}],
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"","\"species specification\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"image\"",RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}],
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"dog\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{"\"Species\"", ",", 
                    "\"Infraspecies:CanisLupusFamiliaris\""}], "]"}], 
                    "\"Entity[\\\"Species\\\", \
\\\"Infraspecies:CanisLupusFamiliaris\\\"]\"", "\"species specification\""}, 
                    "Entity"], "[", 
                    TemplateBox[{"\"image\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Species\"", ",", "\"Image\""}], "]"}], 
                    "\"EntityProperty[\\\"Species\\\", \\\"Image\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"23f44575-15e3-4ab7-a608-0e410785cf14"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "xalapa", Typeset`newq$$ = "xalapa", 
   Typeset`chosen$$ = 
   "Entity[\"City\", {\"Xalapa\", \"Veracruz\", \"Mexico\"}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["xalapa", 
               Defer[
                Entity["City", {"Xalapa", "Veracruz", "Mexico"}]], 
               "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["xalapa", 
                  Defer[
                   Entity["City", {"Xalapa", "Veracruz", "Mexico"}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Xalapa\"", ",", "\"Veracruz\"", ",", "\"Mexico\""}], 
                    "}"}]}], "]"}],
                   "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \\\"Veracruz\\\", \
\\\"Mexico\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Xalapa\"", ",", "\"Veracruz\"", ",", "\"Mexico\""}], 
                    "}"}]}], "]"}],
                   "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \\\"Veracruz\\\", \
\\\"Mexico\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"\"Xalapa\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", 
                    "\"Mexico\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \
\\\"Veracruz\\\", \\\"Mexico\\\"}]\"", "\"city\""}, "Entity"]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["xalapa", 
                   Defer[
                    Entity["City", {"Xalapa", "Veracruz", "Mexico"}]], 
                   "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "xalapa", 
                    Defer[
                    Entity["City", {"Xalapa", "Veracruz", "Mexico"}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", 
                    "\"Mexico\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \
\\\"Veracruz\\\", \\\"Mexico\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", 
                    "\"Mexico\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \
\\\"Veracruz\\\", \\\"Mexico\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"Xalapa\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", 
                    "\"Mexico\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \
\\\"Veracruz\\\", \\\"Mexico\\\"}]\"", "\"city\""}, "Entity"]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"8df7d435-c7bf-439d-a462-8721e7ec115f"],

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", "\"Mexico\""}], 
           "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \\\"Veracruz\\\", \
\\\"Mexico\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Coordinates\>\""}], "]"}]], "Input",
 NumberMarks->False,ExpressionUUID->"5eb3281b-5bb8-48a8-ac03-7d33dd4360f5"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Xalapa\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          RowBox[{"\"Xalapa\"", ",", "\"Veracruz\"", ",", "\"Mexico\""}], 
          "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"Xalapa\\\", \\\"Veracruz\\\", \
\\\"Mexico\\\"}]\"","\"city\""},
   "Entity"], "[", "\"\<Population\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.716237062035874*^9, 
  3.716237065657889*^9}},ExpressionUUID->"f4bfc391-10ec-46ce-b51f-\
9e1b6d1c8c75"],

Cell[BoxData[
 RowBox[{"EntityList", "[", 
  RowBox[{"EntityClass", "[", 
   RowBox[{"\"\<Country\>\"", ",", "\"\<Countries\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.716237173892008*^9, 3.716237176717861*^9}, {
  3.716237213131706*^9, 
  3.716237252088443*^9}},ExpressionUUID->"3c9afc06-d302-4ba1-b142-\
024dd537a545"],

Cell[BoxData[
 RowBox[{"EntityList", "[", "\"\<Planet\>\"", "]"}]], "Input",ExpressionUUID->"e821a287-53eb-4ea7-b6e9-a45d0e4f0fab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactivo", "Subchapter",
 CellChangeTimes->{{3.716234546090733*^9, 
  3.7162345484346733`*^9}},ExpressionUUID->"d4b72b2c-48c5-4cce-8ecc-\
2289aac5c629"],

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", 
  RowBox[{"Range", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.716237608421883*^9, 
  3.716237616363872*^9}},ExpressionUUID->"aac81c96-8bb2-4df1-bbb7-\
d970306dc279"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "i"}], "&"}], ",", "a"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7162376202188253`*^9, 3.716237642355*^9}, {
  3.716242406567369*^9, 
  3.716242406773076*^9}},ExpressionUUID->"364b02d1-bc5b-4c9c-ac3c-\
b970e3dcff06"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "^", "i"}], "&"}], ",", "a"}], "]"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "11"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "100"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7162376635065393`*^9, 3.716237700538426*^9}, {
  3.7162423931111603`*^9, 
  3.716242395426639*^9}},ExpressionUUID->"39c70932-3cd9-49ab-b869-\
a2a8d16ef858"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["S\[IAcute]ntaxis b\[AAcute]sica y funciones", "Chapter",
 CellChangeTimes->{{3.7161565122882423`*^9, 
  3.716156517496114*^9}},ExpressionUUID->"ed36cafc-f2c2-4672-b9c5-\
ff075130d833"],

Cell[CellGroupData[{

Cell["Expresiones", "Subsection",
 CellChangeTimes->{{3.716247116898209*^9, 
  3.716247125576119*^9}},ExpressionUUID->"4dae9897-b6d1-47af-b697-\
4f515596be7b"],

Cell[TextData[{
 "En la interfaz notebook de ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " existen dos tipos de entrada: c\[OAcute]digo y texto. Las opciones para \
alternar entre c\[OAcute]digo y texto se encuentran en Format -> Style. El c\
\[OAcute]digo se puede ejecutar con Shift+Enter. La interfaz de notebook act\
\[UAcute]a como un front-end, que se encarga de enviar el c\[OAcute]digo \
ejecutado al kernel."
}], "Text",
 CellChangeTimes->{{3.7162383462823887`*^9, 3.716238444266582*^9}, {
  3.716238483987343*^9, 
  3.716238536899379*^9}},ExpressionUUID->"9d7e0e56-e36e-4a74-9fcb-\
2e271d496a0d"],

Cell["\<\
En el lenguaje Wolfram todo son expresiones. Las expresiones pueden consistir \
en n\[UAcute]meros como:\
\>", "Text",
 CellChangeTimes->{{3.716238835032655*^9, 
  3.716238869392926*^9}},ExpressionUUID->"ccd27eaf-e077-422a-a0a3-\
9876c8de9719"],

Cell["Enteros", "Text",
 CellChangeTimes->{{3.716238866576326*^9, 
  3.716238867208621*^9}},ExpressionUUID->"3041c4f6-c629-49ce-a6d7-\
aa330ffc6029"],

Cell[BoxData["5"], "Input",
 CellChangeTimes->{
  3.7162388517459097`*^9},ExpressionUUID->"504b63d0-4540-46ff-ad3f-\
4968837f569a"],

Cell["N\[UAcute]meros reales", "Text",
 CellChangeTimes->{{3.7162388886322603`*^9, 
  3.716238890648501*^9}},ExpressionUUID->"0b40fc86-22d9-48fc-92f3-\
6ff8658bcf58"],

Cell[BoxData["230.4"], "Input",
 CellChangeTimes->{{3.716238858530176*^9, 
  3.716238859664877*^9}},ExpressionUUID->"8485a129-232d-40b9-b076-\
d6095b1513fc"],

Cell["N\[UAcute]meros complejos", "Text",
 CellChangeTimes->{{3.716238896760096*^9, 
  3.716238900368396*^9}},ExpressionUUID->"2d6afec4-2a1f-4125-aab7-\
a90b675538ca"],

Cell[BoxData[
 RowBox[{"2", "+", "\[ImaginaryI]"}]], "Input",
 CellChangeTimes->{{3.716238902441689*^9, 
  3.716238924036069*^9}},ExpressionUUID->"54023c2f-cc9c-4ff8-9ad4-\
13d450fc3459"],

Cell["Racionales", "Text",
 CellChangeTimes->{{3.7162389283035717`*^9, 
  3.716238929600278*^9}},ExpressionUUID->"e13c3d26-505c-42b5-9978-\
21303e851263"],

Cell[BoxData[
 RowBox[{"3", "/", "2"}]], "Input",
 CellChangeTimes->{{3.7162389310094213`*^9, 
  3.716238940634363*^9}},ExpressionUUID->"fe878ccb-1f5d-41cc-8e1c-\
5edf78e2f06c"],

Cell["Cadenas de texto:", "Text",
 CellChangeTimes->{{3.716242050355884*^9, 
  3.716242054544404*^9}},ExpressionUUID->"f4fa3d60-e065-46e0-993c-\
ce774f775d13"],

Cell[BoxData["\"\<Hello world\>\""], "Input",
 CellChangeTimes->{{3.716242057075489*^9, 
  3.7162420604487886`*^9}},ExpressionUUID->"68aba1a9-f386-4aaa-b738-\
8fa28ff9a1e5"],

Cell["Y s\[IAcute]mbolos, los cuales se pueden asignar", "Text",
 CellChangeTimes->{{3.716242068401168*^9, 3.716242074513523*^9}, {
  3.716316571764583*^9, 
  3.716316577060268*^9}},ExpressionUUID->"2afca0cb-0632-48ab-b13a-\
40e2a8cc2566"],

Cell[BoxData["x"], "Input",
 CellChangeTimes->{{3.716242076222373*^9, 3.716242081894771*^9}, {
  3.716242188598565*^9, 
  3.716242189045506*^9}},ExpressionUUID->"f60cc8df-c5ef-4307-9185-\
3acc51497a5f"],

Cell[BoxData[
 RowBox[{"\[Alpha]", " ", "=", " ", "1"}]], "Input",
 CellChangeTimes->{{3.716316585342005*^9, 3.7163165861244383`*^9}, {
  3.7163167121490307`*^9, 
  3.716316712626567*^9}},ExpressionUUID->"b76d31f4-ab38-44c1-a990-\
178dd3e6110a"],

Cell[BoxData["\[Alpha]"], "Input",
 CellChangeTimes->{
  3.716316588749981*^9, {3.716316714867525*^9, 
   3.716316715431378*^9}},ExpressionUUID->"9d45fb3b-5d77-4ff9-bd5e-\
9cebb303798e"],

Cell["\<\
Nota, para introducir los s\[IAcute]mbolos especiales se usa la tecla Esc. \
Por ejempllo, para \[Alpha] se pulsa Esc + a + Esc.\
\>", "Text",
 CellChangeTimes->{{3.716326123358204*^9, 
  3.71632615977426*^9}},ExpressionUUID->"45be4bf4-aeb3-4d0b-b91f-\
d26ee66572a6"],

Cell["\<\
Es muy importante hacer notar que como todos son expresiones, todo, incluso \
los s\[IAcute]mbolos. Es por eso que es posible dar un s\[IAcute]mbolo no \
asignado como argumento de una funci\[OAcute]n.\
\>", "Text",
 CellChangeTimes->{{3.7163164437500973`*^9, 3.7163164961650333`*^9}, {
  3.716316541797196*^9, 3.7163165484849157`*^9}, {3.716316595332456*^9, 
  3.716316618460299*^9}},ExpressionUUID->"e859f8d1-1e5f-430e-99a3-\
54e46b4a5f1a"],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.716316648436906*^9, 
  3.7163166495798073`*^9}},ExpressionUUID->"47b6c6d6-d293-476f-a8ca-\
717a029d5e7a"],

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"f", ",", "x", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.716316626164731*^9, 
  3.7163166543156652`*^9}},ExpressionUUID->"49193b8c-b7ca-4674-a35f-\
f95a54048ee3"],

Cell["\<\
Al asignar una expresi\[OAcute]n esta se guarda en el espacio global del \
kernel. Si es necesario se puede borrar la definici\[OAcute]n usando la funci\
\[OAcute]n Clear.\
\>", "Text",
 CellChangeTimes->{{3.716326084687027*^9, 
  3.716326113463048*^9}},ExpressionUUID->"83c7c61b-ac6f-463a-97bb-\
73e5cb65c55c"],

Cell[BoxData[
 RowBox[{"Clear", "[", "\[Alpha]", "]"}]], "Input",
 CellChangeTimes->{{3.716326114458864*^9, 
  3.716326116518772*^9}},ExpressionUUID->"4cdba9ed-f199-4771-8026-\
26ce80707943"],

Cell["\<\
Para realizar c\[AAcute]lculos num\[EAcute]ricos no es recomendable el uso de \
n\[UAcute]meros racionales. Para convertir estos en n\[UAcute]meros reales se \
utiliza la funci\[OAcute]n N.\
\>", "Text",
 CellChangeTimes->{{3.71632627602814*^9, 
  3.7163263125640507`*^9}},ExpressionUUID->"169eb46a-4ee5-44aa-b825-\
4a8e0586bdbc"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"4", "/", "9"}], "]"}]], "Input",
 CellChangeTimes->{{3.71632631408873*^9, 
  3.716326318172282*^9}},ExpressionUUID->"1bda96b0-506c-4eb8-8e66-\
4a3c9d2a8e13"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Propiedades de las expresiones", "Subsection",
 CellChangeTimes->{{3.716323189345352*^9, 
  3.7163231923449*^9}},ExpressionUUID->"129cde23-667e-4e96-b45f-8e37fccf7242"],

Cell[TextData[{
 "A este tipo de elementos se les denomina ",
 StyleBox["expresiones at\[OAcute]micas",
  FontSlant->"Italic"],
 ", esto es, expresiones que no pueden ser subdivididas. Una manera de \
conocer si una expresi\[OAcute]n es at\[OAcute]mica es usando la funci\
\[OAcute]n AtomQ."
}], "Text",
 CellChangeTimes->{{3.716242224492794*^9, 3.71624225166496*^9}, {
  3.71624228750732*^9, 
  3.716242341868287*^9}},ExpressionUUID->"f180d076-39b3-4317-8053-\
8b14bf2794b8"],

Cell[BoxData[
 RowBox[{"AtomQ", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.716242342865761*^9, 
  3.7162423483154383`*^9}},ExpressionUUID->"0e6381c0-125e-4f3b-ae1a-\
7f79351edcfa"],

Cell[BoxData[
 RowBox[{"AtomQ", "[", 
  RowBox[{"x", "+", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.716242349731729*^9, 
  3.716242357762651*^9}},ExpressionUUID->"1634e5f7-ae02-49f3-bc50-\
be3e05db59b3"],

Cell["\<\
Las expresiones est\[AAcute]n compuestas por un encabezado que indica el tipo \
de expresi\[OAcute]n, y el contenido, el cual es manejado y optimizado por el \
kernel. Se puede ver el encabezado usando la funci\[OAcute]n Head.\
\>", "Text",
 CellChangeTimes->{{3.716242570726149*^9, 
  3.716242678789563*^9}},ExpressionUUID->"632ccdd2-38bd-45bd-ab22-\
8982827cd224"],

Cell[BoxData[
 RowBox[{"Head", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.716242679653853*^9, 
  3.7162426807940598`*^9}},ExpressionUUID->"b2acd88b-93e6-4ee3-9bdf-\
81e46bfb6eec"],

Cell[BoxData[
 RowBox[{"Head", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.716242682012582*^9, 
  3.716242684590198*^9}},ExpressionUUID->"1913f6eb-8c84-4e66-9dec-\
25bb02437139"],

Cell[BoxData[
 RowBox[{"Head", "[", "\"\<hello world\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.71624268559968*^9, 
  3.71624269102488*^9}},ExpressionUUID->"e647f06f-53c3-4956-a6fe-\
cad5a142f532"],

Cell[BoxData[
 RowBox[{"Head", "[", "3.3", "]"}]], "Input",
 CellChangeTimes->{{3.716242692365613*^9, 
  3.716242696325973*^9}},ExpressionUUID->"ba926b92-d9c0-4ac6-9c01-\
9d1ed08b86b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Listas", "Subsection",
 CellChangeTimes->{{3.716323219329653*^9, 
  3.716323220049552*^9}},ExpressionUUID->"6b2db38b-c5e0-4ca4-bd7a-\
fbfa83db10f6"],

Cell["\<\
Se pueden definir listas con varios tipos de expresiones, como por ejemplo\
\>", "Text",
 CellChangeTimes->{{3.716315435731133*^9, 
  3.7163154564509583`*^9}},ExpressionUUID->"7ad9776d-bbb9-4cb6-a858-\
8fa4e38aff93"],

Cell[BoxData[
 RowBox[{"list", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"1", ",", "x", ",", "\"\<a string\>\"", ",", 
    RowBox[{"7", "/", "8"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7163154578991833`*^9, 
  3.7163154871072817`*^9}},ExpressionUUID->"3de15651-32b3-489c-a5f3-\
037e32a37915"],

Cell["\<\
Cuando se define una lista se crea una expresi\[OAcute]n con el encabezado de \
lista,\
\>", "Text",
 CellChangeTimes->{{3.7163154918986177`*^9, 
  3.716315517114499*^9}},ExpressionUUID->"2894add8-123f-42a8-ac4b-\
53637de97727"],

Cell[BoxData[
 RowBox[{"Head", "[", "list", "]"}]], "Input",
 CellChangeTimes->{{3.716315504930765*^9, 
  3.716315506874797*^9}},ExpressionUUID->"0b75177b-3155-4ee7-bf14-\
424b6ab0a25e"],

Cell["\<\
y se puede acceder a cada elemento por su \[IAcute]ndice (comenzando a partir \
de 1)\
\>", "Text",
 CellChangeTimes->{{3.716315522730342*^9, 
  3.7163155392504177`*^9}},ExpressionUUID->"3fae7d1e-cbb8-4f61-8eb6-\
eca6812678f1"],

Cell[BoxData[
 RowBox[{"list", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7163155410597963`*^9, 
  3.716315547930398*^9}},ExpressionUUID->"29ca0bc4-f468-4ad8-9a34-\
e38816b99cf6"],

Cell[BoxData[
 RowBox[{"list", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7163155509159203`*^9, 
  3.716315552218649*^9}},ExpressionUUID->"711b3aed-98e8-4189-9085-\
2e9c9eacbbb1"],

Cell["Los \[IAcute]ndices tambi\[EAcute]n pueden ser negativos.", "Text",
 CellChangeTimes->{{3.716315555410294*^9, 
  3.716315571370392*^9}},ExpressionUUID->"ac9d8e2e-e698-4369-91cc-\
e137f823432c"],

Cell[BoxData[
 RowBox[{"list", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716315565122504*^9, 
  3.716315566962234*^9}},ExpressionUUID->"c7f5380b-dfc2-4f2a-9eb2-\
dc1b78cca427"],

Cell["\<\
Para conocer el tama\[NTilde]o de una lista se usa la funci\[OAcute]n Length.\
\
\>", "Text",
 CellChangeTimes->{{3.716318172829063*^9, 
  3.716318181037579*^9}},ExpressionUUID->"781b29b4-b943-440a-9986-\
578c3660154a"],

Cell[BoxData[
 RowBox[{"Length", "[", "list", "]"}]], "Input",
 CellChangeTimes->{{3.716318182158556*^9, 
  3.716318184293425*^9}},ExpressionUUID->"39bf3b81-a23a-42a7-b087-\
07754cbb6882"],

Cell["\<\
Se pueden acceder a varios elementos simult\[AAcute]neos de una lista por \
medio del operador Span (  ;;  ) y del operador Part (  [[]]  ), por ejemplo\
\>", "Text",
 CellChangeTimes->{{3.716323312618354*^9, 3.716323342171146*^9}, {
  3.716323481476103*^9, 
  3.716323497044105*^9}},ExpressionUUID->"6d35a888-dee3-4b29-b4b0-\
6b9b90a80d13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", 
    "h"}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ";;", "4"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716323394053362*^9, 
  3.716323394163357*^9}},ExpressionUUID->"26b150c2-ff28-4205-8fc3-\
ac9745147c5f"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", 
      "h"}], "}"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;", "4"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7163235035102053`*^9, 
  3.716323508357192*^9}},ExpressionUUID->"a4d0ab41-3eb9-4375-afc9-\
68212759b05d"],

Cell["\<\
nos devuelve los elementos desde el \[IAcute]ndice 2 al \[IAcute]ndice 5. \
Tambi\[EAcute]n se puede especificar el intervalo de salto, como por ejemplo, \
tomar los elementos del 1 al 6 dando saltos de 2 en 2.\
\>", "Text",
 CellChangeTimes->{{3.716323372458764*^9, 
  3.716323441188059*^9}},ExpressionUUID->"c68b6869-121b-42c6-b982-\
8636a0c4e2fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", 
    "h"}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "6", ";;", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716323414731348*^9, 
  3.716323421843521*^9}},ExpressionUUID->"2c7ca0b5-304e-4883-afc9-\
74ec85b27b81"],

Cell["\<\
En caso de tener listas bidimensionales se puede hacer uso de la propiedad \
All del operador Part para acceder a cada unas de las columnas.\
\>", "Text",
 CellChangeTimes->{{3.716323583651989*^9, 
  3.716323612324356*^9}},ExpressionUUID->"ae905511-8c5b-435b-a2d1-\
c3eaf64629bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7163236221561413`*^9, 
  3.7163236276934967`*^9}},ExpressionUUID->"79c4e247-ab1b-4465-93af-\
c17e4a8d685b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716323633324704*^9, 3.7163236351245613`*^9}, {
  3.7163240660604877`*^9, 
  3.716324076026886*^9}},ExpressionUUID->"fee33151-5e44-4ca7-968c-\
72e8a7f6c453"],

Cell["\<\
Se puede tambi\[EAcute]n obtener varios \[IAcute]ndices espec\[IAcute]ficos \
de las sublistas.\
\>", "Text",
 CellChangeTimes->{{3.71632409277059*^9, 
  3.7163241195071487`*^9}},ExpressionUUID->"eb631fb8-f910-4e85-991e-\
88d2324a2542"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716324027706953*^9, 3.7163240556038713`*^9}, {
  3.716324086333675*^9, 
  3.716324088827272*^9}},ExpressionUUID->"fe52e664-c517-4756-9f99-\
0ae2c667efdb"],

Cell[CellGroupData[{

Cell["Ejercicio", "Subsubsection",
 CellChangeTimes->{{3.716323803795923*^9, 
  3.716323805588084*^9}},ExpressionUUID->"f36e7123-4baa-453e-9980-\
ec2f8367c738"],

Cell["Dada la matriz", "Text",
 CellChangeTimes->{{3.716323815428012*^9, 
  3.716323817060093*^9}},ExpressionUUID->"305c42fa-40e6-4dde-a8fb-\
68ad44bd527a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Range", "[", "12", "]"}], ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{"MatrixForm", "[", "m", "]"}]}], "Input",ExpressionUUID->"97c221a4-\
fc67-4c77-bf14-ee9defaa3926"],

Cell["\<\
Intercambie la segunda y tercera fila, y la segunda y la tercera columna de \
forma que quede\
\>", "Text",
 CellChangeTimes->{{3.716323828075817*^9, 
  3.716323865331749*^9}},ExpressionUUID->"bca3a997-10e4-4b05-be6d-\
fdb4a24c6aec"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"9", ",", "11", ",", "10", ",", "12"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7", ",", "6", ",", "8"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.716323866200096*^9, 3.716323869108095*^9}, 
   3.7163239079378567`*^9, 
   3.716323993209807*^9},ExpressionUUID->"40e1a01d-10c5-4b3b-b705-\
7cde8e986167"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operadores", "Subsection",
 CellChangeTimes->{{3.716323259705874*^9, 
  3.71632326141009*^9}},ExpressionUUID->"5fa28333-c234-4aa9-a0e0-\
f75b49bf0170"],

Cell["\<\
Se pueden combinar varias expresiones por medio de operadores. Un ejemplo de \
operador es el s\[IAcute]mbolo de adici\[OAcute]n +. Cuando se realiza una \
suma, Mathematica nos devuelve el resultado.\
\>", "Text",
 CellChangeTimes->{{3.716242768996567*^9, 
  3.716242859627146*^9}},ExpressionUUID->"bf21fb19-a120-4cb3-b7f4-\
29e17db3641c"],

Cell[BoxData[
 RowBox[{"2", "+", "2"}]], "Input",
 CellChangeTimes->{{3.716242837254171*^9, 
  3.716242837511154*^9}},ExpressionUUID->"80e4c38f-7bba-4a8c-ba70-\
b24c8b4b75cd"],

Cell["o", "Text",
 CellChangeTimes->{
  3.7162429407799377`*^9},ExpressionUUID->"2204fd5f-b0b7-45de-aea4-\
39e91a46420e"],

Cell[BoxData[
 RowBox[{"x", "+", "y"}]], "Input",
 CellChangeTimes->{{3.716242942224532*^9, 
  3.716242946611617*^9}},ExpressionUUID->"689c281f-4ebb-42e0-9b74-\
9e9dee826b5f"],

Cell["\<\
En realidad, internamente el kernel se encarga de interpretar los operadores \
y por medio de una regla de sustituci\[OAcute]n reemplaza el operador por una \
funci\[OAcute]n. La forma real de la expresi\[OAcute]n se puede obtener con \
la funci\[OAcute]n FullForm.\
\>", "Text",
 CellChangeTimes->{{3.716242863118059*^9, 3.7162429203721523`*^9}, {
  3.716242955996347*^9, 3.716242989298139*^9}, {3.716243096065228*^9, 
  3.716243098433326*^9}},ExpressionUUID->"2da4a678-2e35-4ca0-9740-\
3298516bde68"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"x", "+", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.716242990252696*^9, 
  3.716242994385521*^9}},ExpressionUUID->"bd38f006-543c-4f39-921d-\
33fc8c6b184d"],

Cell["N\[OAcute]tese que el encabezado de una suma es la funci\[OAcute]n \
Plus.", "Text",
 CellChangeTimes->{{3.7163154029873667`*^9, 
  3.716315417699676*^9}},ExpressionUUID->"644c522e-3756-4ea7-a83f-\
805a5985f8a5"],

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"x", "+", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.716315421651134*^9, 
  3.7163154233711433`*^9}},ExpressionUUID->"1b81ff35-951c-4126-99cd-\
74e22f9cfff6"],

Cell["\<\
Los operadores funcionan tambi\[EAcute]n con expresiones m\[AAcute]s \
complejas.\
\>", "Text",
 CellChangeTimes->{{3.7162430501555*^9, 
  3.716243113966975*^9}},ExpressionUUID->"4e7e962f-7443-4d1a-a3ff-\
6d5c2eafcfe5"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"y", "^", "2"}]}], ")"}], "*", "z"}], "]"}]], "Input",
 CellChangeTimes->{{3.7162430045162983`*^9, 
  3.7162430150631533`*^9}},ExpressionUUID->"c689413f-029c-48d5-878b-\
04b0bf6a0bba"],

Cell["\<\
El lenguaje Wolfram cuenta con una multitud de operadores de diversos tipos, \
pero se pueden dividir principalmente en tres tipos:\
\>", "Text",
 CellChangeTimes->{{3.716243133583889*^9, 3.716243198176553*^9}, 
   3.7162432903662767`*^9},ExpressionUUID->"d7f36ffa-2db7-450c-a790-\
61cab6084fc5"],

Cell["Operadores Prefix - Son los que preceden a una expresi\[OAcute]n", \
"Text",
 CellChangeTimes->{{3.7162432018804007`*^9, 3.71624322890349*^9}, {
  3.716243308129072*^9, 
  3.7162433175532913`*^9}},ExpressionUUID->"35f73e01-b4b4-47a6-af4a-\
a7db6a80f6cc"],

Cell[BoxData[
 RowBox[{"!", "False"}]], "Input",
 CellChangeTimes->{{3.716243318887766*^9, 
  3.716243319723089*^9}},ExpressionUUID->"849b9372-9fc1-43ee-b1c3-\
e00ccba85cfa"],

Cell[BoxData[
 RowBox[{"f", "@", "x"}]], "Input",
 CellChangeTimes->{{3.716243327390089*^9, 
  3.716243330260491*^9}},ExpressionUUID->"a776691f-02c9-454d-93df-\
8f854e991a3d"],

Cell["Y se representan internamente con", "Text",
 CellChangeTimes->{{3.716243339775926*^9, 
  3.716243348347249*^9}},ExpressionUUID->"2cc63ffb-27a7-41f2-bcaa-\
ccaae4d67f44"],

Cell[BoxData[
 RowBox[{"Prefix", "[", 
  RowBox[{"f", "[", "x", "]"}], "]"}]], "Input",ExpressionUUID->"9a4a70a5-\
f312-4680-92ef-dfc1f3a62ca6"],

Cell["\<\
Operadores Infix - Son los que se encuentran en medio de dos expresiones\
\>", "Text",
 CellChangeTimes->{{3.716243389495981*^9, 
  3.716243403984791*^9}},ExpressionUUID->"9e5bdd53-8844-4a21-9609-\
b00c90956a82"],

Cell[BoxData[
 RowBox[{"4", "+", "5"}]], "Input",
 CellChangeTimes->{{3.716243422431699*^9, 
  3.716243422995212*^9}},ExpressionUUID->"82d3ac3e-c3dd-4406-919c-\
4bef28033131"],

Cell["Se representan internamente con", "Text",
 CellChangeTimes->{{3.71624344120323*^9, 
  3.716243445105788*^9}},ExpressionUUID->"154e6718-c5ed-4a7d-9629-\
1eb50d94af5b"],

Cell[BoxData[
 RowBox[{"Infix", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "\"\<#\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.716243452911603*^9, 
  3.716243455112368*^9}},ExpressionUUID->"48d85f5f-6629-4442-8774-\
c9b757292f8b"],

Cell["Operadores Postfix - Se encuentran despu\[EAcute]s de una expresi\
\[OAcute]n", "Text",
 CellChangeTimes->{{3.716243472851664*^9, 
  3.7162434884745092`*^9}},ExpressionUUID->"d728045b-7d65-42e1-a34e-\
9319933eede6"],

Cell[BoxData[
 RowBox[{"Postfix", "[", 
  RowBox[{"f", "[", "x", "]"}], "]"}]], "Input",ExpressionUUID->"e78acc11-\
4b3b-4496-99d5-47f34b64e3ed"],

Cell["\<\
Cuando el kernel termina de ejecutar las funciones, devuelve los resultados \
en forma Prefix[], Infix[] o Postfix[], y la interfaz de notebook se encarga \
de darles formato.\
\>", "Text",
 CellChangeTimes->{{3.7162432548284817`*^9, 3.716243274146463*^9}, {
  3.716243305025058*^9, 3.7162433056111403`*^9}, {3.716246950880685*^9, 
  3.716246990184119*^9}},ExpressionUUID->"7d3a51a4-50f1-4562-bff9-\
978879d5c2e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Asignaciones", "Subsection",
 CellChangeTimes->{{3.716318378587287*^9, 
  3.716318381019309*^9}},ExpressionUUID->"167cc714-c986-4695-ba38-\
51558cd3134d"],

Cell[TextData[{
 "Existen dos tipos de operadores de asignaci\[OAcute]n. El m\[AAcute]s com\
\[UAcute]n es el operador de asignaci\[OAcute]n instant\[AAcute]nea, ",
 StyleBox["lhs",
  FontSlant->"Italic"],
 " = ",
 StyleBox["rhs",
  FontSlant->"Italic"],
 ", que est\[AAcute] representado por la funci\[OAcute]n Set."
}], "Text",
 CellChangeTimes->{{3.716319196264392*^9, 3.716319225672076*^9}, {
  3.716319474331225*^9, 
  3.716319481331148*^9}},ExpressionUUID->"a01c49bb-a85c-4556-98f4-\
568efe205b45"],

Cell[BoxData[
 RowBox[{"n", " ", "=", " ", "5"}]], "Input",
 CellChangeTimes->{{3.716319226642972*^9, 
  3.7163192597593117`*^9}},ExpressionUUID->"05aecb4d-2e5d-43dc-84b0-\
939bbd0befdd"],

Cell[BoxData["n"], "Input",
 CellChangeTimes->{{3.716319235630954*^9, 
  3.7163192585530987`*^9}},ExpressionUUID->"717f4924-bd60-48c5-bbf8-\
f7f4007dc687"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{"n", "=", "5"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716319238386545*^9, 
  3.716319264480769*^9}},ExpressionUUID->"6fd27062-6415-4ee1-9053-\
b0ca562fb805"],

Cell[TextData[{
 "Se caracteriza porque una vez asignado el valor del s\[IAcute]mbolo, este \
no cambiar\[AAcute] de valor a no ser que se realice otra asignaci\[OAcute]n. \
Esto es an\[AAcute]logo a las asignaciones en otros lenguajes de programaci\
\[OAcute]n.\nEl otro operador es el de asignaci\[OAcute]n retardada, ",
 StyleBox["lhs",
  FontSlant->"Italic"],
 " := ",
 StyleBox["rhs",
  FontSlant->"Italic"],
 ", que se caracteriza por mantener ",
 StyleBox["rhs",
  FontSlant->"Italic"],
 " en forma no evaluada hasta que se requiera evaluar ",
 StyleBox["lhs",
  FontSlant->"Italic"],
 ". Para entender esto veamos el siguiente ejemplo."
}], "Text",
 CellChangeTimes->{{3.716319272454618*^9, 3.716319292022497*^9}, {
  3.716319382852829*^9, 3.7163194486357527`*^9}, {3.716319489570931*^9, 
  3.716319536418705*^9}},ExpressionUUID->"5530db1d-d633-4293-964e-\
ce457c2cf4d9"],

Cell["Al ejecutar el siguiente c\[OAcute]digo,", "Text",
 CellChangeTimes->{{3.7163195527373734`*^9, 
  3.716319563433465*^9}},ExpressionUUID->"8a2a19b8-a77c-4629-996f-\
fca94f960a6c"],

Cell[BoxData[
 RowBox[{"n", " ", "=", " ", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.716319540413542*^9, 
  3.716319546929921*^9}},ExpressionUUID->"42107c30-4e91-45b4-a2b3-\
3484d2f7ace5"],

Cell["n adquiere un valor que permanece fijo.", "Text",
 CellChangeTimes->{{3.716319567680887*^9, 
  3.716319598400391*^9}},ExpressionUUID->"4b9c9f8c-8e75-4e1d-abc5-\
4fba62bc6624"],

Cell[BoxData["n"], "Input",
 CellChangeTimes->{
  3.716319587547082*^9},ExpressionUUID->"54bcdf7a-6066-4fd7-bf03-\
828db480cedf"],

Cell["\<\
Pero con una asignaci\[OAcute]n retardada, n no adquiere ning\[UAcute]n valor \
espec\[IAcute]fico.\
\>", "Text",
 CellChangeTimes->{{3.716319607488366*^9, 
  3.716319622072317*^9}},ExpressionUUID->"6a358fa8-df5d-4e5b-90e2-\
990e0006c815"],

Cell[BoxData[
 RowBox[{"n", " ", ":=", " ", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7163196236435013`*^9, 
  3.716319628071701*^9}},ExpressionUUID->"4da0448c-0936-4d0f-add6-\
dfcf8e48732e"],

Cell["\<\
Entonces cada vez que queramos ver el valor de n, se llamar\[AAcute] a la \
funci\[OAcute]n RandomReal.\
\>", "Text",
 CellChangeTimes->{{3.716319634815569*^9, 
  3.716319651527944*^9}},ExpressionUUID->"94b3e78e-e7dd-4315-a446-\
18191a0f9aa8"],

Cell[BoxData["n"], "Input",
 CellChangeTimes->{
  3.716319652419424*^9},ExpressionUUID->"88dc8c80-a0db-49b5-be36-\
4f473e02e225"],

Cell[BoxData["n"], "Input",
 CellChangeTimes->{
  3.716319653851226*^9},ExpressionUUID->"c28149d7-0f1c-44d3-a84f-\
b743bb829fb1"],

Cell[TextData[{
 "La convenci\[OAcute]n para nombrar s\[IAcute]mbolos es usar ",
 StyleBox["lowerCamelCase",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.716320090066039*^9, 
  3.71632011270455*^9}},ExpressionUUID->"c7f361e7-4970-447d-8b08-\
9e5d79525969"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iteradores", "Subsection",
 CellChangeTimes->{{3.7163168839521103`*^9, 
  3.716316886023961*^9}},ExpressionUUID->"c85b3e09-500a-4de0-afc1-\
b51de8965cbf"],

Cell["\<\
El lenguaje Wolfram posee funciones para iterar sobre elementos o un rango \
num\[EAcute]rico. La regla general es que si uno utiliza una estructura de \
control tipo For, While o Do, hay un error en el dise\[NTilde]o del \
c\[OAcute]digo. El iterador m\[AAcute]s general es Table, que nos permite \
crear listas.\
\>", "Text",
 CellChangeTimes->{{3.716316893263592*^9, 3.716316961423064*^9}, {
   3.716317011943817*^9, 3.716317036919627*^9}, 
   3.716317108768903*^9},ExpressionUUID->"0a29a853-d4ff-4cf1-a0d0-\
11f8a84b88fd"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7163170380662737`*^9, 
  3.716317046264782*^9}},ExpressionUUID->"04f957b6-eabf-4ffe-82f4-\
2f697f3d835d"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716317049594529*^9, 
  3.716317057200129*^9}},ExpressionUUID->"7a387991-46d0-4f1f-af34-\
29ef6aa3c2ea"],

Cell["Table tambi\[EAcute]n nos permite iterar sobre listas", "Text",
 CellChangeTimes->{{3.71631711319191*^9, 
  3.716317124680427*^9}},ExpressionUUID->"6a187ef7-7e5d-4bb6-bc4f-\
07bd7f5a0a24"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"2", "*", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.716317126555489*^9, 
  3.716317147408846*^9}},ExpressionUUID->"76116e84-4871-4eb4-ae5b-\
7dfdf8e7ebc9"],

Cell[CellGroupData[{

Cell["Ejercicio 1", "Subsubsection",
 CellChangeTimes->{{3.71631718089649*^9, 3.716317181912855*^9}, {
  3.71631725616094*^9, 
  3.716317256321233*^9}},ExpressionUUID->"92c069dd-6f16-4091-a713-\
27ab870140c2"],

Cell["A partir de la lista", "Text",
 CellChangeTimes->{{3.7163171839446707`*^9, 
  3.71631720724889*^9}},ExpressionUUID->"aa806fa5-02b1-493f-9fa2-\
fa74ee811957"],

Cell[BoxData[
 RowBox[{"l", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"1", ",", "\"\<hola\>\"", ",", 
    RowBox[{"9", "/", "8"}], ",", "2.3"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.716317209716085*^9, 
  3.7163172254256*^9}},ExpressionUUID->"fbd29d12-720b-43c3-86af-a7572cab107b"],

Cell["\<\
crear un snippet que obtenga el encabezado (Head) de cada elemento.\
\>", "Text",
 CellChangeTimes->{{3.716317229408293*^9, 
  3.716317253793256*^9}},ExpressionUUID->"582e3ce0-2960-4daf-a143-\
2e013fe494f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ejercicio 2", "Subsubsection",
 CellChangeTimes->{{3.716317258904686*^9, 
  3.7163172601452913`*^9}},ExpressionUUID->"0f0cad0a-2549-47aa-a53a-\
9d1e08321e9d"],

Cell["Crear un snippet que genera la siguiente lista", "Text",
 CellChangeTimes->{{3.716317263657034*^9, 
  3.716317271665217*^9}},ExpressionUUID->"10b12d32-8dd5-478a-98c6-\
7130c770eb79"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "36"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "49"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "64"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "81"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "100"}], "}"}]}], "}"}]], "Input",ExpressionUUID->\
"882e01ab-dd04-4d3f-ae5b-2f4942587b8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ejercicio 3", "Subsubsection",
 CellChangeTimes->{{3.716318081053721*^9, 3.7163180849337597`*^9}, {
  3.716318140229343*^9, 
  3.716318140357622*^9}},ExpressionUUID->"5a3324c2-51f4-4103-a3d0-\
942526be589b"],

Cell["Dadas dos listas", "Text",
 CellChangeTimes->{{3.716318086293621*^9, 
  3.7163180896059933`*^9}},ExpressionUUID->"11569a30-6c1b-4aab-b02a-\
cd28270f0fef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f3f4e4e5-36dd-466e-88ec-4ad6800de539"],

Cell["Escriba el c\[OAcute]digo que devuelva", "Text",
 CellChangeTimes->{{3.716318097957697*^9, 
  3.716318104629842*^9}},ExpressionUUID->"4ad8d306-ec71-4ed8-9604-\
70a000746897"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9"}], "}"}]}], "}"}]], "Input",ExpressionUUID->\
"ccdc2911-6bb6-4076-9835-33bc55238ad0"],

Cell["\<\
Nota: Puede ser \[UAcute]til buscar en la documentaci\[OAcute]n, pero no es \
necesario.\
\>", "Text",
 CellChangeTimes->{{3.716318110333804*^9, 3.716318117781692*^9}, {
  3.716318148485471*^9, 
  3.716318156981455*^9}},ExpressionUUID->"af91ac51-0a38-44c1-b852-\
c2b395ded0d0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reglas de sustituci\[OAcute]n y patrones", "Subsection",
 CellChangeTimes->{{3.716247185888242*^9, 3.7162471901822233`*^9}, 
   3.716247325971777*^9, {3.716247364162117*^9, 
   3.7162473673929377`*^9}},ExpressionUUID->"1e540197-0273-4e1f-85b3-\
3a3f18d2e078"],

Cell["\<\
Las reglas de sustituci\[OAcute]n son un aspecto central en el dise\[NTilde]o \
del lenguaje Wolfram, de hecho, como se ver\[AAcute] posteriormente, las \
funciones son un caso especial de una regla de sustituci\[OAcute]n con \
patrones. Para usar esta funcionalidad es necesario establecer una regla de \
sustituci\[OAcute]n que buscar\[AAcute] un patr\[OAcute]n. Un ejemplo de una \
regla de sustituci\[OAcute]n simple puede ser reemplazar todas las \
ocurrencias del n\[UAcute]mero 1 por el n\[UAcute]mero 2.\
\>", "Text",
 CellChangeTimes->{{3.716247215367662*^9, 3.716247235860568*^9}, 
   3.7162473236343603`*^9, {3.716315226616818*^9, 3.716315247487686*^9}, {
   3.7163152845427227`*^9, 
   3.71631535248564*^9}},ExpressionUUID->"4dc29d32-95a4-4d3e-9c39-\
c427f415e279"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "9", ",", "8"}], 
   "}"}], " ", "/.", " ", 
  RowBox[{"1", "\[Rule]", "2"}]}]], "Input",
 CellChangeTimes->{{3.716315353862406*^9, 
  3.7163153678205347`*^9}},ExpressionUUID->"fa1916c4-21fc-4f2c-83c5-\
801680935d11"],

Cell["\<\
Hay 3 operadores b\[AAcute]sicos.     /. es el operador que representa a la \
funci\[OAcute]n ReplaceAll, -> Representa la funci\[OAcute]n Rule, y :> \
representa RuleDelayed. RuleDelayed es a Rule lo que SetDelayed (:=) es a Set \
(=).\
\>", "Text",
 CellChangeTimes->{{3.716315866573832*^9, 3.716315882070261*^9}, {
  3.716319855876021*^9, 
  3.7163199431313*^9}},ExpressionUUID->"ceb2d46e-2fc5-46a3-a056-ead45735db1a"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "9", ",", "8"}], "}"}],
     " ", "/.", " ", 
    RowBox[{"1", "\[Rule]", "2"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716315894511816*^9, 
  3.7163159024538727`*^9}},ExpressionUUID->"dee6314a-a78f-4f92-8d82-\
afa57da7a96a"],

Cell["\<\
Reemplazar una expresi\[OAcute]n por otra no es muy flexible, para eso \
Wolfram nos provee de una s\[IAcute]ntaxis m\[AAcute]s general.\
\>", "Text",
 CellChangeTimes->{{3.716315779918956*^9, 3.716315838782373*^9}, 
   3.7163159103898687`*^9, {3.71631596931633*^9, 
   3.716315976180689*^9}},ExpressionUUID->"13b24647-d5b3-4249-9a3e-\
ec35d0e1218e"],

Cell["\<\
El patr\[OAcute]n underscore _ hace un match de cualquier tipo de expresi\
\[OAcute]n.\
\>", "Text",
 CellChangeTimes->{{3.716315993596237*^9, 
  3.716316023372065*^9}},ExpressionUUID->"4ae8e4d4-ca1e-4031-8793-\
35bfbfff64bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "9", ",", "8"}], 
   "}"}], " ", "/.", " ", 
  RowBox[{"_", "\[Rule]", "3"}]}]], "Input",
 CellChangeTimes->{
  3.7163160503431*^9},ExpressionUUID->"1983b39c-6700-42a2-b13a-692989c41c12"],

Cell[BoxData[
 RowBox[{"x", " ", "/.", " ", 
  RowBox[{"_", "\[Rule]", "3"}]}]], "Input",
 CellChangeTimes->{{3.7163152624806967`*^9, 3.716315271798308*^9}, 
   3.7163160315544577`*^9},ExpressionUUID->"1f969b35-53b4-4640-a033-\
19472a3b8c36"],

Cell["\<\
\[DownQuestion]Para qu\[EAcute] nos sirve este tipo de patr\[OAcute]n? \
Resulta extremadamente \[UAcute]til cuando se requiere ignorar un elemento de \
una expresi\[OAcute]n. Por ejemplo\
\>", "Text",
 CellChangeTimes->{{3.716316057427321*^9, 
  3.716316119179093*^9}},ExpressionUUID->"afd5f6be-bab9-480a-a33a-\
2242c3adc96c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "0"}], "}"}]}], "}"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"_", ",", "2"}], "}"}], "\[Rule]", 
   "\"\<reemplazado\>\""}]}]], "Input",
 CellChangeTimes->{{3.7163161206998243`*^9, 
  3.716316163306355*^9}},ExpressionUUID->"8ad6fc64-6ac9-47b5-aac6-\
7d1a7d9d2e86"],

Cell["\<\
El patr\[OAcute]n x_ es similar a _ con la diferencia de que guarda \
temporalmente el s\[IAcute]mbolo correspondiente en x. Al reemplazar con s\
\[IAcute]mbolos es m\[AAcute]s recomendable usar RuleDelayed. Por ejemplo\
\>", "Text",
 CellChangeTimes->{{3.716317518616909*^9, 3.7163175729775047`*^9}, {
  3.716319971370633*^9, 
  3.7163199924985437`*^9}},ExpressionUUID->"fdbcb5fd-223f-4947-a496-\
eb9c21244f63"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "0"}], "}"}]}], "}"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x_", ",", "2"}], "}"}], "\[RuleDelayed]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", "2"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.716317579329607*^9, 
  3.716317599529519*^9}},ExpressionUUID->"b05bb03f-0c42-4bed-81ea-\
43f566b143e7"],

Cell[TextData[{
 "Los patrones sirven como una alternativa a ",
 StyleBox["regex",
  FontSlant->"Italic"],
 " para hacer b\[UAcute]squedas dentro de listas."
}], "Text",
 CellChangeTimes->{{3.716320223286841*^9, 
  3.716320248694655*^9}},ExpressionUUID->"dab5bc8d-c0d8-4177-91f9-\
c70741fa747d"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "1", "]"}], ",", 
     RowBox[{"g", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", "5", "]"}], ",", 
     RowBox[{"g", "[", "3", "]"}]}], "}"}], ",", 
   RowBox[{"f", "[", "_", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716320212382485*^9, 
  3.716320213798921*^9}},ExpressionUUID->"3430ecb2-da0b-4c94-9043-\
95588f0dbfac"],

Cell[CellGroupData[{

Cell["Ejercicio 1:", "Subsubsection",
 CellChangeTimes->{{3.716320315557308*^9, 3.7163203186053143`*^9}, {
  3.716320434339951*^9, 3.716320434539893*^9}, {3.716320471603355*^9, 
  3.716320471819337*^9}},ExpressionUUID->"1fe0f3b6-76d8-4059-b5ca-\
7287aac1cf7f"],

Cell["\<\
Para buscar patrones a trav\[EAcute]s del encabezado se puede usar el patr\
\[OAcute]n _h, que por ejemplo, encuentra todas las expresiones con \
encabezado h. Escriba un c\[OAcute]digo que a partir de la lista\
\>", "Text",
 CellChangeTimes->{{3.716320320789154*^9, 
  3.716320371485094*^9}},ExpressionUUID->"5e4bdbf0-94a6-4f9b-a21b-\
74c2b1ee43e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", " ", "1", ",", " ", 
   RowBox[{"f", "[", "a", "]"}], ",", " ", "2", ",", " ", "3", ",", " ", "y", 
   ",", " ", 
   RowBox[{"f", "[", "8", "]"}], ",", " ", "9", ",", " ", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Input",ExpressionUUID->"e4c690a1-\
1637-4807-bdfd-bc5443694449"],

Cell["devuelva", "Text",
 CellChangeTimes->{{3.716320379228509*^9, 
  3.716320382292697*^9}},ExpressionUUID->"177bc5bc-894c-4f77-9b9c-\
bc3dad9f9df8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "a", "]"}], ",", " ", 
   RowBox[{"f", "[", "8", "]"}], ",", " ", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Input",ExpressionUUID->"3ca43335-\
611e-4b5e-9787-00801f3e4bec"],

Cell["usando patrones.", "Text",
 CellChangeTimes->{{3.7163203945962257`*^9, 
  3.716320396532238*^9}},ExpressionUUID->"e3a2b013-f54b-4450-905a-\
cb16545f362f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ejercicio 2:", "Subsubsection",
 CellChangeTimes->{{3.716320475995262*^9, 
  3.7163204780110693`*^9}},ExpressionUUID->"3665ead2-bf93-49d0-98b3-\
bd84b8765ac7"],

Cell["Escriba un c\[OAcute]digo que a partir de la misma lista", "Text",
 CellChangeTimes->{{3.71632047961073*^9, 
  3.716320486187224*^9}},ExpressionUUID->"1ed16df6-2e26-49e6-bec6-\
161d028a4943"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", " ", "1", ",", " ", 
   RowBox[{"f", "[", "a", "]"}], ",", " ", "2", ",", " ", "3", ",", " ", "y", 
   ",", " ", 
   RowBox[{"f", "[", "8", "]"}], ",", " ", "9", ",", " ", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Input",ExpressionUUID->"03be73b7-\
b7a5-478f-a6b8-3cbab2924278"],

Cell["extraiga los argumentos de la funci\[OAcute]n f.", "Text",
 CellChangeTimes->{{3.716320492970811*^9, 
  3.716320504066991*^9}},ExpressionUUID->"7c802521-c2aa-423c-9a86-\
2f16d04ae3e5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Funciones", "Subsection",
 CellChangeTimes->{{3.716320585697744*^9, 
  3.716320587569751*^9}},ExpressionUUID->"dc0b2ae0-9d13-4956-8635-\
599efa58c3be"],

Cell["\<\
En el lenguaje Wolfram las funciones no son m\[AAcute]s que una regla de \
sustituci\[OAcute]n. Por ejemplo, vamos a definir una funci\[OAcute]n f que \
acepte un argumento x y devuelva x^2. Se define la funci\[OAcute]n,\
\>", "Text",
 CellChangeTimes->{{3.716320670472479*^9, 3.716320723208205*^9}, {
  3.7163247922869663`*^9, 
  3.716324795798799*^9}},ExpressionUUID->"566aed7a-b1fe-42db-b48e-\
580b5cc2b93e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.716320725058154*^9, 
  3.716320731879974*^9}},ExpressionUUID->"fac2fbd7-133f-46e8-b090-\
a86f41e6f8d0"],

Cell["y se puede evaluar con la notaci\[OAcute]n []  ,", "Text",
 CellChangeTimes->{{3.7163247997579412`*^9, 3.716324804334599*^9}, {
  3.7163248664778433`*^9, 3.7163248693734426`*^9}, {3.716325157171789*^9, 
  3.716325157459853*^9}},ExpressionUUID->"e0486eff-9989-481a-a2c4-\
33e851c08532"],

Cell[BoxData[
 RowBox[{"f", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.716320734873345*^9, 
  3.716320737591874*^9}},ExpressionUUID->"aaa8d707-bb0c-4068-bce0-\
700e6b1291a4"],

Cell["utilizando el operador prefix,", "Text",
 CellChangeTimes->{{3.716324874533815*^9, 3.716324878317832*^9}, 
   3.716324915845715*^9, {3.716325159947578*^9, 
   3.7163251640514402`*^9}},ExpressionUUID->"d2f0c722-ff77-4c44-858b-\
a0d5b682ca43"],

Cell[BoxData[
 RowBox[{"f", "@", "4"}]], "Input",
 CellChangeTimes->{{3.716324879512124*^9, 
  3.7163248899179792`*^9}},ExpressionUUID->"f3addb50-0518-4827-b83f-\
6a468ab53471"],

Cell["o utilizando el operador postfix.", "Text",
 CellChangeTimes->{{3.716325167883409*^9, 
  3.716325196314657*^9}},ExpressionUUID->"67cfe036-828a-4b92-b691-\
23dc46f4d03a"],

Cell[BoxData[
 RowBox[{"4", " ", "//", " ", "f"}]], "Input",
 CellChangeTimes->{{3.716325178245336*^9, 
  3.716325181675445*^9}},ExpressionUUID->"487f84e7-d292-40ab-a4da-\
354194c0994a"],

Cell["Por legilibilidad es preferible utilizar la notaci\[OAcute]n [].", \
"Text",
 CellChangeTimes->{{3.716324905709549*^9, 
  3.7163249240130177`*^9}},ExpressionUUID->"1387e4aa-4409-4e9b-844c-\
9f3762215ade"],

Cell[BoxData[
 RowBox[{"f", "[", "9", "]"}]], "Input",
 CellChangeTimes->{{3.7163207386416693`*^9, 
  3.71632073974393*^9}},ExpressionUUID->"d9368c95-d3c5-4d53-9e1d-\
429841d8f844"],

Cell["\<\
Al definir esta funci\[OAcute]n lo que se est\[AAcute] haciendo en realidad \
es crear una regla que especifica que cada vez que se encuentre la expresi\
\[OAcute]n f[ ] se extraer\[AAcute] el s\[IAcute]mbolo x y se sustituir\
\[AAcute] por x^2, y por \[UAcute]ltimo se procede a evaluar el resultado. De \
esta forma la definici\[OAcute]n de una funci\[OAcute]n es tan flexible como \
los patrones.
Se puede definir una funci\[OAcute]n con un n\[UAcute]mero finito de \
argumentos,\
\>", "Text",
 CellChangeTimes->{{3.716320749607255*^9, 3.716320902750155*^9}, {
  3.716320975277062*^9, 
  3.71632100685271*^9}},ExpressionUUID->"10b498f1-bc76-423d-a75a-\
0c628b8122b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], ":=", 
   RowBox[{"x", "+", "y", "+", "z"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"3", ",", "4", ",", "1"}], "]"}]}], "Input",
 CellChangeTimes->{{3.716321007717757*^9, 
  3.716321020988076*^9}},ExpressionUUID->"b3ae050d-6c1d-471e-a74f-\
7a03b1d52cf7"],

Cell["una funci\[OAcute]n con un n\[UAcute]mero arbitrario de argumentos,", \
"Text",
 CellChangeTimes->{{3.716321028147469*^9, 3.716321039835559*^9}, 
   3.7163211099147577`*^9},ExpressionUUID->"5a57f6b6-a985-4cee-9f63-\
a5578335c492"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "n__", "]"}], ":=", 
   RowBox[{"Total", "[", 
    RowBox[{"List", "[", "n", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7163210418850193`*^9, 
  3.716321155474691*^9}},ExpressionUUID->"5e48dd5a-e3dd-48ce-ab16-\
860f0512b0d3"],

Cell["\<\
e incluso se pueden definir las funciones de forma ascendente (la notaci\
\[OAcute]n para esto es ^:= ).\
\>", "Text",
 CellChangeTimes->{{3.716321166201915*^9, 3.7163211761859007`*^9}, {
  3.716321323048045*^9, 
  3.716321353471356*^9}},ExpressionUUID->"f5d64d35-2e38-4803-81d2-\
b6b620826d2a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"g", "[", "x_", "]"}], "]"}], "^:=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"\"\<El s\[IAcute]mbolo x vale: \>\"", ",", 
     RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7163211786265*^9, 
  3.716321307792923*^9}},ExpressionUUID->"609a395d-2799-4ed2-9b43-\
9d6284c81d63"],

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"g", "[", "9", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.716321288290081*^9, 
  3.716321292296645*^9}},ExpressionUUID->"5dd65638-1b50-4fe1-9525-\
de74f6bea79a"],

Cell["\<\
En algunos casos es necesario aplicar cada elemento de una lista como \
argumento de una funci\[OAcute]n.  Regresemos al ejemplo donde\
\>", "Text",
 CellChangeTimes->{{3.7163245806559362`*^9, 
  3.716324643831653*^9}},ExpressionUUID->"7ee1d19c-9276-4e77-ab3a-\
ee5234374e64"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], ":=", 
   RowBox[{"x", "+", "y", "+", "z"}]}], ";"}]], "Input",ExpressionUUID->\
"bd3a8605-bc30-41b4-b720-9c339a44b567"],

Cell["Si se desea que el argumento sea cada elemento de la lista", "Text",
 CellChangeTimes->{{3.71632464765539*^9, 
  3.71632467829488*^9}},ExpressionUUID->"1180e654-4498-400e-9c88-\
234c7a7138bd"],

Cell[BoxData[
 RowBox[{"l", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "9"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.716324679465335*^9, 
  3.7163246840156937`*^9}},ExpressionUUID->"3b1573e3-5792-44e9-8f08-\
0d2876aa6afa"],

Cell["\<\
una manera poco elegante de hacer esto es pasando manualmente cada argumento.\
\
\>", "Text",
 CellChangeTimes->{{3.7163246902952757`*^9, 
  3.716324707646822*^9}},ExpressionUUID->"24b6824a-c3fa-4f8b-a8fb-\
415b60f97d22"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"l", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"l", "[", 
    RowBox[{"[", "2", "]"}], "]"}], ",", 
   RowBox[{"l", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716324708513247*^9, 
  3.716324715943837*^9}},ExpressionUUID->"c287a1f7-0b39-4c5d-9461-\
7cd56941ec1f"],

Cell["\<\
pero existe una manera m\[AAcute]s eficiente utilizando la funci\[OAcute]n \
Apply,\
\>", "Text",
 CellChangeTimes->{{3.716324719646847*^9, 
  3.716324746494733*^9}},ExpressionUUID->"6480165a-730a-4092-960d-\
77d1dc7594f2"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"f", ",", "l"}], "]"}]], "Input",
 CellChangeTimes->{{3.71632473400084*^9, 
  3.716324737239327*^9}},ExpressionUUID->"fcbc5ee8-21f8-42b4-9a47-\
92b1e39fa449"],

Cell["que adem\[AAcute]s cuenta con una notaci\[OAcute]n de operador prefix", \
"Text",
 CellChangeTimes->{{3.716324741366034*^9, 3.7163247577750177`*^9}, {
  3.716324840357848*^9, 
  3.716324841270219*^9}},ExpressionUUID->"b89dc471-d0ef-4980-b5f7-\
042d71c23da4"],

Cell[BoxData[
 RowBox[{"f", " ", "@@", " ", "l"}]], "Input",
 CellChangeTimes->{{3.716324758640637*^9, 
  3.716324767432708*^9}},ExpressionUUID->"29f0e6c6-5d7d-4c43-9ca5-\
75dcf0e208b9"],

Cell[TextData[{
 "Por defecto, en el lenguaje Wolfram todo pertenece al espacio global, esto \
significa que es posible declarar ",
 StyleBox["funciones impuras",
  FontSlant->"Italic"],
 ", esto es, funciones que causan efectos secundarios como por ejemplo"
}], "Text",
 CellChangeTimes->{{3.71632155250071*^9, 3.7163215719407578`*^9}, {
  3.7163216649395857`*^9, 
  3.716321719827186*^9}},ExpressionUUID->"135a897f-adad-4cc5-87a6-\
439e64bdb6e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", " ", "=", " ", "1"}], ";"}]], "Input",
 CellChangeTimes->{{3.7163217384685087`*^9, 
  3.716321739602646*^9}},ExpressionUUID->"0007e34d-e2d9-40a7-bccf-\
8636818a668d"],

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.716321743660239*^9},ExpressionUUID->"a8cffa43-d420-4ea9-b639-\
36b9cf992ff3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"a", " ", "=", " ", "x"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.716321720644651*^9, 
  3.716321743202896*^9}},ExpressionUUID->"2a3bdf3b-d157-4295-85f8-\
a0801dc9b5c7"],

Cell[BoxData[
 RowBox[{"f", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.716321746363179*^9, 
  3.716321747634612*^9}},ExpressionUUID->"c04bc6d5-c9ed-44cb-9139-\
274527c9b440"],

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.71632174837265*^9},ExpressionUUID->"578b4f21-57dc-4f84-91b3-c3ce6d84bb33"],

Cell["\<\
En este lenguaje esto es considerado una mala pr\[AAcute]ctica y por lo \
general debe ser evitado. Una manera de localizar los s\[IAcute]mbolos es \
utilizar la funci\[OAcute]n Module.\
\>", "Text",
 CellChangeTimes->{{3.716321782961314*^9, 3.7163218035058527`*^9}, {
  3.7163222324603863`*^9, 
  3.716322250140156*^9}},ExpressionUUID->"e8060d6f-885b-4a8b-9f6b-\
900e0125d520"],

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.716322318188986*^9},ExpressionUUID->"5445f389-ab85-4dd4-94ea-\
e27561133219"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"a", " ", "=", " ", "x"}], ";", "\[IndentingNewLine]", 
      RowBox[{"a", " ", "+=", " ", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "a", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.716322258381465*^9, 
  3.7163222932839108`*^9}},ExpressionUUID->"fd58e43c-4051-437c-8d3a-\
6cfe71a2628c"],

Cell[BoxData[
 RowBox[{"f", "[", "7", "]"}]], "Input",
 CellChangeTimes->{{3.716322298060791*^9, 
  3.7163223096270723`*^9}},ExpressionUUID->"6faddc39-0bc5-415a-8c80-\
0cb80cb42a93"],

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.7163223049333773`*^9},ExpressionUUID->"471cebc2-8f56-4073-94c0-\
98cb4b34b272"],

Cell["\<\
Una de las filosof\[IAcute]as del lenguaje Wolfram es que es un lenguaje \
funcional. Esto significa que est\[AAcute] dise\[NTilde]ado para que se \
programe usando funciones generales que se aplican sobre listas, matrices, \
tensores, etc. La funci\[OAcute]n m\[AAcute]s elemental de este tipo de \
lenguajes es el mapeo, que aqu\[IAcute] est\[AAcute] representado por la \
funci\[OAcute]n Map.\
\>", "Text",
 CellChangeTimes->{{3.716322543391679*^9, 
  3.716322678910605*^9}},ExpressionUUID->"f5f99285-a80c-40a8-b56d-\
ac346e7be35f"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"a", ",", "f"}], "]"}]], "Input",
 CellChangeTimes->{{3.716322708407729*^9, 
  3.716322714445908*^9}},ExpressionUUID->"85d857c0-018f-4fab-afd2-\
2d88dc10d4fa"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.716322694150754*^9, 
  3.716322700998646*^9}},ExpressionUUID->"ee5f9cef-408a-4644-8a3b-\
297a2220fff9"],

Cell["\<\
El mapeo tambi\[EAcute]n se puede representar con la notaci\[OAcute]n de \
operador infix,\
\>", "Text",
 CellChangeTimes->{{3.7163227251009693`*^9, 3.716322734925222*^9}, {
  3.716322831795871*^9, 
  3.716322844219767*^9}},ExpressionUUID->"8111d641-67f3-4882-96a6-\
c62b6c43b75d"],

Cell[BoxData[
 RowBox[{"f", "/@", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}]], "Input",Ex\
pressionUUID->"e39b33ef-7791-4686-9cb5-8f71ea934571"],

Cell["\<\
aunque no es recomendable para c\[OAcute]digo de producci\[OAcute]n, pero s\
\[IAcute] es \[UAcute]til para prototipos. La ventaja de Map es que se puede \
aplicar a un nivel arbitrario. Por ejemplo, en la lista {{a,b},{c,d,e}} \
podemos aplicar Map en el nivel superior\
\>", "Text",
 CellChangeTimes->{{3.7163228235960913`*^9, 3.716322827956026*^9}, {
  3.716322860667614*^9, 3.71632287705075*^9}, {3.7163229095309896`*^9, 
  3.716322909899261*^9}, {3.7163230644563437`*^9, 
  3.716323097672987*^9}},ExpressionUUID->"da1e3b29-bb4d-4d7e-9d7d-\
92df2370dcca"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d", ",", "e"}], "}"}]}], "}"}]}], "]"}]], "Input",Exp\
ressionUUID->"3ebcc4a5-b86f-4057-aa21-95359101c632"],

Cell["Al nivel 2", "Text",
 CellChangeTimes->{{3.716323106728047*^9, 
  3.716323110040391*^9}},ExpressionUUID->"69f97d77-fee9-4d6c-88a5-\
a2e7f5857fab"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d", ",", "e"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",ExpressionUUID->"b586a84f-e725-\
4450-927e-a359c29e67e5"],

Cell["e incluso en los niveles 1 y 2 simult\[AAcute]neamente.", "Text",
 CellChangeTimes->{{3.716323123775516*^9, 
  3.716323134720524*^9}},ExpressionUUID->"9ca75960-fb53-4179-a0ee-\
086861c0d4c7"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d", ",", "e"}], "}"}]}], "}"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"01a11cd5-44c8-4dba-b188-d5d0948a76c9"],

Cell[TextData[{
 "La verdadera ventaja de los mapeos es la capacidad del lenguaje de definir ",
 StyleBox["funciones puras",
  FontSlant->"Italic"],
 " y poder aplicarlas a una lista. Las funciones puras se definen a trav\
\[EAcute]s del operador postfix Function (  &  ) y el operador Slot (  #  )."
}], "Text",
 CellChangeTimes->{{3.716324242234065*^9, 3.716324272298506*^9}, {
  3.716324400713805*^9, 3.7163244285776043`*^9}, {3.716325114316564*^9, 
  3.7163251188521843`*^9}},ExpressionUUID->"f3bf5293-1cb4-4ac7-b702-\
b53da4b33669"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{
   RowBox[{"#", "^", "2"}], " ", "&"}], "]"}]], "Input",
 CellChangeTimes->{{3.716324340875722*^9, 
  3.716324349905995*^9}},ExpressionUUID->"91b89ad7-7417-4858-886b-\
2e7bd2201e04"],

Cell["\<\
Por ejemplo, una funci\[OAcute]n pura que eleva el argumento al cuadrado \
puede ser\
\>", "Text",
 CellChangeTimes->{{3.716325019348658*^9, 
  3.716325032356803*^9}},ExpressionUUID->"3b8f3f7a-b65d-4ee9-9dca-\
938a7812f5b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"#", "^", "2"}], ")"}], "&"}], "[", "5", "]"}]], "Input",
 CellChangeTimes->{{3.7163250357103024`*^9, 
  3.716325041612804*^9}},ExpressionUUID->"e9601ad5-0fdb-42da-ac8b-\
4d3260931a36"],

Cell["\<\
El slot act\[UAcute]a como el lugar donde se sustituir\[AAcute] el argumento, \
y el operador Function act\[UAcute]a convirtiendo todo lo que le precede en \
una funci\[OAcute]n. Es posible tambi\[EAcute]n utilizar varios argumentos \
numerando los slots.\
\>", "Text",
 CellChangeTimes->{{3.716325071940028*^9, 3.716325090724107*^9}, {
  3.716325135908119*^9, 3.716325144772215*^9}, {3.7163252659447536`*^9, 
  3.716325277288361*^9}},ExpressionUUID->"2ecc8ba3-9991-4366-90ac-\
a8dbe70d041c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"#1", "^", "2"}], " ", "+", " ", 
     RowBox[{"#2", "^", "3"}]}], ")"}], "&"}], "[", 
  RowBox[{"5", ",", "9"}], "]"}]], "Input",
 CellChangeTimes->{{3.716325283343788*^9, 
  3.71632529035968*^9}},ExpressionUUID->"dbdc0ca5-920a-4023-b31f-\
59224023b892"],

Cell["\<\
La utilidad principal de las funciones puras es que nos proveen de una manera \
r\[AAcute]pida de aplicar transformaciones sobre listas de una forma m\
\[AAcute]s flexible que Table.\
\>", "Text",
 CellChangeTimes->{{3.716325493881929*^9, 
  3.716325525041789*^9}},ExpressionUUID->"de1031d7-8ab1-4713-886c-\
411c8ef384e7"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7163255351878023`*^9, 
  3.7163255449784107`*^9}},ExpressionUUID->"70fe66c4-830a-4074-a5bd-\
be981c6a5d3c"],

Cell[BoxData[
 RowBox[{"l", " ", "=", " ", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.716325584203479*^9, 
  3.7163255851967297`*^9}},ExpressionUUID->"d1753f84-77b6-4b7e-8938-\
fdf5cc0ed868"],

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", "l", ",", 
   RowBox[{"{", 
    RowBox[{"All", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716325556451764*^9, 
  3.716325588490471*^9}},ExpressionUUID->"f6a79b45-9ebc-43fd-bc8a-\
e3558af067cf"],

Cell[CellGroupData[{

Cell["Ejercicio 1:", "Subsubsection",
 CellChangeTimes->{{3.71632538354074*^9, 
  3.7163253854051123`*^9}},ExpressionUUID->"65f46e4e-f4ae-464c-8428-\
eb56cf6d98b6"],

Cell["\<\
Utilizando funciones puras y la funci\[OAcute]n Select encuentre los \
elementos de la lista del tipo f[_] para la lista\
\>", "Text",
 CellChangeTimes->{{3.716325387012607*^9, 
  3.71632543893176*^9}},ExpressionUUID->"2401be26-284b-46b6-9a52-\
a1f2ea2886b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", " ", "1", ",", " ", 
   RowBox[{"f", "[", "a", "]"}], ",", " ", "2", ",", " ", "3", ",", " ", "y", 
   ",", " ", 
   RowBox[{"f", "[", "8", "]"}], ",", " ", "9", ",", " ", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Input",ExpressionUUID->"4c6ff125-\
4715-4517-b475-87a142b4f071"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comentarios finales", "Subsection",
 CellChangeTimes->{{3.716325649142664*^9, 
  3.7163256518227377`*^9}},ExpressionUUID->"5f6e016f-cf44-424e-9696-\
f61d6b49bf80"],

Cell["\<\
La s\[IAcute]ntaxis del lenguaje Wolfram es compleja, y las reglas que \
utiliza no son triviales. Como sugerencia se recomienda no abusar de los \
operadores, utilizar lo m\[AAcute]s que se pueda las estructuras iterativas \
como Table y Map en vez de iteradores tradicionales como For, While y Do, y \
por \[UAcute]ltimo recordar que muchos de los algoritmos com\[UAcute]nmente \
usados ya han sido implementados, y nunca est\[AAcute] de m\[AAcute]s buscar \
y rebuscar entre la documentaci\[OAcute]n.

En caso de duda acerca del funcionamiento interno del lenguaje se puede \
consultar el enlace

http://reference.wolfram.com/language/tutorial/\
SomeNotesOnInternalImplementation.html

donde se discute m\[AAcute]s a fondo algunos detalles de la implementaci\
\[OAcute]n. En caso de que esto no sea suficiente tambi\[EAcute]n se puede \
consultar la documentaci\[OAcute]n y el c\[OAcute]digo de Mathics, que es una \
implementaci\[OAcute]n de c\[OAcute]digo abierto del lenguaje Wolfram. 

https://mathics.github.io/

Si bien por ahora carece de muchas funciones es extremadamente \[UAcute]til \
para investigar funcionamientos no documentados.
El diagrama de clases de Mathics es especialmente \[UAcute]til para entender \
la jerarqu\[IAcute]a interna del programa.\
\>", "Text",
 CellChangeTimes->{{3.7163256532944*^9, 3.7163260251710567`*^9}, {
  3.716326392373764*^9, 
  3.7163264117272882`*^9}},ExpressionUUID->"22c466a8-9fd1-4ad8-9662-\
56da8af118f7"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QXc3FTe9vFtKe4OxbVYkYVCoUCRYsV28cUWl7K4FC8OS3dxXWxxl+JQ
3IsUd4cixdnitOR9rvCe8J9zJzPJ3Jk7M5nf9/OcZ+mdTCYzEztXzjmZa7s9
N9ip+5/+9Kd9J/q//7fBtoNX3mefbQ/acKr/+8fGe+y768577LjDWnvst+PO
O+7Td7vx/u+PX/7fvMv1+NOf/u///hQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAIBSGDZsWDD33HNTKDXLiBEjit5cI7fddlsw33zzUShF
b4otZ7HFFiv8N6OwXwAAADTS5ZdfHvzpT3+iUGqWBx54oOjNNXLllVcW/n1Q
mqMgm0kmmaTw34zCfgEAANBINufo06dPMGDAAAolKr179462j2bNObTdrrba
apQ2KrPNNltu9blXX301uPTSS4Nzzz03eO+993LYOpubyzl69uxZ+O9Iad79
oiu9/fbbwRVXXBHug9ofAQAAOsvmHI8++mjRq4Mmc8011zR9zvHwww8XvTro
Yrvttlun63NvvPFGMN1004XLmHjiicP/vemmm3Jcy+bkco5tttmm6FVBzvLY
L7rSl19+Gcw888wV++B//vOfolcLAACUADkHqiHnQDPKoz43evTo4LLLLgvb
cJxzzjnkHGh5rZZzjBkzJvjvf/8bZo433ngjOQcAAMgNOQeqIedAM8q7PkfO
gTJotZzDIucAAAB5IudANeQcaEbkHPUj5ygvcg4AAIDfkXOgGnIONCNyjvqR
c5QXOQcAAMDvyDlQDTkHmhE5R/3IOcqLnAMAAOB35ByohpwDzYico37kHOVF
zgEAAPC7MuUcen7CE088EZVW8fzzz0fr/P777xe9OhXIOfLx+eefB88991zw
9NNPh+Xbb78N//7iiy9Gv/0777yTy3uNGzeuYj/Qe2f1yy+/VCzjq6++ymXd
8kLOUT9yjmJ988030XFARc8cyQs5BwAAwO/S5hz77bdf0KdPn5rlpJNO6sK1
r3T22WdHn0VF9b0iqW749ttvh0XPrkwy33zzReu85557duEa1tbqOYe22yWX
XDIq2kYHDBgQrLPOOsF2220Xbq/PPvtsw9ZT6zb//PNXbJcqd911Vzh90UUX
jf6244475vKe33//fcV7XXjhhRXTP/7442i7/PTTT2OX8cknn1Qs47rrrstl
3fKSZ31Oxwlyjo6+/PLLin3HljXXXDPYcsstgzPOOCP44osvumjN86V8Oe6z
LbfccsFGG20UHHDAAQ05Npx++ukV+9aHH36Y27Lz3i+6EjkHAADIU9qcY731
1utQV4srRdbTmy3nOOKII6J1mX766RPnI+fILm3O8de//jXVdtu/f/+w3p+n
7777Lph22mlj36/InGPVVVeNpm2wwQaxyyh7zjF27Nhwu9ljjz3CfXPmmWcO
l6VjSNmlzTnuvffeVPvOFFNMETz22GNdtPb5UX261mfr3r177tn9tttuGy1/
uummy3XZee8XCy20UDBkyJDgzTffzHU945BzAACAPNWbc+j6L67svffeXbj2
lVo159h0002DZZddNiynnHJKF65hbe2Sc6hMPfXUud6/Vd3PLv/UU08N3nrr
rTBP+eGHH8J5tt566+i3P+GEE3J5359++ilapsqtt95aMT1NzqF7+XYZ999/
fy7rlpd66nM6Hmgb3nXXXcP9MWk76NGjRzDLLLOE7V7KKG3O8e9//7vie1G7
JNfmwS3DldVWW62L1j4/gwYNSnVcGH/88cPcLy+LLbZYtGy1i8lTo/aLbt26
hccBHcPy3i/0fejYO9lkk4XvpW1L/9Y+CAAAUK96c45XX321oeuleuALL7wQ
3vdWXVv1Wt3veeONNxJf08icQ22zH3/88bDOePXVVwdXXXVVuG7Vxj5Im3Ok
pfEbbr755vC99b8ffPBBptfr+9BncOvu6trVlC3nePnll8O/6/fU9qQ6m50+
55xzBj/++GPi8vQbDBs2LPwO77jjjqpt9jWPXXYe7fs1boYyBy1bv8evv/6a
eRlpco60tE1p3JEbbrghXKe7774781ge+r71Or1e2VCa/TZtfe63334Lt/m9
9tor6NmzZ2z9Te2pppxyyth7+SuttFLYp6WeMU6aVdqcY6uttqr4Puw9fR2H
9d25aQsuuGDsMlQn1v6p45WOm2oX9Mgjj9TcF37++edw7Jrbbrst3C5uv/32
4JlnngkzvGo+++yzYPjw4eFr1Afpo48+SpxX/VPc+k8++eTRdqcc0razUrnz
zjurvm9a2taVm7jlHnzwwbHzaV30efUZ9Fl0bta+X0te+0W1kvd+od9Y5xm/
6JgCAABQr0blHLq+VJt93ZdR0TWuT9d4bvoCCywQtpmVUaNGVVxD+2WRRRaJ
vb9cLee45ZZbovdS8ccl2GWXXaJpGr/Bcn3348p4440X/OUvf6m4nh45cmS4
nIknnriiPmXf/9BDD43m//Of/xy2/VY58MADO3wu1ROWWmqp2PfXtfpTTz3V
4TX77rtv9F6aR+0UFl544YrXqq2+rnWrKWvO4ajetPzyy1fMozEHfNo3NLZH
3O+v+qLGFnT+97//hd/7pJNOWjHvVFNNFf0mbv5+/fpFv73fZ0nr7ubfYost
wixg1llnrVim9hu1EbGUX7llqlx22WXh388888xwWWqvYO9V2+1SdQ7RmL52
Gcp2fBdccEEw22yzxX4naqMUdw9c26J7L42douOC37dH33PSuCFOrfrcSy+9
FLa3t33CbHHt8V1fJR0rXHv9GWaYIfYz6bdSe6tWzzzS5hy9e/eOPr+2AdWN
HbX3scdonR98ytCqHTc1Po6fKeo91K5J20fc6yaYYIJgn3326fBeI0aMCPM7
Ldevk2+22WbB119/XTG/fm/XfkBlxRVXrJj+j3/8o2I5Gi/UmnfeeaPt+PDD
D6+YduSRR0bTlCG485pbT7tcvz+Y9t1jjz02mHHGGTt8dh2vr7/++rifKtLZ
/SJrKdN+AQAAyqXenEOvU73AL/Z+2+qrrx7NP3DgwIrl6TpT7VLd9MGDB0fT
1E6h1vWVMgRds1nVcg5dH9ppfh1M/QfctGWWWaZimuqHtdZH9//c9eyTTz5Z
c37lEE618Tl0H9TWS+PKhBNO2CH3URtkN119wJPqDao3V7tHWvacQ/z+JX4b
fN1Ltvdg48riiy8ejschepZKrd/f1buqjc+h9XDT5phjjrCOF7cstSe3ksbn
8PshxBW1cZFa43McdNBBNZelDMS/n66M0k1XXVH10LjX1mpnElef02+rOpyy
n7hlumzj9ddfr7psN0bBTjvtFNbv4/Y3jWN78cUXh5lWq0mTc/jtDlZYYYXw
7zqmKhvacMMNo2nKO5TB+eIyML/4ue5hhx1W8zU2IxaN5+DnG35ZZZVVKnIa
bQN2us1O1EbKZjzK4WzbN40pbV+rc6Flz3v+ucQ/R9lnLKmNS1yWaos+Z9x3
7dSzX+RVWn2/AAAA5ZL3OKR2LEdbR1Zd3d6j1bWavU62/VE0n8ZqU98Kte1Q
e11dZ953330V2YjqIVaWnEP3q61qOYfqfrr+1j099zrdz9R9f1tPUyYh7777
brhutk/ERBNNFP7NlWuvvTZaflLOoWtFZRRumtoHqH/0Qw89FJx44onhMt00
1YPV1tuxOYf7/vW+uldq65oq1dpkt0PO4d/b1X1TR9mFvbe68sorh22ZtE3q
fe326OpfqiPqu7b9Q1T+/ve/R7+/sghJm3O431/1Md3v9euQtk1HUs6h9vx6
b7vOc801V8V26cYnqZZz+Pek55577vD3UNa28847V0zbZJNNKj6Tv+2pDqm6
rvp42XYdqs9Ve96mrc/pXrLuKccdj9QPSW001AegHsoAtV+rD4fdRux+7ep2
LudqdmlyDh3r0hzv1Ubp3HPP7fB6Hbu0fLUDUi6g71HHJ51jbJskbQ+O9kPb
f+iYY44JtwG97rXXXgu3Y7W9ssdO/Ta2XYnOG8rJ9Ro/13vwwQej16kdkZ2m
31efQ8fVpZdeumKa2vNZen87Xetm2TEudBy2tI+7acqeXfaibMW2K9My9Nn0
vSkLsfuN3/bESrtfNLq04n4BAADKpZE5h641bRtw1dEd1fls3bEaXeupz7+K
coC4a2RpVM7h07W3W59evXpFr9M9bquzz1u59NJLK9b5rLPOqnid6rt2utod
OH7OYcew9/sFqb1KknbIOUQ5kb1Gj3sf3d/222bbbU71N+uKK66oeG9lY74s
OYdyPkd1NjvNPb9FGv28FZtlaDvSODrWGmusEU1XXmHH67D1NWVvtk2W/a5V
/OU6eg5ntfqbsg21D1P/sTxpv9dvqmOh7l3776vPqlxS43Wqn1ma53AXUVw2
Wy3nOP/881Md77U8v12dT+1j3PFS5W9/+1v0+nnmmSeaT9mIXbb6Ndr2Do7L
BnResJmdnplk22zo+G9/p5NPPjmaVqs9krZNbWOuz5elbcvNp+zLnmf8th7n
nXdexWtt9q390PH7Rtr9Wf75z39WvGecWvtFUaVV9gtKuUq1sXkAAO2h3pxD
favVv94vfl1Of7PXxKK2Gfa+neoOlq5VVTfTNVtSfwsV3We3suQcfn21Ws6h
sRR0Xayx9vznDNji11M7m3Oob4tdvj/uqMZ/tNOVezg259A6++NV2nvTaquS
pF1yDt2XdvMom3P233//6O/KOdR2wZaZZpqpYvl2fMU8cw6NrWL5OYTumzqN
zjns/W5lCr7TTz+94rVqf+TYnMMfB0dtSezr/Pb5qteq7pvUR0Hbueqytq7b
KGqzpXy26DpkZ0q1nMMfn0LHE9Xv9Twtv52S2gT5Y2QqEzruuOPCY35cJuSK
reuLP/6Miv62/fbbB0888UTFvPbYpDLNNNN02D/tdPssq7XWWqvqd6OsM2mM
UPv5XX8exz/P2HZEyv3td6Fji2OPA8oO/c+hz+am+zlHrf2CQmnHkvdz4gEA
rafRz1tRP2jbdkCvs/U/Xb/5Y9EdcMABqc5jauduZck5/GfjbbzxxtE0m3Po
GtI+B7BaUZtpq7M5h98HwG//q/t3drod48TmHLqP5rNtq/3+7lY75Bx6roOd
R/ma47eLyXJtlWfO4Y9v448BctFFF0XTGp1zKO9zf9cYuj6/XYZ9rq3NOXbY
YYeK16n9v31dUn+qtO058nxGsGj/02+6/vrrl749h+1DofzIjqUpGu/Cfnbb
9kZtGtROI83+YscpEvVz8cfvdUXnEfUrcWwfjTTFjbEr6pvm/q4cQX1W1GZC
2459jZ53YilDs9m7+kRZNpvWeDp27CNlHnbZLt/3x3StVZZYYonY34z2HJR2
L7Y/JzkHAKArniure17udWo7sPbaa0f/9sfd1H1AW4fQfTddQ7s2z7qf6KZl
yTl0/Wyn2Wckih13zuYcqt/Z12ksfbWrcOtj63x55xy6R2ff23+mru5v2ulD
hw6Nptn6ud+/R+x1fjvnHKq3+M+F0LgAjr4b93dlchrjolqx4xXmmXPomT6W
6tx22V2Zc9g6sNqz+LQd2tfa+/A25xg0aFDF67RP2tdVGzcmy/gcyjxeeeWV
xGVV047jc2ifsOOv6hk5Pn1m+z0oK3TWXXfd6O9qJ6X9QLmyjpd2XCaVuH4h
Or6qbZq2M/vMKhWbuWy00UYVv0OtfdP9Phr/yS7Tfg/qg2MzB/XBsjQOjn2t
7ZeiNi1q2+Km+XmE5rWvdePh6lxq/662K9U+x/PPP5/42zI+B9qZHZOHnAMA
0BU5xyWXXBK9Tv2p7Tj+9vpY/HHw7b1gXd8qs3fTsuQc/rh6tu7nj0lncw5b
Z9N622Wq7bp9Boafc/zrX/+quD7323Y7STmHnoVr18t/NoHf3sP+fuQcv6uW
c6jua58boaJ7tXY8iTvuuKNi+iOPPBL7PrqW96c1a85h92Xdl49TLefw21vZ
++Taxm37J92bt+21GpFzODxvJZ1aOYf/O+i7tjTuic0flGW4dgv67uzzodS/
0bL9A1Vs/uSPmSTazv3+e2rLJGoPZP+u43EcjfFhc21tV/Z1p512WsX8NhvQ
Md8+k9Z/rc45ovOCxgi205RXWPaYbMf18Pc1PUM6jvatuOepWzxvBe2MnAMA
YNWbc6hurjqLX7bccssOr9U97rhxNvznYYr/PEPd07vnnnvC+1hqL25fnyXn
0LWqvf5WPqHlqY+9/2xLm3PccMMNFdP22muv8DmkqsPafELFzzn8cfk1roGu
+1V/Uu7iJOUcGlPDXpvqPqOugU866aSKe5lune24BOQcv/NzDo1zoe/DPkPF
FW0fdixXUb1Nr3HzqP21si+NOaH9RduB8gnVh/2+Jc2ac+y+++7RNG37a665
ZvS8FY1FI9VyDtUn7bN+VG9WHU99CrQd2tf5/RIamXNYui+vup2eXRtXJ3OZ
h7sW1rFC25H6Idixk11R23vVf3WP3B/bp9XUyjn845aO09o2VG/XNuk/Y9mO
C6QxKOxxVmNrKAe79957w9fb16mu79pmuP4gOh5rvGq1oXnqqafC16600kqx
xzJ/fA7la8qs9VxvnS80VoueTaLjpj23adwQ+zo/n9Qzqex0+9xYjQVsp2m/
32yzzTo8R0jFH9/Z7hv+M1P0XGq7TyrT1vFWuYbGhNU+q+0yKZd0OrtfZC1l
2i/Q+sg5AABW3s9bicsuJK4v9QUXXBA7r9qIxy1b18+2D0yWnEOUQ8QtV/0R
bDsRm3PovpT/DE9X9IwOO9adn3Pous+Ot2qLrsedpJxD1N4lrt5li+oS/jmd
nON3fs6RVPQb2+dOWho3omfPnjWX0So5h3LDpM/gxq2plnO479+2ZYorev6F
7ccjXZVzOKo/K5fUfhX3G6pOqWOWP56sm6Y6to4rZarDVcs5lFPYXKFaUR1X
Y2n6475qfNm4+dWnY/bZZ4/+bcfBUZuLWu+n9bb7qI7vyujSrKftO7HppptW
/Mb+84uVBdjXK8dw1NYr7piuLMX/3I8//nj0OmXWtg2M8nJLxzCbHSYVPzf0
5bVfVCtl3S/Q+sg5AABW2pxD14Zqg16r+OPnO3o2iO7XuaL+K0n9dlU3Up96
+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
Tj755A7TadMBlBc5BwAAfzjssMOi8+ITTzzRYfr1118fTT/nnHMyL5+cA42Q
JecA2oHfluP777/vMA9tOoDyIucAAOAPCy64YHhOnH322WPb8//444/BlFNO
Gc6z8sorZ14+OQcagZwDqFSrLYdDmw6gnMg5AAD43TPPPBOdEw888MDE+bba
aqtwnu7duwejRo1KteyRI0cGw4cPD84///zwtRtvvHH4b5Wffvopr4+ANkXO
AfwhTVsOhzYdQDmRcwAA8LsDDjggOic+++yzifPdeuutseP3V7P66qtHr/EL
YyWgs8g5gD+kbcvh0KYDKB9yDgAAfn/mxJxzzhmeD3v16lV1Xt3/m3baacN5
l1122VTLHzNmTPDVV1/FlnHjxuXxEdDGyDmA32Vpy+HQpgMoH3IOAACC4LHH
HovOh0OGDKk5/w477BBdE7/77rsNXz+gGnIO4HdZ23I4tOkAyoWcAwCAIDj0
0EOj8+GIESNqzn/jjTdG85911lldsIZAMnIOoL62HA5tOoByIecAACAIhg0b
Fp0PzzjjjJrzH3zwwdH8Tz31VBesIZCMnAOovy2HQ5sOoDzIOQAACIKff/45
mGaaacLz4QorrFBz/nnnnTecd5555umCtQOqI+dAu+tMWw6HNh1AeZBzAADw
u2233TbV9a36tbhzp/q7AEUj50C762xbDoc2HUA5kHMAAPC7O++8Mzon6vyY
ZJ999onme/HFF7twDYF45BxoZ19++WXQvXv3cPufdNJJg4cffjh4+umn6yoa
k3qqqaaKMu9Ro0YV/fEA1IGcAwCA3/3666/BDDPMEJ4Tl1566dh59PzZOeaY
I5xnwQUX7OI1BOKRc6Cd2bYceRfadACtiZwDAIA/7LLLLtF58c033+ww/aGH
HoqmH3300QWsIdAROQfalW3L0YhCmw6gNZFzAADwh/vvvz86Lx577LEdpu+2
227R9Ndff72ANQQ6IudAu3r88ceDLbfcMlVZYoklov1kkUUWSf26Bx54oOiP
CSAjcg4AAP4wbty4YJZZZgnPi4suumjFtLFjxwYzzjhjOG3JJZcsaA2Bjsg5
gNpOOOGEaD856KCDil4dAA1EzgEAQKW99torOje+/PLL0d+HDx8e/f3EE08s
cA2BSuQcQG3kHED7IOcAAKCS2kG7c+OQIUOiv++www5Rf+133323sPUDfOQc
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
52hF5BwoE3KOciDnaC7kHABQLuQcyIKcg5yjFZFzoEzIOcqBnKO5kHMAQLmQ
cyALcg5yjlZEzoEyIecoB3KO5kLOAQDlQs6BLMg5yDlaETkHyoScoxzIOZoL
OQcAlEuanOOTTz4Jrrnmmopy/fXXB8OHDw8effTR4Kuvvmr4ej7++OPBP/7x
j7C+tuSSS4Zl//33D6dpXZZddtmo5OXII4+MlrnTTjvVtYzBgwdHy9hrr71y
W7eikHOUN+cYO3Zsh/3cFe3rL730UvDdd981ZP323XffaD/Zb7/9cl9+GXKO
O+64I/a30d+fe+65hh2HhwwZEv02O++8c8W0U045JZq2ySab1LX84447LlrG
Nttsk8cqh5588snY72vYsGHBE088EXz88ce5vZelc6I9H+n8mTdyjnLIknNo
/046Pt96663h8fmnn37qojUvJ3IOACiXNDmHrqPduTipzDXXXGEu8PXXX+e+
jrou7d69e4f33HDDDcPpZ5xxRsXf86LvxC2zb9++FdMeeOCBYMCAAVH55ptv
Ypex3nrrRctYbbXVclu3ouSRc/z888/hddlBBx0UPPjgg8G4ceNyXMNk5BzV
c47vv/++5n4+8cQTB9tvv32nvsM4a621VvQeAwcOzHXZUoaco1evXlV/m/HG
Gy9YY401gjfeeCPX9fvb3/4Wvcdyyy1XMW3PPfeMps0777wV00aOHFlxjPzg
gw9il7/ddttFy1hiiSVyW+9tt9225vb85z//OXjooYdye0/Rsc2+x7vvvpvr
8oWcoxyy5By6n1Nre55qqqnC3PC3337r9Lr9+OOP4TWL238vvfTS2Pnefvvt
iv383nvv7fR7F4WcAwDKJa+cw5W55547eOGFF3Jdx5VWWila/pRTThlev6p9
xTnnnBNOLyLnuPrqqyve87PPPotdBjnH79RWQG0CVEfWtbn97maZZZZg7733
Du+x5nF9Zn300UfBCSecEJZFF100fD/lcfr37bffnnl57Z5zuLL22mvnun7k
HJ3POVyZbbbZgjFjxuS2fvXmHPfcc0/Fer366quxyy8y51CZaKKJgtdeey23
9yXnQFpZcg57nKhV1Aars9Qeyi7zuuuui53viiuuqJhPbctaFTkHAJRLPTlH
v379wnqi7htstdVW0TJc6dmzZ65tgmeeeeZo2YccckiH6Z9++mnYr8WVvLz1
1lvRMtUm1Eqbc7z++uvRMpKu81tJ1pzj6aefDvbYY49gpplmSnV9pnq45n/4
4YdzWV9lbq6fk1+OOuqozMtrp5xD+ZPLiFy9ypY8Pz85R7aco1u3buG+paL7
vGpPZ3+ba6+9Nrf103eXdBzMI+fQ/WC3/Dwzcj/nGDRoULgtqx2ZfzxS/8K8
kHMgrSw5hzuGu/3/2GOPDbfno48+OlhsscUqtrnJJ588bDfZGeeee27FMnUc
iKP+w26eCSaYoNPvWyRyDgAol3pyDn+ciS+++KKizYWK7tvH0XWyxtnQeVn5
xRxzzBG2tb7ggguCX375pWJe9VfReXzCCSeMlrvmmmtGdS/d/xfdd9D9C1cs
3adz86tofIH7778/vB+tetw888wT7LDDDrG5zA033BAt8/zzzw//pnO4lrP5
5ptXfF7VVdx7qL+sc+WVV0bLuOSSS2K/kzvvvDPYYostwnrMDDPMELaJUV1P
1xlx/W1Vt3HvpXq3+65WXXXV8DvVclT/iOuvr+Wdfvrp4fe4yCKLBDPOOGMw
33zzRX3vzzvvvKptKtLkHPo99tlnn/C+sl831vWZ7gmfeuqp4ec45phjgt69
e8dmHgsssED4vTVTPtROOYfa9FvaZux07UfWs88+W7Gv+f2RtF+4aX49PE3O
cdttt4VtC9x+ou1W9T1/PeKUMeewNE6G/W3+/e9/V0zXPmR/mx9++KFiujvW
qlx22WUV03Qf1x3DdJy2knKOf/3rX+Fx1a6TxmBx73HxxRdXvLdbvmuj56h/
oHvNmWeeGf5N7eeXX375MKtYeOGFg4MPPjjcdn1+zvHYY49F026++eaKaRtv
vHGH15944onRez/11FMV05SB2+/z22+/jaalyTnUh+fAAw8M61WzzjprWPSZ
9LulGQOHnKMcsuQc2kbcvLpGsNRfePzxx4/d7nTdofO12qTqdbpG0LlZ53zt
o88//3zFsnSNpm16xRVXjJalfsO6r+W2d41Bo3sR+m/tg26+6aabrmK/ePnl
lzt8XrWn1Lauaz/dE9N9M233cdc6un9kl6f7Rrru0/6qbNe1/9I1i91flbFq
n9SxVe049d2pPa3WuxpyDgAolzxyDvn8888r2nUom/CvPU877bSgR48esXVa
lRVWWKFinIu4e8i2uDp+tX4rqk/ZabomVh3BX5au0f223nH9VjRPtXXy62nV
+q0o17FtwuOKztG6NrCUEbjp6pOv+5Nxr9U5+9dff41ep3qn1qHW+vt5k5WU
c+jaSPWU+eefP3aZCy20UDhd9YM4uh7SdGUb1V6f99gDWbVzzmH7F6j49/ZV
R7XT7bYnNsvQ+iRN83MObY8a47LaNqs6dDVlzzkOOOCAiu/Dz5Guuuqqiuk6
Xlv2OKQ6SNK0tP1W1Bek2u+lY5NTrd+KPbapTpTUFyWuH1W1nOOZZ56pmKa2
Hj57rlKOZN1yyy0Vr3/vvfeiabVyjhtvvDGYbLLJEr8b/c52eXHIOcohbc6h
/dVuIxtttFHFdPUL9fc5N1aa66+ZVHStZrNinWdrXSPo/o29PkoqNh/Udcsk
k0xS9Zjgj/uke012HrUd0TWP+7fGAxFdV/j7s851/ntMOumkVfctcg4AKJe8
cg7x2zjoXpyj60KbL+hege4PqL2wHa/BjtnfiJzDFd0L9Mc2VTsHq9E5h9o8
2NfpPsv6668ftrOwf9c5194btzmHK/pubf8eV9Sm3dF4e3Z+9TnSfZQjjjgi
2HHHHcMsQdPS5hy6ftf1v+rDcd+Dyyay9n13mYnqTdWW+84772Rabh7aNedQ
DmXb+qsupmtry885/PYc9eYcti6ta1wdZ3TvTvVYe82rtkhJypZzqGiMIpW/
/vWvFXVyHT/8e6N+zuG/TyvkHHYbiOsHZ3MMSco51F7Cb2ty9913d/i+7Xeq
jN6qN+dQvxz73ei3Uv85HYN1f9vue9XGZybnKIe0OYfGtrLblK6dLLWPstPV
XlY0lqi2t1VWWSXsD+ragOqYYedXm1pngw02qHmNo3YVtfITtS/R+4v62Nhp
Ot7r86oNqT2G6z6Udeihh1a8zu2Tap+hzEL5rqitoJ1P1zcqarPrX+e5dmFx
yDkAoFzyzDnUHtHOp8zfsXVh1eVt3wh7b03nJtdPQdej6nuhvqZu+uGHHx7+
TcWdQ7PkHLqWdG0pVf+2y9Z1sRWXc2i99d4XXnhhxXLVzsCtl20XkpRzqD2m
+rK6aYsvvnjUlkXvofqLXb7adjt+zqFrZVfnHjFiRMV1gx3PRL+H+7syEf9+
u+iavFq/lamnnjp8vftfv6iuo/d88cUXE5eRltZDdRNdn8VlONpWFlxwwbCe
pD4++nyNLjbLK3vOoe1Iv7N/D0731fUsDZ+fc/jbUT05h57Jadtj+1mkzZ30
2ZK23TLmHHFlzjnnjL1f6eccfp+2vHMO3Uu+6aabKt5TxyZ3jLT3bbPkHFo3
NxaSnzXoPGD5OYeO9f5xS3Ug1aXi2JzD3+7qzTlsdq9jvjuHifpO2vOR+tYk
Iecoh7Q5x9ChQyu2qb/85S/hPSK1Y9Px0m+j6q691D/Nb7vlrLvuutH8aofp
aN985JFHKpanY7vbd1V0nNU+rj4xdj7lhW4edz2jviI2a/DHWLP7qfrAWPps
dvn6t+tjrPsxo0ePDv9bfcDsfMop3D7pZ0DKFJOQcwBAueSZc+j8EXeu1XWp
PQ/rutn2uVTR8yrd9LPOOit2HVX8+xiSJeew/cJF9zHcNN3zsBr5vBX1ebev
95/ZZq9/VDSmiePnHLrXY9n7LPZ31XgY9nW6J6r7Oqpn6Zo66XpI47yq3Yb6
88bVrXTPZL/99uvQhz1Purd53333hfd/kjKWri5lzzniisbESGr36+ccvnpy
DpvNqSjntMcN7Rd2elK/pnbJOVSUQ/ltqPycw38Odt45h+TxvBU/5/D7Sk0/
/fTRNLVpt2o9b0U53tlnn53wbVfmHP494HpzDtt2UecD/zxoxzTSd5uEnKMc
0uYcGr8r7XnJ3240fprG3NH+oX1CY1uo2G1tmWWWqXjNf//734pl+uNsOLa9
hfanuHFy7LhOyjt0nWi3efU9cdM17pJl221pLLWksWtWX331aD5dS9p9zu+j
5o8xZJFzAEC55Jlz+P01VS8VPWcsS/3Rv7+WZ87hX/+rn6ubpnp80ufJO+fw
swo3pqqldpluuu7fJL3W79Oqcb3ctA033DD6u+7BqB970veu6wNdC/n9EXTP
UTmI+rnEjW2idrGqtypDSjOGXj10/aS2qXof2w6myFL2nEP9tjVunZ8raRlq
Z+Gr1Z7DXu+mzTnUryrLb/Lggw/Gfray5Rx2fA7ds1WfHbtvun7rjp9zuL77
jm1n0Kw5h46HPvucGZsFi59zKP9R3c7eW9Z39p///Cd2vWzO4bcV8ccxTZNz
6HfKsi3HjY3qkHOUQ9qcw471GVe0HesZYnYMdB1/9SwWew8pqfhtWXffffdo
msaS8a8JHHtM13jiPo0F6o+PWq2obaozatSoimnVvh+Nf+rms9dK4rc50f2e
JOQcAFAueeUcaqc45ZRTRvOoLur6b7zyyisVr9ezWdw9hbjij/efZ86htgmW
vU/SlTmH7iPa19uxTETXFfb6QNe1jj8OqU/tUtx0m3OIrn3UnlyfTWN+2j4u
rvjfv+XuR6rOYJ+D44q2gb///e/B7bffXnWcjzRU79b3rP7Ccf39df2m+zi6
J6RMTeO/d2WJGx++WXVmfA71b9I+b6epHZDPzzlsm3yxzz5Mm3NoXAT3d9VP
qx03VJKeS1rmnMOxfQP1Xdnt0885/OdL9e/fP5rWrDmH+uT77LjFtXIONz6H
MmV7TtGxJW6sH5tz6Pkxlv/MzTQ5h/Yjm0WpLlVtW9YYNEnIOcohTc6hfMxu
i9pX1YZTRec9tVfw22eJrpXsdqhrGLW71PnSHxvMH3/Gtt30jweW2l+4+bbZ
ZpsO09W/0b6Psphq27zdz/w2U0n5hPY9O5/fx8weo2o995acAwDKJY+cQ+dY
225QRff+HdWfbD3VP6emXUeVvHMOm2VkyTn8fidx97clKee49957K17vfy5d
i9vpaq/v1Mo59HxZN93POXyqC+keuOoX7jW6l5PEjkOqe8Jqw6E6a9w9G7UD
0Hage59xY4EkrY9rO2L7qts6iWs74j8fB8k6Ow6pMiu/34T/jD4/+7PP1lHO
YK/V0+Ycd911V6q6ci3tkHP4zzqy/dD879HWGZR52Hu+eeUceoaDfU+/z4nT
mZxD4/O46WlzDvHbCSnv9tl7xKoXWn67uLT9VuzYytWOs7WQc5RDmpxD49rY
7Unj1tai+xm2T5faXdj2dcoCko7l6iNq25JqfKxa6550Xae+rHYeN3Z8GrYf
dLV8wn8miz8esZ7j56YpZ6mGnAMAyqWenEP1aN3P0nltl112ieq+ruj8+sEH
H1QsQ1m9ne5n8+p7obbX6ifqP0e1GXMOXRfY5ap9qD6Tir1XmpRzqD6vNhFu
mq5X77zzzjAPUF3O3ptVncY+477enEP3LHXN4o+joesfW8/cfvvtOyzTSXqu
rOpnLvOIe3awXqfsQveg/P4Marui9hFaN1u3sJ9R7fC1fLWDRXZ5PFf28ssv
r5ju943wr8dVF9QzfvTMHz8jSZtzqE2IHYNWz2nyM0X1H9I1sX1mgK+MOYc7
3uhY5I9TMuOMM1Y8r0PPR7DT1aZObciUKWo8TDstr5xDfQTtcnUv2a2zPT8U
kXNou9K4Qm6a2r/4bYH69OlTcXy+4oorwkxY5zz/GJU259AYjO7vag+neS2d
F9T3QPcN7LM+feQc5ZAm5/DbDqmdQy2692RfozFHHbWxsNdsOr/a/qZqm2pf
q21R52ftt7avpvYnO5/acT7++OPhfO46y++3ovZX/jWYjk3qq6wxvi177eSf
iyx/jBD7WXQMtPdLNL57NeQcAFAu9eQc1YquRZ988skOy3j77bcr6rC6Ttd1
u66p/f4TrZBzqD6SNE6EHc+72nNltW7+eBf+M9BUdtttt4rX1ZtzaCwx93fd
r9HzWTWWh81bVNTGPUlSzmGpX63qkvrO4sbzUF1bdZ4bb7wxrDMkZRv6vs4/
//wOz4ZAdnnkHMqjbD8BFdvfSvfbVL9OOjaon7f77yzPlfX3E7U9UN1cdW59
Hvd31XmTlC3nqFX0fAZL1/saxy/Nb5NXzqE6uz1222LbMhSRc4i2AzvdP6bZ
TKLa96WSNudQGzj/d9QYI/rONb6BPaeozV8Sco5ySJNz7LrrrhXbi86vafjn
VR271XdQ51bbfkvXAZaO8/4ztuLWUVll0v6hY7bj54J6b7Wr0PWBHWfU33+1
v7tp1e692Gey2PE9RPeM7HsrM6qGnAMAyiWvnENtNPScs6Rndojq2fYeWVzR
ec8f66IZcw5R2+e48S3S5hyitv62faktuubV89L8Ph+dac8Rlym4ooxFbSqq
PVc2Tc5h6VpIz2qxY6NWe3/Np/mT+gGhPnnkHOKP6bbyyitXTFcdzx+3Re17
VO+u53krjtqExD1b2JZ2as+RVJQz6fgQR5mUbY/u9jn1iWvE81ZEz9+O69PW
DDmH2nTYjFffhW03p35xqo/5667zxEUXXVTxt7Q5h6i9X7XxoFWmmmqqqs+v
IucohzQ5hx0rQ+fvtLTv+fdNlF/o3oFtyxR37afnC8Xtt+r/Zul+Rdy9DNtn
UXmnP0a9X9TmQsd4R9eRdro/DrBlsxK1KbH8NojVxiAVcg4AKJc0OYfqqsrB
bdFzUDVGhcbB8vuo1KK2jeqnqWtkXe+qv6nOvUnPLtM1pXvfZ599tsN0vU5j
5rtiqW5v11tjellafzdN43Naajfsljls2LDYddO9FeVAWn+3HHsu1fPk3TI0
NmccrZPO8bp/qOem7rvvvuGzz/yxAp0XX3wxeq+4ZwXoOttN1/tbuq+r9dN1
jOpXuteieo7GkLTXJkmy5hyW2rErA7J1ExVdWygz8tvxID9pcg7laXZfsded
ju71qX+Znc9/lqDabimP1Lal/lzuGUfa/t1rtM9Y6rPl9hP9dxy1F1Gb7SFD
hgSDBg0K9t5773BMPbU/StpXnDLkHMpE/eOwin4P/VY6NiY9F8HRsVrjW+q3
0b7o+mpozFC3PP9Yp2Ok+23Uz8XSsdxN0/rFUbas45COae49HnnkkWi6+ja5
ZaivvaW+UO41ceMj2+/ELlOU69jvyc+43Xvbefy2iNrmdK5T/qvtTeun71jt
9+3r7FhB+o7t+ShpHCGNV6JMSsvV9qztWs9UV75R63ck5yiHNDmHtj+3nakN
ZBZ61p2ur9Qm9KSTTgqvV3QNYLfdpLq/tmO9n503rt+o+p2or5W9Jom7V6Lr
NB17tS8pk9TxR9u79nH/Xs7o0aMr3jfpGtM/Z2lMVkv/ttNrjR1OzgEA5ZIm
5wCczuQclu6b6hpHdWI0Xpqco8zKkHMADjlHOaR9riy6BjkHAJQLOQeyyCvn
QNci5yDnQHmQc5QDOUdzIecAgHIh50AW5BytiZyDnAPlQc5RDuQczYWcAwDK
hZwDWZBztCZyDnIOlAc5RzmQczQXcg4AKBdyDmRBztGayDnIOVAe5BzlQM7R
XMg5AKBcyDmQBTlHayLnIOdAeZBzlAM5R3Mh5wCAciHnQBbkHK2JnIOcA+VB
zlEO5BzNhZwDAMqFnANZkHO0pmbIOe65557gm2++KeS9yTla088//xzccsst
Ra9G0yHnKAdyjuZCzgEA5ULOgSzIOVpTM+QcOsZcfPHFhbw3OUdrUsYxcODA
olej6ZBzlAM5R3Mh5wCAcnE5xyqrrBLccccdFErV4rYXco7W4nKOGWaYoZDt
ZtiwYcGkk04a9OnTp5D3v/DCC1si57j22msL38ebqei81KNHj+Dqq68ufF2a
qfTv35+cowRszrHtttsWvl21e+nVqxc5BwCUiKu3UihZCjlHa3E5B6W5cw4K
JUsh52htNuegNE8h5wCAciDnoNRTyDlaCznHH4Wcg1KWQs7R2sg5mrOQcwBA
Odx5551hH2gKJUsZOXJk0ZsuMnjyyScL21bUF2OiiSaKriEXXXTRQrfdd955
p+ifo8Lrr79e+P7cjKVfv37RNtOtW7dwbJei16nZyl133VX05otO+PHHHwvf
hvIo1113XdC9e/dw/Kei1yWP8vDDDxe9aQAAAKDJXX755RX3ynQ9/NFHHxW9
Wmhi3333XTiei91uTj/99KJXC0CMLbbYItpPn3jiiaJXBwAAAGi49ddfv0O7
4NNOO63u5f36669he6Lhw4cH7777bn4riqbhZ2Mqyy+/fKeW+e233wZXXnll
TmsIQMaMGROMN9540X664IILFr1KAAAAQEN9/fXXwYQTTtihzqo+CVmNHTs2
WHXVVYPJJpssWs4JJ5zQgLVG0dZdd90O24z6rrz33nuZl6W2IfL++++H24//
dwD1s205XHn00UeLXi0AAACgYS644ILYcd5UZ83aFkM5x3777RfcdNNN4Zgf
5BzllJSNqQwdOjTTsj744INg7rnnDrdDZSTKOT777LNg++23DzbYYIMGfQKg
Pdi2HBNMMAFtOgAAANAWVl999cQx7bPWWa0HHniAnKOkkrKxep+DMHr06GD3
3XcPFltssWCmmWYKllhiiXBM03HjxjVg7YH2YdtyHHPMMcHSSy9Nmw4AAACU
2ueffx706NGjIc/uI+cor2rZmMobb7yReZn33Xdf+Jwf3XtWW45PPvmkAWsO
tI/vv/8+asuh5xtr/Bs9q8TtpwsttFDRqwgAAADk7qyzzqpaX623zirkHOWk
PiXVsjF33zgt5RlrrrlmsM4664RZh/qtXHPNNcECCywQHHfccQ38JEC5+W05
HNp0AAAAoMz69+9fM+c4+uij61o2OUc5nXnmmTW3md69e6de3i+//BLcfffd
4X/bcUg1Bun999/fiI8AlF5cWw6HNh0AAAAoq48//rjiWYNJZZFFFqlr+eQc
5bTiiivW3GZUXnrppczLVtuOXXbZpQFrDbSXpLYcDm06AAAAUEYnn3xyqvpq
vXVWco7ySZuNqRx++OFFry7Qlqq15XBo0wEAAIAy6tu3b+qc47DDDsu8fHKO
8jnppJNSbzPzzDNP0asLtKVabTkc2nQAAACgTDQOQrdu3RpaZyXnKJ9lllkm
9Taj8swzzxS9ykBbSdOWw6FNBwAAAMrk+OOPz1RfVXn66adTLXvzzTcPllxy
yWD++ecPXzfLLLOE/1b5+eefG/zJ0CjvvfdepmxM5YADDih6tYG2krYth0Ob
DgAAAJTF4osvnjnn2H///VMt+6KLLgrbcMSVsWPHNviToVHqycZmm2224Lff
fit61YG2kKUth0ObDgAAAJTBa6+9lrm+Sp0V9WRjKo899ljRqw60haxtORza
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
rbcG3333XcU07VuXXXZZ2A4jqR25n3PstNNOFcteeeWVK6YPGTIkmj527Niw
Ln3//fcH11xzTfg967M88MADVetNjco59Pnvu+++8DPrO9FvrXXM4qWXXgqP
eXfffXfV+dQn5LrrrgvnTXsMKzrnWHPNNTv9vll98sknwQ033BB+T2+88Uam
177++uvBlVdeGdx8880dpmkcNf2+bt+59957g++//77q8jT9scceC/t06DXa
Z5555plwP4yjbefZZ58N59P8et0jjzzSqb4Wn3/+eXD77bcHF198cXD11VeH
Y3nos2Sh/F7f57XXXhtuh3H8nEN9z+S3334LXnjhhWChhRaqmH7ppZdGr9X3
oe9e+4D2ay1L/6tj1Y8//pi4Xo3KOXTsUj9C/QZajxdffDH8HGlp3hEjRoSv
f+KJJ6rO++abb4bbnH6b999/P9XyyTlQD3IOFIWcA/hDnjmH6qrnnntucNRR
R0XL1PimGrvNp/rKAQccEOYT5513XofrK03XNa7uvesabtCgQWF+klS/qpVz
/PDDD+H1tOpxu+66a3D88cdXHXdV16dHHnlksNtuu4XvG1c/Vb1Ln1fvrc8S
9zmRTlfmHK4OqbLccssFG2+8cfTvWWaZpUPdWf3cp5566oo+Xvpv/c2V2267
LZpffdTVp2q66abrcG9Vr/v73/8ebte++eabL1qetk9lLt27d49eO+2004aZ
g7blrbbaKsxo3DT1O4mrL1bLOUR1Gzt9o402iqYpy0m6RzzJJJOE58+ff/45
mv/kk08O1139Qd18aktgvye1vdp9993D/7afTVmTnU99+x193r322it8T389
5pxzzuDGG2/s8LlVL7bLe+6554L11lsvet3CCy8czqdxSex8WpY+13jjjVfx
Pttuu23NTKUVco5XXnklrK+6z3vIIYdUTNexzE2bbbbZKtqBaN9w00499dTw
WGp/a5XNN9+8w7FcWYL9jpUlbLnlltFrZpxxxor5zz777Io6td3GjzvuuHD/
8h1zzDGx24eK2m7pmG8pG9TniZtf2+Xiiy9eMf/gwYODiSeeOCxu27GUR2jf
sdu0bU9xzjnndHiNcgb7vTz//PMd+tPpeOEyDCsp53CUa9jpWn+nd+/eifu1
1uOf//xnRc6QZn/VtrjOOusEU001VcXyJp100or5rC+++CI8jvnbkIr2pbjr
EX1ut6xpppkmGDVqVLDMMstEr1O7TlHeZd9X+YcyV/se2sdtrpuEnAP1IOdA
Ucg5gD/kmXOojqnlDBw4MFrmn//85/A609H1k+oMqqPp+mTVVVcNrx01n71f
resfXR/OO++84b0p3XfWdeyCCy4Ye++6Vs6h6VoPjeOh9Zt11lnDf991110d
5lX9UuuuftiqO+h8petuS/Uw1bF0DbX66qtH144nnHBCPV9d2+uqnEP3Me21
ruprum9v/3bPPfdUvOakk05KrBe44ura2r632WabmvP36tWrQ9YxwwwzRNNn
n3322NcpO7G5jF8PVN3ByjPniKvDqQ7kqA5a63PrXvf2229fcz7XNkDna9s+
RMXmO+7fun9uqe2MnUdjr9h/u7qqxue0f59nnnkS10ntgKopOufQZ1QO5hfd
H7dsezv9pmqfI7qnbr9bf1xe1VndtLnmmivxe/Lb8LjzQtJvYXOO/fbbr8Py
/N97xx13rFi+2gD4r/G3VZsBKbvx+6358+tcY1Ubn+PDDz9MzExs2X///Ste
p2w0zbanz69syMqacxx44IHRND/niNuvTznllGj+NPur2kn079+/5nyOjlPK
dav9zspI3bbp+G3x/G3J5RwPPfRQ6v1ax4pqyDlQD3IOFIWcA/hDI3KOySef
PFqm2nzb5/Dp+kzXVbfcckv0N93H0nWnrd8q59DrlU+4e0u6J6v7SLoW9tXK
OdTWwj77QfehdY2kfMVSPUzve/DBB0fvq/9VmxNL7QB0vaj6uaM2HbpHpPoH
sumqnEPX+/b6XvcDdf9ZGYH7+9Zbb13xGrVBUD5g6zLKuPQ3V3TPWnSf2F5D
676w2lmovqnl2mn+PWabc6gok/vXv/4VO2aqtj21GfEzD79uWi3n0Ha60kor
VUy39zeVW/znP/8J2z2pTYWoTqd6pq2LfPPNN+E01ZO1fHsvXvUL+z2pzq1M
Qv9t779rP7TzuX1V7VrcPDpGqM+KzuHqW6A2Hm6an/H4OYd7D32mf//73+Fr
xc853G+meuMee+xR0a5D+3w1ReccSWXdddft8NoNNtggmq7MQr+x/d122GGH
Dq+xOYeK2m5ou77++uvDur+dpvvpjp9zqCi7Vrs/tQFyuYXq8nYeHU/Vjk7H
atXb7W+h9jqO2ke5vys3d/mh8nD1W1H7BNvP4oILLojm12dW9inq96I+IzrW
+1lNtZzDzwN1LlI9W/mpX5dX/wrHzzlU1lhjjXD71PNS7N/VrtCq1m9F59Nq
/VZ03at+X+q34dpjKVdUfczNr2Odk3Z/1bFK9zDs++r4YudzbHaidmq636D+
NFqOPabp+GH7/dicw/7mOhbqHoPa9Yifc6joXonW0V1bJB3vfeQcqAc5B4pC
zgH8oRE5h607+X3b9SxLtW/16W+6H+ToWkT1UJsjiK7/dC/cV8/4HKpPKzex
dI2le+lJfbrl5ZdfDj+b315e12j6u39vGbV1Rc6h9u5qi+/mtdub6mzu76rP
xfWPSjM+h+4nunnU5tzvA67t301XHmi3M5tzaFt27Zu0LrbPjF7n6nJ6vdoU
JX13WcYhVbuqpPEq9d1pLAa1Y9Jxwr7O1jklz/E5bD1x33337bBOavPlptss
0s85lD3E7dN+zrHAAgtU9LuwmY7fv8LXSjmH8gPbJsNm08rQXK5l2ZxD9Wjb
t0H9Aux7Khdw/JxjkUUWiV2++ji6edTWz6e2RnF105133jn6u56hqwxd22oS
e85TPwtlANqu4/rDOEk5h7IUm7/45zb1E7LtJdT/0vFzDmVP9jtdaqmloml+
n6Qs45Cqnp7U31P7hHsOtLIP+zr/2JXX+Bzav3SscfP4fXqUm9rvTFma4+cc
6v8UN5aHn3OozaX9fe24RHoObzXkHKgHOQeKQs4B/KEROYe9X+LnHLqe1vFf
dUZbdP9IdVBHy4irV+h+s7IJ/9qmVs6hfvh77rlnWI/x+3Hbeo2uwePqBZbG
h9PrdH/X/xxqS5umzy8qdUXOoXYZ9nfXuBuOxiC00+KyqjQ5h7u2UYl7Tq22
Dfs+dv+wOYf6vljaF2x9yFpsscWiabvsskvFtLQ5x5RTTtlhfA/lecoplCXE
tW13RePoWHnlHH6dye/rr2LrmGp/4fg5h9ocxPFzDt37t3Sf3E3Tvl1tfMSi
cw7Vv9VeyS9+Gx9HzxtVexz/O1bdPI7NOWyO4dixGVZbbbXo737OoTZCcZRR
uHnUdsf/re14wZrXURufuO1S+4xyB9W1bZsA1enjxoTQuUnZ57HHHhu1UXKS
cg7Vwe0yNLaIzx4Tll122ejvfs7hj41rx5PwxwvJ8lxZ/5ioto36XnS+rPZa
2w5T8so51PbN/97939r2YVHfQsfPOdR2JY6fc/j7v9qWuGlqM1INOQfqQc6B
opBzAH9oRM6hulZcPU6UMahNhvpU+0Vt/h3lHLq+8B199NHhNao/hn21nEN1
E9UFNdaH7vXpPpXuwx166KHhOtpxQTT+x4Ybblj1c6pe565p4z6HxrtHNl2R
c/jtlbUtaRxZldNOO62iLq+20L40OYfaYLt54saFVL93uw6qazo251C/Kcve
e7f1eXH1axXd27b8nEPje6g/jIraluhzqM23ckBLzyWZbLLJUtWlVM+08so5
dE8+zfu7Yu/x+zlHUn3Izzn8zMaOZaFS7Z5/0TlHPc9b8fstufEN4ticQ31O
fHYbtX18/JxDY0zH8ft4VCs2a9DxXf0VlNUlza/PaTMqPSPG72tji7I92yYk
KedQNlht+xGb39gxTP2cw39ejW3fovOX5eccGm/K7ddqn7DpppuG56dvv/22
4nXaL+IynrjiP7skr5wjrk9JtWK3NT/niGsXFPcefmajex5xv2cccg7Ug5wD
RcmSc6i/r8apjis6r+pc4x8/W4nOq0mfzxbd30DnqF+7Pe/aexRF6uqcQ9d5
qm/W4sZh958lqGs/nT986m+v8dfjqC2+1kWf1V+W/m5zDo1RqqyjGvWx1uts
e1p0TqNzDv3GaevtKso8Pvjgg4plpMk51KfKzaO2QT5/nEU929WxOYffJsjW
yfz+G1lyDn8c0iS2L4DGvlB7Fzf+r58NNCrn0LnattdQ3URtcpKKshnHzzk0
TmIc/7P4933V5sdOL1POof4Ccdu+HcvBsjmH325Iz6Kx7eRsmzg/50h69qfa
Orh5Vllllaq/tT8up2gf1/auMT80/oOfY2h8J3+dR44cGfZ30ralfiK2HYGy
Tycp59A4JPY9NLaGpWzFtptQ3uL4OYc9Fohtc1Ar54h7JkscewxT/0yN8+me
o+tnA43KOdReyF/3ar+1He/KH4c0if9Z/JxTx1ByDjQSOQeKkiXn0Lhqaa6J
V1xxxQ7j3LcC/15VUom7t4ls/Gc66HqsGXR1zqE6rNok+9cd2i/t2ADu3rue
deGoLqw2rXE5iXIjXff496VF7ZS1LDuGvOqwrk+6zTkuvPDC2Gt99WF2dH2s
ayPtF1pvS21Fku4xIVmjcw5db6c51tmiMSstOx6ora9Y9h6sip5n4mg7s+OD
qK+WvcfcTDmH6szuNRob0XL7iCt+zrHWWmulqnurfZWbT+2x4tjxTFRHS8oZ
1C7G7vvkHNW5MZ3da9Uvwv23jotubE7L5hzaVm1bgSuvvLJiXfRMbidtzmEz
QNWp4569LDpP2DZzGhcp7pm/+pvdp3QOFtXrXd3eZ8cUVfbhJOUc6vNo8x3l
EfZZy/64xPY5vkXkHHaf88c2dc8ZS/qd0uyvamdp24soc/JpH7K/i3/McnRs
1LOv7DmWnAOtgpwDRcmSc9ix3msV/5zRCtI8L0xF456jc/Qd2vNz3LNRi9DV
OYcyAI0xp3HINIaY+o/rnq/a+9v2qcoy1D5DucZmm20WttfQMy70N+UWPl0T
69pYbYTVH0Fjr7vrcF0v6V6hrke1btpX1Xfb3Xe2OYeuwdZbb73wN9J1jV0/
S/VHXffr/r2eran10z1ItQOwmQjSaXTOod/GzaMxCVR/dX1WbLH3XjWWi6X+
InYf1th2OoaqPuL686v+aNsgqC2E6m/aJtWWyR5X1V/EaqacQ/uIe41ySbWB
V91B+5XfLsbPOWxbEO0Pqn+778nua/Y3UZ1b+53msWM/+M8MVYaiLEL30W+9
9dawraEbn8T+9u2Yc7jjUVzRPRtH99y1bbvXaSwN1c11XHZ/ixuL1H/eitq9
abtWHmAzE+1f9h582pxD9Xy7HO0v2rd1XtLYFbovo8xN25RtN6FtUsd+7Z+a
X20AtK0qa7HtM9z5TduOzgVbbLFF+PuqL6P+puew6Pzi5tf1n1PteSu2zqyi
diHaLvW92PE29d+2jVgROYfNL9WHTfuu2nSo3a7fn8X/ndLsr2Kfia2+RBrb
W/PZ3Nh/BrWemaM+QPod1HZMfUrdMU9j5jrkHGgV5BwoSpacQ30c7bHSjT+t
DF/XfXZatWfO6dpI9Vr1XfCfH1GLrkn0uiz3iDWv1jVpjG3HjuetMcTUByeu
ZF3nLJT/69mOfv+EtK/Vd2PHkfSn6zrWPk+0Fv1Wqqd+/vnnVa9pLc2rvrz2
Pk5n6Lxe7XPVovtY+txp1ifPnEP32XQ9Y+8L+TmH6HOpTbDaNqsvscbD0PPe
9Jkd5Rzqr60xy5RzqO6gZx0m1VdE93NVd9TzOrUeto2VchDVNzXOnO7Z6fmx
unbWfH6bDG03ul7WdY3Wz40n4lO/L13Lapm6BlRdTvP5Y4egtkbmHDq+2Oyh
2vWqrd+r2OdAqp+SrTfZov3N0bnBvl9c0Tbv34NuppxDn9s+48UWtWOy//Zz
jrhnurpi79HHPSNSxe9/ZjPiaqXdc45q5eqrr45ep3zZ1nVdLqtny9rnrvjP
PbY5h55XkbSN+2O5ps05RGM826wjqfg5R635dRx3v53f1ySuKO+0+3S1nEPn
M5sBxBVlP/Y3kCJyDj83rLZf+79T2v3VPu/ZFjsus459/jOxkwo5B1oROQeK
kiXnsH2t/fu5/vWRPwa+6HivY6ifk+ucp4xB5/Q4epa4zjm6F2hfp2sQXV/4
15WiOp3uPdu2hSrqIx737ADVxez1RFI7bJ/6EbhnS2j/tfmE2oLq3OWmq87g
ruV1vW2fS6F+sbqH4MYO0zWTxgBXncSnc5t7neoHqhPpOe3uXsnhhx8ezav3
0zWArjXtdZiuW/bff/+K+4mO7vurbq5xt/3fSnVtXRfarEfXS+rbrGfI+9dk
aieg+xz+NYK2D/cZ/OtA0bMNNI6evZ+kdVGbA3svztK9NLdMZQH6/nX+duPe
6/W6ZxX3mZ08cw7H9oeKyznScDkH2kMjcw71V7Jj+fvPA7a039p5dYyyVE/Q
sVljLtr5/P5Sqkspx7N1Qx2PNE6g+n3EPbdD27tbnr2XLGqn5KbpXqelY52b
5t9b1T5t11PnpLSU69hnuehYreOLPqtdZlwGqGdUqu6nNlh2XtuOTcdR/TZa
f/XhcfPE1Tt0DFS7A3t/XEXnSP1d94ftsvWsW/u+tn2B5X8W3du3dI/fTm+m
nEP3MnSsT1PcNq/jfbV9QfuSna66uGO3ZZ3DdJ2i58u6v6k+qDZRPmXVdpm1
xjTTuVDnXDumr4rOtfo+tE/a84rm17Wcvn8/m1PbAp33bR8bZW06dyqf9rcn
rZ+eMa3Mx1J/E/dd2me9OLqe0nlP7WBsFqprNl0T+WODiHJ2+734z3HVvuqm
6TrAUr9K+1o7lkgt2l/tmLHKV/V7PvPMM1V/p7T7q3IfHaPUPkjtbNx8fv9n
HQN1Lat7hP7vpvxN11F6P/s8aF3bueUljcclOv7az2LH7hGtn5sW93ta5Byo
BzkHipI251BbCDv+vuqSjo73Onfa43JcZmGfBRhXdD707x/pmWtJ9wxd8cc6
1/WorR/HFdtfVtS/1U6Pe05cHPXbteck3YcXnYvUptT9Xf3Q7XgL9nmK+ny6
vxK3nrpu8u+v22ed65zkjy/mntOhdhvu+jCp6Jxqz5vKaez90LiivMC2p1HG
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
Ra655ho8B1QaPEdjWvEceobRyjU05HP4OVGOOOKIOO/D+w/VGdXrP/nkkz7r
Uo6IxqIccsghqb8ffvjhfTzHdtttFzt0v36L6qDqfRdccEG/3yPQjuf4+9//
Hh111FF9QvU/NNbmlltuabp9g2G11VaLc10Uv/zlL1PLttxyy2TZT3/60wGt
f5111knWoXyYToLnAABoDzxHfuA5oB3wHOUDzwFVB8/RmFY8x1lnnRWNO+64
mfV77DwqwXNoDtiA5pidf/754zlQPFdddVX8+kcffbTPMtUxlRvZe++9k79p
PIzGynjP8be//S3+m7yJRTU59PkBzROjvr6fD1evy2q/tOM5NJanv3GBqoGq
2qidRLk0k046afIZO+ywQ2p52F8K1Wm1aP7g2WabLY4FFligT/0Uob/Jb4R1
bLHFFh3dfjwHAEB74DnyA88B7YDnKB94Dqg6eI7GtOI5lFux8sorx/O2brPN
NvG8KzvvvHM099xzx/8OyHPITWj+14033jjOxdC4ONX/VH/WI5eheWx1Pzjh
hBNin/LWW28ly9daa634M3/729/G81PNO++80WKLLdbHc4jNNtssHjOz3nrr
xTkfu+yyS1zv2dYEeeyxx+JxMHPOOWdcu1Tbt9FGG8We4J577umzfe14DtVx
bqUGkvaP5qDpFBrPY9d/5plnJss+/vjjeJ+EZdovFuVmhGVLLrlk5vo1l41d
v3dJgwXPAQDQHniO/MBzQDvgOcoHngOqDp6jMRozopqcN998c9PXKS/ilFNO
ia+lys9Ybrnloj333DPuZwfkOeQ0nn766WjdddeNcwRUA+jOO+9suF7Nta25
TjTvrLZD7w2on665Wn72s5/F947TTz89rrOh17322mup9Xz33XdxvVPV6tDn
qp6Iapj6sSLyFaNGjYrreai+qlyKvtdg8jk0d611AdqGDz/8MA59H+Wy2OUX
XXRR033dDvp+4bMU9vv+4x//SH2u/Y2Vp6G5hMMyzZ3Tyvptfkwz5LD0m/QH
ngMAoD3wHPmB54B2wHOUDzwHVB08Rz4Ez1EVWvUcqs1hfYL2g+WAAw5ILR8z
ZkxquVxRmANG8fLLL6eWayxKWHbGGWeklmkcTFimHBo79iTUeQ0Rclu23377
2O/YZXJDYT2aRzjwl7/8Jfn7hhtumMytI6699trUdsuDqBaJ5r7ROpWLo8+x
OToePAcAQHvgOfIDzwHtgOcoH3gOqDp4jnyoq+dQ3oh1BldccUWyTLke88wz
T7JMY3qU69DoczSuxc4/48ee6LUW5dWEZQsvvHBqmcbkhGUzzTRT/Dfl79j1
ZYXGGgVWXXXV5O8ap2RRjdOwbPLJJ4/nx8la3xprrNFw3+E5AADaA8+RH3gO
aAc8R/nAc0DVwXPkQ109h2qD2H69aoistNJKcf0L9f/D3yeeeOI+uRzi17/+
dSqvwuLHnujfAeVuqN5IWGZrpQh5ibBMeRXioYceiuuKKtciLJP3CPOpKFQP
JTDddNMlr1O+iEX3cbttWo/GAqnWq/275s0Jcw978BwAAO2B58gPPEe5UN6o
xkKH+Oqrr4repBR4jvKB54CqYz2HrgUHH3ww0YWQ59BcK0VvR6dCdTZa8Rxy
E83yI0Jf/+qrr858v2qxhtf5+Uzs2BN5BN3jA88//3zqM1S/JKA5ZDRHTiO/
p/lnG+WBBF5//fXU+m0uiXJS5LTCsvHHHz8exxLQeWbf6+e4CeA5AADaA8+R
H616DtUik+fvLzTPHAycG2+8MdW26K9GfN70iufQPIWqfWfj/vvvb/j6V155
JXr44YfjsHX5egE8B1Qd6zkIYiDR6F7q+/uauyXM1WpzIRR63d133516v7yF
HUdy8sknp5bbXA/NEWu57LLLUuu/7777kmV6zmGXXXfddan3/uhHP0qW+TyQ
gLyFXYfNJXnggQdSy3bbbbfUezXvTVimsTqNwHMAALQHniM/WvUcuue30pb4
4x//mOPWVw88R5qBeA7VWQt11GyceuqpDd9jn/spZ7eXwHNA1cFzEIONRvdS
uW37ur333ju1XPO82uUa42K57bbbUsv/+c9/ppbbXI/1118/tUy5M2GZr+uh
+V/tet98881kmeqc2mW+tmlg9OjRyWt8Lon/Xt7vzzXXXMky1fhoBJ4DAKA9
8Bz5MVDPMXTo0Mz405/+lN/GVxDlHCy77LJJvP3220VvUope8BynnXZaZjt3
u+22a/ieaaedNnmdarP1EngOqDqqY/Duu+8SRFuhsR79eQ7Nd2LvE5deemlq
+TPPPJNavtpqq6WWH3nkkSmXYNtRmpPWvveII45IvXfllVdOlmmuX4utGaL7
k0V1Uu16lZuRxZprrpm8xueSbLvttsky1fSw87zoO9gxM5pvphF4DgCA9sBz
5MdAPIeeO+SNnnMo1+HPf/5z/LyklXndA2rvXHnllfF7NebVo3aM2g3KRVGf
sT+3oHpcjz76aJxHeu6558br1japrnojNA5XYynOP//86JJLLomfAb3xxhst
fwfPZ599FuegXnDBBfE61b9VHfZ20H5Ru0Tv1/dphbJ7Dv0GNp/X5hMvueSS
me/RczLbZtRztP4YO3ZsfKyojaz/2mdtraA2pfKfNeefH0+j40vzHGqZXmPb
n1ngOQAA+tJKHdKdd945df3Xtd3i8yp23XXX1HLrI/SsJ6Dr9tprr5167803
35x67/Dhw5Nlvq7HvPPO29CtqI6KbY/5+V8CM844Y/I6zaViWWSRRZJlK664
YmrZHXfckdpu3WMagecAAGgPPEd+dMtzqB9u52JTfYRvvvkmWS43YO+j6msH
7LzwqrWlMaZTTTVV6vWqBSJ34NFzifCaww47LDrhhBOiCSaYIPnbE088kbxW
93Ktxz/313MMzeem+eQ8119/ffTjH/84M19AfWr1yy3PPvtsNGLEiMzXKzTu
9d///nfyerWDVEc9hOpGWFSXdJ999onHEPt1qU6a2mza95avv/469bqzzjor
OvDAA1NjkhVqkzVqLwXK7jn22muv1P7Yaqutkn9PNtlkKWegfanaa41+G4Xa
mha5LV+jPhwzG264YfT+++/32SbVw7PHyD333JNqYyr0XvkN1fIP178Qmnew
WT1aPAcA1AU989C9W/f2o446KvOaG2jFc4R7mkL3A+VzXH755fEzhJ122inV
ftByP77D1rEIHuS8885L1QkNofFXAd3b7TJb10PfUe2ssExew/J///d/qfce
csgh8TYrNG5TvPfee6nXaF8F1Caw87X4sTp+nl3VM20EngMAoD3wHPkxEM+h
Pp3yEXzofmdR/13PN8L7Qr1w5TFMPfXUyd+33nrr1Pus55hhhhlS7Qwbs846
a59ttp4jyy8Ep6D+qu/j2naFQnmkNkdC222/j8Jvm9Zp0Tr8Z/jPUb830Kw+
hzxRVtvJxxJLLJGqje49R7NaK/3N2Vhmz6F9Jbdh224XXXRR6vtpXHPAj8vO
ik033TR5vXJ3+3u993nCHs/yU762XQg5Ku+eQjTLMcFzAEAdUE6krpG6z4b5
WJWP2Yj+PIe8t503tlmo3aOaFp5G9wW93l7rZ5ppptT7VLPdvv6uu+5KlqlN
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
66H3hKp72yp6rt1uHprOg8GM0dNnqm+WhdYrT91K+3ig48K0/kaf3wpq4371
1Vd9/l5Wz6F9OcUUUySv1XUl1EdWn0aOyB4//vrZCO2HZseOvG67ddb1euvz
N95442S7NG6xlfe3cmzavqzaXx7lBuk4CdHqOaLPbievSL+N1t/Oe3Ts2u/4
6KOPpn6/rDGfoqyeQ88R7Pa3kzujY6ydc1nzADR7JuXbA8qDagUdd4OdU6Dd
9+vY0fdpFb22lZp0e+yxR6rtE45N7ef+tlF9+vBe9fWbEc6xZujz7P1N52o4
J3UMe3/b6NgfCPq+ja4B99xzT+pzr7nmmtR7p5lmmmSZ8syz6PY1Bs9RLlrx
HDrmbN9DLk39YuWD33vvvQ2vdTpP7D3eOjmhuTrs8WprmFrPoePWegzb71B9
xKy+s0Iew+I9h+/72NDzBYvyR2yNgkbhfX6VPIf2p/0ucsbbbrtt/Hy9UQ6N
GKjn0O9uPZhiIJ5jpplmavjZGn9o0Xdp9Fp/vPS65zjjjDNS30fjjMP/63lt
QOOCwt+VL+ixz7zlKizy5GGZ7pnqZwV8juYss8ySud/lu5ZffvnMZWoX+TmM
1lxzzWT5xBNPHEfWe3XPsH0mtV10fNnX6Lrj3+/zJNV2U+5mWO77x4p33323
z37Dc+RPq55Dntz+fuuuu25mTpevb6Nnaha5cY1pCaHzUfeW0F7RvVTnl89P
DOgzldukdqvavfacUD3orDaX8pbC5wUvp7oHwU2EHGDlLq6wwgrxttj2rO71
+tuOO+7Y57hV30N5K/Y7a3x0+DztD9uX0XVZeQHqv4c2hD5rwQUXjNseWf0e
+Ve7z3TPlHueddZZ4/f7sdqirJ5Dv7/dV1tuuWVquc57u1z3vIDuTXY/KJ9V
Y1tUz0Kv1XFj0bGlfurUU0+drE/33h122CGe9y0Lja3XdT+0bfQ8Stdw9cms
69XzHY+OTd0v9QzBH5vHHHNMn2NT9wJ9D9uW1PPi8P3UVhKXXHJJ6nvb67t8
sV2m/A+dHyGPXevWOIxG7Sz1N+XBdfyFZ8L6r8abNDtu1JfSs47QDl1ggQXi
30f5N/b30/Uli7J6DrVh7Pb7sVN6tmP3t65TOvYXWWSRZN+pv/vss8/2Wbfy
f3QNUfvAPkPRM0G9R79DQO1Ie99WyAGGz1UdpICOkyWWWKJPe1zHoH4XHXtZ
1xU9dw3r0+fpuNJzlRlmmCFpK+j63cjVaT/KQ6i9Gq6X+kxdj5TfbVHbSt7B
9n9Ce0XHkc6bLOxzV/nAJ554Ij73wufpGqjj3aN+ut3HWc95lcOgOgPhOqpQ
u0X7XfNmevxzvdD2Dqj/bpfreZJFfQJ77PjjXn2lsEy/jUXfsdE9xfZZFSEH
X98t9KFsezWsx86P4K8xth3orzG6B+r3stcYtY+b5bfhOcpFq/U51DbK6iso
dC7r/pp1ruyyyy7J62x/Vuj+G5apHpXFeg6F+kDyKsrd8M/QdJ068cQT4+um
zWfyfS7vOXRd0Dp1LVG/ebLJJktdi+31zs7fIL+y3377xd9X9Uj8WFP5xkCV
PIeuBZpPpdFxoHNQnuK9995Lve+QQw6J71P2tfr3PvvsE4fyYALWc4R9rWNP
v49eF67x7XgOhcYZ6hm7P45tTU3dK2wOp9p8Gneo40N9ItuXVfS651Atp/A6
5Ubodws5uDqPQtvYPrvdZJNNUutQjpbNsfB+0I7v9Oe/z9HUea3fQ23HcD23
x4GuF8ol88egz5e0+T8K3avUn9BYKbWP7DLbttU1xH7eoYceGh9X8h/W1yg0
piWg+7k/3hZddNH4eNVxqmM6CzxH/rTiOdT3s/cCnfdZnkroGZb93f3zaY13
sst9XlkIHbP++Zr6cGoTN7reKuTcfP6F+tL2mqw+nH1PqFdjr1GNQg4jtAH1
X9tHzQrrQdX38eN+fOg+7/sk6nuE5epHyDHZ92SdT2X1HMoNs9uu9pZFz4ns
cvXTAro3hr+rjaW2rX1tqNkpn6B+W7P9rL6NP4bVP2h0P5dDse0s1eCy6NhU
7b5mn6k2hT02m7Ud7O9m+yo6fi3qN9tjw+ac+PPMIy/R3zMX5Wh51NbLeq36
xfKE4d+6dzZ65ldWz3H44YenvpN/Nqj2dlim46FRP8DX0lBfwvq2rFAOpJB7
sm2IrFCfP9Dfsa5Qn9fz05/+NFkuz6V7dNZ7w3llUVvFujwf9rmQaGWsmn/u
63O/5IZ9mzNEqGMT0Hhuu1z9eIvaZT5H2YaOXXkNi/cJF110UbJM9yo796bO
K5+vorZzWK7f19Yr9WNPvAuwNWN8nVF7DIY8M7XTsp6F29BvHrD9S10bLbZf
2uwao3EGjcBzlItWPYeOS91jml2P1AbytTs0nt7eL3VfF2rb2Pwin39uj0N9
ps0X8NcnPf8J2GfPPnfLew7vJ+Wy7fLQj9U93X5vPw5bz6Xtcp0ngSp5DiEn
LCfV7Hqia16ooxFotT6H9xyNarO14zl839z2Hez9Se1V+z61byzq92YdH1n0
guew+yGMYwzHgUJOwee1Hnvssal1yPM1+13tswP/O+y+++6p91rfpbkt7DI7
RlvezC4bO3Zsskznql2mtpR9Du9/Yz1rFnI6Nm/D5+Lrvm7fp7odAdUKscu0
D1vJbcRz5E8rnsP/nsoZbIR/HupzDfz1TPdIOV4d337ss55DBpQLKS8Ylsm/
6txTroZcoH2frw+pvrK/Jmvcvdpl8inBw6sPo+1VX0ftZj3H0jHpXWCoLa57
sHL4bHtZ9z1b4z/ks+i6YZ2x2ovbbLNN/L21LXb9vs1ur0EhlMOg+7lyBfT7
eMrqOeyYP4V9BqJ7lv+utk1ix5mH0PMe/V3+SHWTxGabbZYsl6/WdVXHia6n
tnaEnjkF1B9X39T+jvJJ6uPZ/mAI3c8Cyg+yOWvy4LqO6jOth1Dob0LtR/V7
fV9RtQbDsROey1rHrW2yeLei7dZzf/939XlsHojaiPaz1YbUsa59aD2g+pXW
N3qPqftZqLvunV+zORvK6jn0DMB+B5/3Y5/vhZDL1H3V9wXsPC12vboeqb2m
a6XyHPT8Ub97eMZ0//33x79/qGGvUJ/BXld0TAfkEJSnpn2qPArlEegZhc39
1XFvn9Hr/+36FbqOyZ/465Gv6aD+vf2u2nb9/rp+6vjUZ+n/A2pv6PzU9U5O
WceYzgO1H6238LVQ1Ffy+1p5MzonvevV+i0+r8i2idQns8vUf7n88svj6649
17yr0vbb98m76NqjOccmn3zy1LVd11+P9e3+u3q/68f1Wh/p77/yFWFZaL/r
WVd/9yY91wuEnDiFnsVZfP9S69G+8dcYeZpG413wHOWiVc8R0LmoZ5tqH2Xl
g+tvfvy6fQ4RcmbtGAjlctl8dmE9h38ObM955XJYbBvQ+jvhPYefG8bnkIY+
ncbS2r9n1WG15411z1XzHELXce1L3XvUxsjyqP655kA8R1YtiEA7nsN7BuWv
hWVq0wX8OA7/Pl/Popc9hzyjPX9D7pPu6eFvcup+X/r6AzZ3Udd9+zuovWjb
B9ZjCJujqWPePte1+T96xmHvJ9bn+2doul/a7Q3t7IAfT618eKFts39Xe8Te
I33+qfZxwI730THra6c2As+RP614Dp0L/V3vA/Z8yWozqU1o20u2Pah+nb12
6p4XsPcxHeP+3mzHFNhnlzr/7HMy/b99tqdrdzjPGj179vW4fI61vTfLO2Rh
X6N2sPXe6g/Z9qj93sKPM5T/sa4ya7vL6jmUb2O/i/6tPqD6j9YDKdR/Uvs4
YJ+H69jR81GbH6H9oP6KXYd/XmRz9uxzUZu7prB5DGqLhfnzQtgazHad+m1t
n0romAjL/Thee39XX8nnIqn+tf1c20eQO7auQueOfoeAfcalCL5C+8k6RfVj
rQPx/ctwXw/z6oa/q79uayT4PA/7fMtTVs9hfyuddx5/jNo6udavKWxtd+sO
1L/3v7OuU76+m82NaVanptF1y+cfWO+iWlx2mfrRIf9cbQvrSHRtDeh8tG5C
fV2fr6x5TZTzG7DXWI/OB3v8W+Rs7DaqTW7X452ovVZYv6j1huults26Tj9v
iZ7X2HVaz2XrfTQKuSM/Zidg89z9fCb+t9KYvIDGg9hloY0mdN5av+ifRa6+
+urJMrnYLPT72fXbZ2i+rrCuMcrJC3jv12hOXTxHuWjXc1h0fVD7wo9Ht88s
hH3mq/uU8tRsbWA/plnYdpLG5lv0XDgsk3uz2PPd5oAK7zlsHojw7Tvlzwr1
lezf1bbwWMdo/UoVPYdH7Qn1Bez9QP9v720D8Rx69tiIdjyHH/suFx+WWYdt
2yIKP6+IxirY5b3sOfxYiz/84Q/x39XGDW1J9ZFUC9++zt/jbY6xP9/872D7
Az5H099/7TNp/0zP3n/9+e/HjPrnU37umPAs3I+T6y/sGD053/D3RvMKZoHn
yJ9WPIfNmVX4cccWO7ZAYeu2q61px7/43GZh+xEh/1DHrPUA6n/IvdiwuZDq
bwR0XbXbo+1rhPKM9UxPz+10DOu8UvhxmP5ZnfUQWfPx6T5q/WbWOBPbv1Je
WUDf3X62nEArlNVzNKsNZUMu1d4n1D+xy31dj0CokxCu12pL2ePE1jm1/Vjb
D82ae9HOlWrnbtDYF/tcPOvYtHUT/Hbba2VWDVJft9o+59UzW7vMjjkVtlab
tjng+3LKRbDb68fUBoftn4OH+iEB3y9tNldOGT2H7vU211ptQIufn93XKLVj
0tX3tM8i/LgNtSuV/6/8GN+GEDq+rFOyz9496gcrf0g5Hfotw3XLnms6F6wP
8b+lr3Fhr0f2Om2v77omtzrnkHK8lXeq9pHy48I22jwF74htTSj9Lt4fqm6+
/Q7WK9ncXDtPjc8nVDvHHvt23ixFmEPR9/flYLX9ut74OnVyAbfddltqW5W/
ZR2+aklZbK6Hb+erTWbXb2vo+fub9ZzC+iqfPxzwOcj2ebdtHyjU/rXYvqeO
10bgOcpFq57D1/qz6HmRPTZ8Hq2uYTYHV7lc9nxX3prHz7disfczmzsh2vEc
NhdT+Lqo4RmHz7EKue4BtRHsNdqOl6mS51DuX7Na/NYfKOyzj4F4jkbPCkU7
nsM/N7COzXoO326xz+yFH2vdy57Dn7P297D5UvZel3Vs2Dwm5clYbN6M+j22
Prl3irbP6cduKq8+4Ott+WdodtvV9vLHq712hJokwuYuh7lYmkV4zuJ9zV57
7dX0t7HgOfKnFc9h54NQ+HruAf32fl4em7eg+hR2mZ3DSOj5tD3OQ7vM54j0
F/aZlp0TS+HbygFdk3yN50Zh2/b+WZgfxyZ0f7evCWNVLTbv2fYrrK9Q+JzL
RpTRc/jcBB+6Juoep3uen8/erl/hx84L25ZuJUI9BH2W/bvNuQ/Yvoyeswf8
mK7+wq5b54v8Q1immo4eXwfJPuf1NcJ9u9E+a7Lb3KxWfVaEOcHUrw9/k/v3
9xL/XMSP1W302rJ4Dt8etnVBhW+7+vaOrQ3u55bW8dtojLvcr5+z0efUNMqh
U25XszoTIXy9dFtzQXmsdl55+V7bJ7e1aGy/xfc1stA1XTkbvoZgVqi9b7Hj
1GyecdZ30L4NefM+z8l6Zetv+gs71ss7RTvmTcgT2eV+LL+vYerrvtjaHr6u
+4EHHpj6njZnwudcBy8jdK2wy2weiMWeGwr7LMy2yRT+Wad9/pZVAyiA5ygX
rXoOuVLlN9jjSqiPb/uNWceGsO0v28bJmr9B5OE59Nyu0TxqijDvpPr3dr4r
bbPtV/vnBSEPRFTJc9x5553x/Uz3KD+nlpyGvXap72fx82E3cgRFeg61B+z9
TjmKwdXov74mYC97DvvsQD7AekzvQBrdj+QcbFtGdbsDag/bZapB12gbFbaf
7+cNs8/Tfb0t/wzN1y+1czhpvTbn0fp+mxOq1zSqO6l12OPJ+xpbt6M/8Bz5
04rn8Pnv/llUwPdFQz8y4H2Ff+blx8GFmvM+J0nt21CzOSvs/Mj22iYHmYXG
Vdl7sGoOqH+pY1e5itbz2Pk/hB8XlnVts3MjKmxfVSjHu9H90rZB/Ti4ZpTR
c+j3tt9T7XeN/1CobZ01P25AY/LD++z8khZ/ndRx2+w4CXmouic0u4bq+mb7
adbd+tpIam81+0zb9/dzz9i6hgE7R7l/zmtz/tVXtTn9Pp/dbrOd81u5Js22
VxHGUNv7va8vIKwHkTNvNjdlGT2HrROp8PkqNn9Ax4N9biXno2f8YXnW/J06
zjSOIKt+p85tu12+zZHljPz1VvlA6lfouNYzKjsO1+a4CVtzwddQ8n3ykCOg
72hzl9Q/6A/fh1b/X+eXttHnlGg8j92f9lmpdyDC1s2xY/l9DkKod6R12nNC
/aFmx72thefrZ/uxiz7fzHpF4cfF2Rwefx3QcWaxY098H8DWoLV5ZsK3+xu1
fW3tGH+PtPnL6vPZ/qEfE9osVxLPUS5a9RzWoWpfyz1qX9vnueHelHVPlj/1
Yz4VjZxbHp5DofHTeuaguZvs35WfZZHjtcvVp1dNNeXb22uJ2o92XGDVPEf4
HvIB2r9qW8lr+voF/j6j39/2e9Xe0PVM1xw7NrhIzyG861KNNR1/ds6REL3s
Oezx7veBfqusOt+qqWdRO9Pme4Tzyda3C+Hzz20+qPcs/nmwfdbp2wqqtxHI
en6q65P6DPrN7bbqHmnPRV/HSz5Px5jqkag9ru0Nz0bs+3z7LGt+vUbgOfKn
Fc/h5yBQ7UdfP0p9dVs/QddDn7fg+/u+/23nUdQ5EHyAf6adle8YsM8lhR3H
4OteBPxzaDu2XM827X1azwIsftu87xa2j67wc47bOZj0vdVmzlrm79/NKKPn
0LNnux/8HObNsOPAlfeehY4Lu347ZspjjxP/Pp+fan2CwtZ38edG1jOtrM8U
vp+ada20dTSsNxc25847Rf+dbC6mHUOhPOJGOanq09h2hK23rjaZfZ/Gwtp2
n28vesroOfy8JT6nyF6ffK0Dn3+RNU9NQPd2tUP8XC3W+9r2tR8DE7BjLNQH
sZ5LbSy7bvWzA+qP2Hu/rWkq5Jfte8P1KMsTZM0tbn2lnV/Kj7fX/cZ+jm0/
em/gr7s+z832nX0Ogp0LzvbbdE1phL6D3Z++Rryf087nVajfZbHHltxA2G/a
p9ZlKnwNtTDPr8KPlbL3N59P4Z8PWC9nsfM++XukdaJ+DlD/XKJRXRKB5ygX
A/EcjULXhGZ9P3/uyJU2mtc9D8+R1R9TKK/O9p+Errt+Xjcf6hv6719Vz9Es
5LqyxjH6+dFD2DG8RXsO9ZX9+HSFnmf49ruvEW0pu+ewdQGynsX4OuwKPxZS
ZNVjD/cP67V8G7xZjqbmOgnL/BhIm7vpn6HZ2saKrPkKFHKROpYtGo/aaM5P
G+rbWmxejM7/rHZQI/Ac+dOK55CntnU1FHp+Fua11j3G1+DOyvmwed3hOFdb
SbVdfC172/b2eQB6VmZrzukeono6apPZOVr8mC6bJ2Hxzj7UWdNn+LqZcvkW
P95b61J7T88rg6v0c9Do/q37qcL3dfz67fxMqpvQKmX0HHYst66Fft7gZliv
7vsQATkp+6xc9277HFyfpzHEalfY9ryfO0q5ujrm5KM0BsqPN7Bjn7KusfbY
1L1Wx6baZb7utL1/+melQvnp9rPtOAq91ubU+vqmvt9lXYJvd2o7Qt9UfWCd
j3L46kPYPqI/R7Vv5GaUX+jnSlK/rhll9By2BkuYn9Nixy75Wgd+jK+tdRfy
z7RfQ7tMv5+du0a/s/Wb/rqg3z5cV0L/27bX1S4IXkauzc9fbe/v2g67zOcR
2faGzxGw+yjsBzk1nStq48lHWH9p7wuq+6uxJVqfrk82/0Vh89y8A1R7U890
dO7pnmPds/oHdq4Hn+dknzNbVxdqUofvp99G7UNdX/Q8yJ6PtiastiXk+inP
Q3Vx7H1Gjt/mFAo/VkyfoTa7r32lsH7Nz5dn76v+/ubHCHs/q/M1HEOhneiv
McpPC+g4s8/3/FgdPybU1/2z4DnKRaueQ8981KZS202+zebvKLdVz8Ftbb4s
dF2z4wJ8bXqL6hDp2qXw7R3NbxCW+XFhul+FZd5f6lwMyxRq8yp3LIxT1vms
XLhG30PXAZ2ruodbz6s2ifqKWWOh1X5QOyJEs7kYyu45dP1Un133MHlVW29M
1w7d+zUvXladKaFrs96r5yt6bfgd7PVKv0f4u8+Fs+j6Zferdeqqs2J/Z3+f
V9s6LMu6XsgD6zjSd9T4e+0b3Te958kadx4os+eQy7H7x9foF3Ls9jUKP2ZN
yGepHxOuB9pfuj/L/9v3+n2gMUFZv79Qnk9Y5n2+rhmNfjvlZNjP1D1Tfb0w
JlzPdPQswdbvssh16Nmm/KjN25YX0bGg+54fZ6r2Wfi8rFzTZuA58qcVzyFU
k8PPG5kVOu6zalT4vG5bj8qHcqBsPpPe6+v4KbQ+71fs/Ed+TgGfhx7Iqv8R
ttXPr+BrWJ155pmZ38H2W/VfO89Mo1CbwbbJ/fxM9plsf5TRc1hf7ueBbIav
n9Fsvh8/b61CbXWfX6m+vcXXH7Rha2jYuRuEjs2seeWzjk2/X+xzIlsrMeDn
/LbHr6+b7fPo7fNjv83ygr6PqXao+o52XIIfC+Pn2Wu0jxQ6L5pRNs/hcxx8
/oDGbdrv5/OubT6m9qXN3VH+mz82fH6o9yYaM5G1n9W2Dvj5XXTtDe7LXrd0
77YewD8T83lEtuaCra0n5Akb1RnJ+iw/tln9ch1Xep29B/h5Iu3cPdqf/ngN
od/M1+qxOQj+ua/q+vpaIdomHfv277peW7Jy7xt9f/UhPX78TgjtS1sXyo+L
lEO0r292f7N5ZsKPwwqha2FwO74Gox0T7ecZ8LVqrfe068wCz1EuBjrfiu4j
apf4fN7+3mNzkrLmXC4KXaua1Vr1hO+vZyqdouyeIwt5Uu2HZmONewndr32+
bcDmCql95OdPtpTZc3QDHQedPBc6jY7RZvclj47nbh/XeI78adVzCHlM/zzP
nv9qa2h9Wfi8bj1vtnV5QxtRzxKz8mt17MnxNapnp7az8o8++OCD5D1+TJfP
Qw+oL2fnSQrtT+XV+XHVdj5RofNcuV6+7e/nGdL2Z70u9F3UL/TP830ei8+5
akbZPIcfy+2fxzTDz+/mn5VatA81vj1rnGHoM2mehFBbM6DnLT6fVbkhOk5t
HYAsH6FjTr9ts2NT/UU/psm2/bLm4JFjtuuxz4R8/VM71krYfPaseVyU52Ln
nvGhfrJ/fiuUh2h/x7B+f540qqseKJvn8DVybO1N4evw+HNRzzbCMps3rbaT
d0D+2NBzDT8uRe/LypfWuOiArmd2zEFYn/ow9nrma6k0q7ng67pk1VzQsZfl
qXVu+ecwuo/71+rfmufNek89y7FY76gx8dr/Nn9JoWeD/tmaz3Oyc4wHdK2y
554PrdfeC+UFG702hK43ugY0arcob8LWcA37Qe1iO/7Mz0Hm6//YZ6b+/uaf
K6utpjr0/p5j67HomYRdZnPRfE0Sm9sl7HWx2TNYgecoF4OZV7ZV1BbU+fnb
3/42+Syd8+30O+pAL3qOqqE8BLlsja1XzoiOW92j9OzRXj+zxnpY6uY5oH3w
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
Vlml6E2BAphnnnni33+FFVYoelOgTSaYYIL4t9t2222L3hQYAEcffTSeowPg
OQC6A54DugmeA7LAc0AnwXPUGzxH74Ln6G3wHJ0BzwHQHfAc0E2s51hsscW4
lkIMngM6CZ6j3uA5ehc8R2+D5+gMeA6A7oDngG5iPYdC88cB4Dmgk+A56g2e
o3fBc/Q2eI7OgOcA6A54Dugmt99+e2ruYjwHCDwHdBI8R73Bc/QueI7eBs/R
GfAcAN0BzwHd5vTTT8dzQAo8B3QSPEe9wXP0LniO3gbP0RnK7jkuvvjiaLvt
tsuM0aNHx/3HN998M5ftzuKjjz6Kt2PuueeOJppoouR7bbjhhvFybWf42+ST
Tx59//33Hfnc//73v9EZZ5wRzzs0wwwzREOGDInGGWecaKaZZoo22WST6P77
7+/I58DAwXNAt8FzgAfPAZ0Ez1Fv8By9C56jt8FzdIaye46VV145NQY9K3Qu
H3PMMblsu+XLL7+MFlpoocxt0vEpFl544eRvyyyzTEc+969//Ws0/fTTN90n
ch777bdfRz6vV9Ac4WFe8S222KLozcFzQNfBc4AHzwGdBM9Rb/AcvQueo7fB
c3SGsnuOH/3oR/16jhDXXHNNLtsfuPDCC1Ofv/fee0eXX355HK+//nrsQbT9
oe+95557Dvoz//CHP8QOw37uj3/842jxxRePP8PvkxNOOKED37T8fPrpp9G4
446bfO9DDjmk6E3Cc0DXwXOAB88BnQTPUW/wHL0LnqO3wXN0hjJ7jjfeeCPV
Z19ttdWihx9+OI4bb7wxmm+++VLL11133X4/+7PPPouefvrp6IMPPshc/skn
n0TPPPNMNHbs2Ojrr79uuq611lor+eyf/OQn/X72YBkzZkzKcUw66aTRJZdc
koyF+eabb6KddtoptU8mm2yyeIxLK2ifqK+ksTit8L///S966623oieffHLA
Y4fee++9+Pf4/PPPU3+XI9Lv/9xzz7W0TXfddVfqe1933XX9fvZXX30VH3/a
fm3HQPj444/j7c/ax3gO6DZ4DvDgOaCT4DnqDZ6jd8Fz9DZ4js5QZs9x/fXX
Z44FCVxxxRWp5UsttVSy7JxzzolWWmmlOFZfffXonXfeiTbeeOPkvN99992T
13777bdxf2GRRRZJeYShQ4dGW265ZfSf//wn9bknnXRSvN5JJpkkea3yNsLn
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
VKbMRO3/797/63l/az9nv+85X+e8553u+7rWxffs6dnP3u/ez/rstdZDnght
IQ4nxX7EfeT5PJE33nijeOyxxxrrUiukWZti37W6vzhe2t+ExHKAOoe0G3UO
EWkn6hyDjTpH76LO0duoc4wN3ahzSHuIdSzWWmutTjen71HnkHajziEi7USd
Y7BR5+hd1Dl6G3WOsUGdYzAg3iLmm1DrQ9qLOoe0G3UOEWkn6hyDjTpH76LO
0duoc4wN6hyDAXOLxJoUzWpwyNihziHtRp1DRNqJOsdgo87Ru6hz9DbqHGOD
OsdgQM1R5n1Jxvy70l7UOaTdqHOISDtR5xhs1Dl6F3WO3kadY2xQ5xBpD+oc
0m7UOUSknahzDDbqHL2LOkdvo84xNqhziLQHdQ5pN+ocItJO1DkGG3WO3kWd
o7dR5xgb1DlE2oM6h7QbdQ4RaSfqHIONOkfvos7R26hzjA3qHCLtQZ1D2o06
h4i0E3WOwUado3dR5+ht1DnGBnUOkfagziHtRp1DRNqJOsdgo87Ru6hz9Dbq
HGNDp3WOHXbYodh99901re9ss802U+eQtqLOISLtRJ1jsFHn6F3UOXobdY6x
odM6h6YNgqlzSDtQ5xCRdqLOMdioc/Qu6hy9jTrH2KDOoWntN3UOaQfqHCLS
TtQ5Bht1jt5FnaO3UecYGzqhc7z99tvFa6+9pmkDY++88864/LZksFDnEJF2
os4x2Khz9C7qHL2NOsfY0AmdQ0RERo86h4i0E3WOwUado3dR5+ht1DnGBnUO
EZHeRJ1DRNqJOsdgo87Ru6hz9DbqHGODOoeISG+iziEi7USdY7BR5+hd1Dl6
G3WOsUGdQ0SkN1HnEJF2os4x2Khz9C7qHL2NOsfYoM4hItKbqHOISDtR5xhs
1Dl6F3WO3kadY2xQ5xAR6U3UOUSknahzDDbqHL2LOkdvo84xNqhziIj0Juoc
It3LmWeeWZx00kk9bdNNN135fFlggQU63pbR2qWXXtqW63zdddd1/NzaZTPN
NFN5/eedd96Ot6Vddvvtt7flvjj33HM7el6TTDJJee0++9nPdrQdd911V1v6
9+yzz+74vdNOW2+99Rrju8MOO6zj7Wmn3XrrrW25R0CdQ0SkN1HnEOlepp9+
+sbvU+u8LbXUUm25zptttlnHz0179/btb3+7LffFxz/+8Y6fWzfYfvvt15b+
nXnmmTt+btrY2Ne//vW23COgziEi0puoc4h0L+oc3WXqHFqdqXO019Q5tOGs
33SOm2++ufjBD36gadr/Gr8HkXeDOodI95J0jhVXXLGMjdc6Y3PNNVd5Hdqt
c0wxxRQdP1dtZEauUXp3tlvn4L7r9PmOt1111VXjpnMst9xyHT9fbcLtpptu
6ludA9+u09qRpnWLHXzwwePyu5P+Q51DpHtJOse6667b6aYMNAsuuGB5Hdqt
c0w11VRt2b+MPS+//HLj3dluneMLX/hCW/bfzfzzn/9s9G+7dY4vfvGLbdm/
tJc333yzcY+oc2ha/5o6h7xb1DlEuhd1ju5AnUNy1DnaizqHDMeg6By33HJL
8de//lXTBsqoLazOIaNFnUOke1Hn6A7UOSRHnaO9qHPIcAyKzoHPJzJoPPnk
k+ocMmrUOUS6F3WO7kCdQ3LUOdqLOocMhzqHSP+iziFjgTqHSPeiztEdqHNI
jjpHe1HnkOFQ5xDpXwZJ5+BdNPnkk2ttsIknnrhxH0022WQdb0+/GnqSyISi
ztEdqHNIjjpHe1HnkOFQ5xDpXwZJ5/jABz7Q8VqvmjYacxwl7wZ1ju5AnUNy
1DnaizqHDIc6h0j/Mog6x+yzz15sueWWmtYzNsUUUziOknfNSHSOZ599trjg
ggsadtddd41jCweDbtE5zj///OKcc86p2Lnnnltce+21xf3331+88cYbbWnf
SDj22GOL5ZdfvrSNN964Y+0YLfvuu2/jPPBvmtEtOscLL7ww5J7ALrzwwuKG
G24oHnvsseKdd95pS/veDfvvv3+jf3fbbbem63WrznH33XeXY27u8VVWWaWM
1dx9992L8847r3jrrbfa0s5uYO21125ct1NOOaXTzSlR5xDpXwZR5/jyl7/c
6aaITBB+L5LRMBKd4/e//30ldmj77bcfs+PvsMMOxXrrrVfaL3/5yzHbb6/R
LTrH+973vpZxY+TIoa/i+44Vjz76aOMewB566KHa9fBZUzv4JtGr8KxO5/G5
z32u6XrdonPcdtttw8YTTjfddMX3v//94j//+U9b2jkh8CxL7Vp22WWbrtdt
OscTTzxR+rit+nnaaact5wDtRzi3dJ7f/e53O92cEnUOkf5FnUOk+1HnkNHQ
aZ3jIx/5SGO/e+2115jtt9foFZ0j+o///e9/x6Rtt99+e2XfN910U+166hxj
z1jpHMn23nvvtrRzQuhFneO+++4rtaKR9HG/1nNX5+henePGG28sjj/++CF2
8sknF5dcckkZg9RK4yQ+Z9FFF23Yiy++ONan05Xcc889ZXzZWmutVXzmM58p
z32NNdYo+/6ZZ57pdPMGHnUOke5HnUNGgzpHd9CNOscHP/jBcjzGd/qNNtqo
mGiiiSr3AWPbsWCkOgdxH9dcc01pvfxNu9d1joUXXri8L9AGPvvZz1aWcc90
Ooel13QOfOk555yz0o+LLLJIqWfQRnxC/KXDDz+8mGOOOdQ5xhF1jv/Pmmuu
Oaz+xru82b25/vrrN9abccYZ23E6XQW5fOgZrfqL2MgTTjih000dV77xjW8U
K664Ymk777xzp5ujziHSA6hzyGgYC52DbzWMmbBLL720rOHAO2OxxRYrv7vj
C5155pmVbX7729+W608zzTSN/ZKXnfaDPffcc5VtnnrqqeI73/lOub9PfOIT
pW9A/vpxxx1XjkfrIObgtNNOK/0d2rL44osXRxxxRPH2228Xp556auNYfJOq
Ax+P3Bq+w7D9fPPNV2y44YbFb37zm9r18cHTPo855pjyb6effnqx3HLLldsf
eOCBtdt1o84x22yzVZZx3vE+oJZH5KWXXiq+9rWvFauttlqjv7B55523vL/O
OOOMIT7wUUcdVY534n6/8pWvNPowjgOvuuqq4qCDDirtpz/9aW37qR2z0047
Ne69ueeeu/ThOc6rr746ZP1HHnmkcs/961//Km699dYyf4ZtMa7/008/PWTb
O++8s9huu+2KFVZYofjUpz7VOF981G222aa4/vrra9vY6zrHJpts0ljG7+hj
H/tYZTm+eR1/+MMfyn5BJ6GfPvnJT5b7uvrqq2vXR0fjWZP3L9tvvfXWxXXX
XVe7Xa/pHEcffXSl/5ZYYoni9ddfr1333//+d/H8888P+ftf/vKX8h5Zeuml
yz5CD+F5esABBxT/+Mc/hqzPfR7vezRE9MXVV1+9fLayH36vCZ7r+Cbs+3/+
53/KZ1tdPBc1W9I+eeZTT+TQQw8tt2Fb7vezzz679tyG0zm418htXGeddcrn
MPvjOcMz5+GHH66sy3PmRz/6UaMtv/jFLyrL6V/alZZfdNFFtW1S5/j/fPSj
Hx1RrBHvD3zHnPiM4J3dz/AO+vCHPzykb9773vfW9tlJJ53U6SaPGzFmjWd4
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
g0g872Q8q2NMXLJcUyNOkGcymgR6GrWceP/GuCM0iFdeeaWxDT5E1K5TzBPt
4n7g/Udf8A6L7YnxCeg0UYtBb4H4fsIYJzSDMUVcN4/7iN9oMNrFb4t4hlwH
4vkc2xafjbyv0YF5r0U9h99DrNuTP0tSv/AeI4aE4yf9iviavN8Zu8VvQ9wL
6RtFro3WGVoY8PyP4z3GKxtssEF53nFsQh/k34ziWDK1n3shxXPkcZWgzjEU
Yt5SLazc0O7Q1nkXtxoHTiiM+dCzsVa+N7Flab30zbQXIf6LsV9djjTPVLTl
VvXcqaGV1ie2aqTwm4nHit/8xpM//vGPjetITPBwqHPIaGhHfY4I3xbitim+
MzGczpHnBg9nW2yxRbkdcaXx79T5zonfL6LOgc45IcfEz01EnYMxVqu59iLd
qHPwDObdhj8Sz5dxVF1cCmOUkdSrw1eJjFbnQAuP2+cxwLDAAgs0luP7JXKd
I497j2N8rlGE+FzGT8Odbx4H0us6B/cQ2+WaGFpH/v1yJGPcaHG+BuaszGNG
6oy5HCK9pHNAjHfBVxjpfM25VoHvlBPnucD3SPvOt416BTFZcVmsBcz1jcvI
DYjEvq+LTcnzFaMP2kznyOsfD2d12kUeU8Czuc7vyemEzoFfSW3tdluMk2yl
c8RnZzPDb0YbqIN6w2m9XMOJeUcYcQ4pXjOPG8j3X1ePF/JnTqxRm9/3eV2X
VCeD76wxH4x4jQS5q+nv6ADJn8/rkuWabYQ4k7gu3wUSjBniM4H/j++lGE+K
HXbYYY1lsdYPGgcxcYn8dx1/87xz4zJ8Yt6rCfTN4fqdeqpxH7HPgPY0eycC
fl3Ut3h2cr0SeXwaeTwJzjMu41kX67tyPevGYuocQ+G73UieszxDY2zXu4V3
UowZplZUHehyza5/r4BWOJK5qzDGZHXxYNzLMS6SuvwjJfdtmtVybzeMDVIb
0M2GQ51DRsNY6xz5t9W89tSE6hyMIeL2aBNpXrI6S7/5/Lsjc2bkxBrwUefg
m1TclvldWh2Tb9aJqHMQZzJSulHnSHEXfJPl2sQ+yf1z3lWxfgf+P99ZU75s
/D411joHMUJx+7r69XHeTu7XRK5zMG9FhFiMtCzqHNQ6iFo815rv3ul8433d
bzpHqs/B+5Z6vnFZnpeS1xLFr2n1W0rvXca3MR6L9xy1bVL/Rj2t13UOfL/Y
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
5xARERHpTTqhc1Cb4LrrrtM07X+N30M/o84hvYo6h4iIiEhv0gmdQ0QGB3UO
6VXUOURERER6E3UOEWkn6hzSq6hziIiIiPQm6hwi0k6SzjH11FMX8847r6b1
jE0yySTqHCIiIiI9iDqHiLSTpHNoWq+aOoeIiIhIb6HOISLtZM011yyWX355
TetZ23fffTv9MxIRERGRCUCdQ0RERERERET6BXUOEREREREREekX1DlERERE
REREpF9Q5xARERERERGRfqETOsfjjz9eXHnllZqmtbDXX399XH6PIiIiIiIi
/UQndI4f/OAHHZ8nUNO63R566KFx+T2KiIiIiIj0E+ocmtadps4hIiIiIiIy
4XRa5zjxxBOLCy+8UNO0/7Wtt95anUNERERERGQUdFrn+Otf/zouxxTpBX70
ox+pc4iIiIiIiIwCdQ6R7kGdQ0REREREZHSoc4h0D+ocIiIiIiIio0OdQ6R7
UOcQEREREREZHeocIt2DOoeIiIiIiMjoUOcQ6R7UOUREREREREaHOodI96DO
ISIiIiIiMjq6Xed48skni9tvv73WnnrqqeI///nPuLR5rPnd735XfP/73y92
2mmnYrvttivt8ssvL5cddNBBjb/98Ic/HNPjPvPMM8XPf/7z4jvf+U6x/fbb
l9f8iCOOKO67774xPY68O9Q5RERERERERke36xwbbrhhY906m2yyyYovfelL
xSOPPDIubW/G+eefX3zrW98qbf/992+63ltvvVWsueaatedy8cUXF++8804x
1VRTNf62ww47jEn7HnvssWKttdYqJppootpjv+c97ynWWWed4rnnnhuT4/UC
r7/+euOaYb///e873SR1DhERERERkVHS7TrHPPPM01LnSDbddNMVjz/++Li0
v45ll1220ZYlllii6XpHHnlkpd0LLLBAseKKK5ZGrMU999xTWc71GS1XXHFF
McUUU4yoH+eff/7iX//616iP2QvccsstlXNHq+o06hwiIiIiIiKjo5t1jldf
fbWYeOKJG+t+/OMfb+RzEBMxySSTVPzU8Wp/zn//+9/igx/8YKMd5IM0Y+GF
F26st8IKKwxZTi7OOeec0zC0j9Hwhz/8oZh88skrcRvbbrttcc011xS33XZb
cfjhhxdTTjllpR933nnnUR2zVzjuuOMq5/3oo492uknqHCIiIiIiIqOkm3WO
m266qeKH7r777pXlhx56aGX5MsssM2Qf5IH8+te/LrWHVVZZpVh66aWL9dZb
r/Rx0VHqQLe46KKLil122aX44he/WO531VVXLTbddNNSF7jxxhsb67LeCSec
UGnHZptt1tApLrzwwnK9K6+8sjjttNNKnSGtt8EGGzTWe+KJJ8r10B7ybYHY
g/T38847b0hdEvaflhOXwHlzfp/4xCcqbaM2R84ZZ5xRWWfqqacu82si1157
bWP/l112WfH222+X984aa6xR9s9XvvKV4sEHH2x6LWnPJZdcUubhfOELXyiv
w/rrr1+cdNJJQ46VOPfccxvHvPfee4sXX3yxvHdWW221Mn7mhRdeKNejPXvt
tVfx5S9/ufj85z9ftudzn/tceb0OOeSQ4tlnn63slxwe9rn66qs3zhnN7Oyz
z24cL69X8tprrxWnn356eW2XX3758vjpOtMXdfzmN79p7O/mm28u3njjjeKY
Y44pNTraeP/99w/ZRp1DRERERERkdHSzzhHbhp111lmV5RdccEFlOT5u5I9/
/GOx0EILNc3RmH322YsHHnigsg05GzEHpc4+/elPl+uiIzSrd5FskUUWKded
dtppW65H3AXgQ6e/0fbE1VdfXVkfDSBx4oknVuI1+Df85Cc/qWxDrZM60CBi
zAeGrhCZY445GsvQEJZaaqkh50BdEfz5HGrGfupTn2p67osttlhDs0ig+8R1
0DFmnXXWxr+Jn0GPglb7xshpiprCvvvu23J97Mwzz2ysj17xkY98pOm69AUa
TOTf//538b73va+xDjoQOUrxOj3//PND+kqdQ0REREREZHR0s85BDEb0J3O/
j+/pcTn+a+Kuu+6q5JLgV37yk5+s+MrYfPPNV/keTwxHWkY+BzEH5HkQCzLz
zDOXf996663LdfN4kzrbZpttyjljWq1D21566aUh+S9bbbVV5XxXXnnlxjLO
hZgOfPCYvxPnZ6HWRjzOnXfe2bSv55prrsq6nFsC7SfGoaDtcMwFF1xwiH6T
NKDEDTfcULz//e9vLJ9pppnK60bt2JiTtMUWW1S2I5Yl7jevL4LWAsRI0JbZ
ZputjPOgz7D83DfaaKPGvonRGe66pXuN2Jj3vve9jb9POumkpf6Unzf3SSSv
s5K3nxysOtQ5RERERERERkfUOcijIG+i3YaeMhKdY/HFF2+sh09Mrsnxxx9f
+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
b71VTDbZZI11llxyyXY2vSt4/fXXizXWWGOItlFnH//4x4u//e1vnW7yuDHT
TDM1zh2NrNOoc4iIiIiIiIwv3axzvPHGG8Ukk0zSWHfZZZcdss6dd95Z8et3
2mmnNra88/z73/8uVlpppco5zzzzzMV3vvOd4uc//3nxzW9+s5hyyikry1dc
ccVON3tc+Mc//lE57x/+8IedbpI6h4iIiIiIyDjTzTrHzTffXPFbd9tttyHr
nHjiiZV1+HfkzTffLB599NGGvfLKK2VMyBVXXFHss88+xV577VVcfPHFtccn
5+Oyyy4rjj766OK73/1uscceexRf+9rXikMPPbQ477zzildffbV2u3/+85+N
4z3xxBPl3x577LHi8MMPL8/h2muvLZ588snGOi+88MKQfbz99tuVduPDA+2I
57v44osP2Z5+y3NZ7rnnnso6//rXvyr753i0CW2ANh522GHDxtpw/ueff36x
//77l/1C2y6//PLiP//5T+36zzzzTON4Tz31VPm3++67r7wfOOYdd9wxbL+f
e+655TWMkKfEPk877bTKOZ9yyimN49XFtHCdqGmCRsT+DzzwwPL30Azalfb3
l7/8pfwbfXTEEUeU7b/yyiuHbKPOISIiIiIiMr50s85x7LHHVvxW/Ngc4jfi
OslXTqBHxOVnn3126XPm+R11cSB77713y5yQGWaYodQUclZZZZXGOksttVRx
8MEHV+JSaMOaa67Z+PfWW289ZB/4+PFYv/rVr0qdIObokMeT9IKc5ZZbrrI9
+4sQ95GWsU9iQahtErfh39Q0zUETOeigg4r3v//9tf3y6U9/urZdsY7K2muv
XbYh6jHXXHNNud6+++7bst+nn3764sYbb2zsl2s+XP7ORhtt1FgfnWTnnXcu
a5jUrcv9UaeLrLvuuo11FlpooeJHP/pRMemkkzb+dtJJJw3ZRp1DRERERERk
fOlmnWPbbbet+J/33nvvkHWox5GW43MSvxEhXiPuY7rppqv1bfG3n3766cq2
X/jCF8plH/jAB4r55puvrPn5oQ99qLLdvPPOO6RN+OFpeawXkYxaqsR2pH8v
uOCCle3J15llllkay8lTgQMOOKCyn913371p322//faVdYm5iKywwgqNZe97
3/uKiSeeuLZfON+XX365sR31UNAo4jrUAFlggQUqmgVxJrGWCttFTSDvl4km
mqh46aWXynVXX331If3+4Q9/uLL+3HPP3dg3MRnD6RzEggBxLLRtuPU5Zl7P
dvbZZ295Xe++++4h10GdQ0REREREZHzJdQ5803Yb8Q0j0TmIC0jrTT755GUc
QYT8iKmmmqqxzsILLzxkHzG2IvnkZ5xxRhk7EOMLsOuvv76y7fHHH1/cf//9
lb/h+26yySaV7eIcruR+5P7vqquuWlx44YVlXx955JFlH9x6662N5cR6UFs0
gU8etZsHHnig/PsyyyxT2W+Macj5yle+UlmX2IMEx//gBz9YWU4ODxoA55LX
OCUmJvGNb3yj0jbmNUnQr3G72267rbGsLuZiww03LOfDve666yrxJsyNSz5L
3u/53DvPPvtsuez2228vrxW6SNRZ+Fsy8oZggw02aKyDtkOeDvEdnPc666xT
2f9vfvObxvHJDcpzgah7Qt7ODTfcUPYvtVNy1DlERERERETGl6hzdMKa6Rz4
jMQZpPWWWGKJIev8+c9/ruyrLv8jxlbgB6NDJPBx4/Z5DQtAW8HnpvYCPi1+
fR5ngj6QuOiiiyrL1l9//drzY78x7+Omm24q/47PHdtMbYpEnlcS4yxyVltt
tcq65L0kqC8Rl+HfR/Db43JiT9J2Mf9mxx13LP3/ZGgJcbtf/OIXjX3+7Gc/
qywbrl5sXb/nMSqxLkmuQ5BXk5PXe8njYbj+cfn3v//9xjLmq821q3zunzrU
OURERERERMaXbtU5cp9zhx12GLJOHj9w1FFHVZbnsRW5X/v1r3+9sYxaDeSL
JKj7yTFjjECdkQcTiXVC8btTHdI6Vl555ca6KZ5hv/32a/xtxhlnbORyvPba
a5Xjsu9mfjY5IjG/hnVT7AOgGcR95bU3b7nlltp+jW0biV1wwQWNfaKJpL9T
DySdVw61QVk3jzfJjTyWyFVXXVVZTj3UnK9+9auN5cRycKwIsTtxH9/73vca
y6jLGpfl8SbNUOcQEREREREZX/gGj/83nvaZz3xmWJ3jzDPPrPiVeR1N2Gqr
rSrr5PEYeWxFqnOZiLU6qSuZoN7nRz/60cq21BylBgV1G2Kdic9//vOVfcac
j7jPOogXSOtuueWWZUxC1FXQcRLkteS+Pu0cSd9RZyTy7W9/u7IcDSVC/lKd
ZkAMw4ToHCnfBmJNjLzPEmhLs80224j6/XOf+1xl20MOOaSyXa5hADFBafnH
PvaxIct//etfV/YR41GoY5r+Puecc9a2vw51DhERERERkf5nJHVIf/KTn1R8
TvIeIuRsxJqi+Md5fEOMraDOZczzYN1pppmmsXybbbZpLIvf/cmdufrqqxvL
8J9j7gaaQWTmmWduLCPPohXUpUjr4suTo5L+zTwt+fnE2qTYqaeeOmSfaCXU
IEnrEMvBPLYRdIa0nFyYnFjThNyaNI9r1KfQCWLOSp2l9pODQn2VtC3zuNax
6667VmI+iNFIMKdrnB8lj82JdTfqNAz45Cc/2VKDivVVOX7USuaaa67GMuqz
jBR1DhERERERkf5nJDoH39KjT7/88ss3/G3qYay33nqV5eQV5KR5O7B8XpSH
Hnqosj1z2CaoZ5r+jm8c2W233SrbxTqcf//73yvLjjvuuJb9wNwwyf9HO0n1
N8ipuOuuu4asv8suu1T2j6ZCPdMEtT5j27G6fJ9pp522sg55KgliOWKdi699
7WuNZbHPaeMjjzwyZN9oScx/8uCDDzb+lucgxXyWSKw7O88881SWxfqnGDEr
EXSLtIzYjzpiPAr6Vbz32F88b/o6QY4NOllaRl2XkaLOISIiIiIi0v+MROcg
JyPWIcWmnHLKcm7P+F0/fZunJkVOjK3Iv8GfddZZTX39fF4T4jKOOOKI2ryN
6OtfeumllWVRg2hGzJ1JxlwpdaCjxHOKege1PPK/U180nwPk8ccfH7IeMRvU
S6Ut0denr1988cXGtnldD+ZW3XPPPYtjjjmmnLf2S1/6UnmNWEYOSuKkk06q
bEcbRtIX2223XTk/TV5TFYs6Ciy22GKV5dTvQO+IcTq5dka9V+JAuN7xvJnn
99VXX21sR75T3C7G9wyHOoeIiIiIiEj/MxKdA376059WvqPXGbkUdXUq8tgK
dIpIzBHJ53VlHtK6Y33iE58oVlpppca/qaURc0sOOOCApvtsxr777ls5BvVD
Y83QnD/96U/FHHPM0bJPiBFBd6ib55RYirhuPndMMnJfci2Bc6WOSKtjY+TX
RHbeeefGMuqLNqufeuKJJ9buD70l5tpMPfXU5ZzCkXzunGTUNI3tz2u65MZx
4jwuwL2TlqOHxHmEh0OdQ0REREREpP8Zqc4BxFlsvvnmZR4DPjI1Oeaff/5i
0003LetG5v5ugryPFVdcsWG33357Zfnee+/dWIbvnkM9EPIoyPGYb775ir32
2qvMXyB/Im1HPYnIgQce2FhGm0cCNT6jnz1crgtQN5S6rPjks846a6mN0D9o
MPj7rfqU807HIveEuAXqnRL7QAwEdUKonxHjOHKYo5ZaFmghXBNqttJXxEbQ
rlh/FKilkfol5sHUgdYR+514Efr9m9/8ZmMf1E/JQcM477zzis0226zsh7Qu
tWhz0HrIaYp9t/HGGxcXX3xxbZvQOdL+OMcJQZ1DRERERESk/5kQnaPfiTU3
0Breeeedth4v1hhFR5D2os4hIiIiIiLS/wy6zvHb3/62OP3008saoakuBHOm
5vPitgPmaU19/+Uvf7ntxxt01DlERERERET6n0HWOcivoO5nzFVB6yDfo908
+eSTlePWzVEjY4s6h4iIiIiISP8zyDrHU0891Tj3qaaaqlhyySWLc889d1yO
TV2NqHNcddVV43LcQUadQ0REREREpP8ZZJ1DBgt1DhERERERkf5HnUMGBXUO
ERERERGR/kedQwYFdQ4REREREZH+R51DBgV1DhERERERkf5HnUMGBXUOERER
ERGR/kedQwYFdQ4REREREZH+J+ocU089dTHNNNNoWl/aRBNNpM4hIiIiIiLS
50SdQ9MGwdQ5RERERERE+peLL7642HjjjTVtYOyAAw7o9M9ORERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREpC/5f7CXxhs=
    "], {{0, 749}, {
    1082, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{729., Automatic},
  ImageSizeRaw->{1082, 749},
  PlotRange->{{0, 1082}, {0, 749}}]], "Input",ExpressionUUID->"de6c869e-6ce6-\
414e-81a4-f6266f05b1c5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introducci\[OAcute]n a las gr\[AAcute]ficas", "Chapter",
 CellChangeTimes->{{3.716156519791831*^9, 
  3.716156525448053*^9}},ExpressionUUID->"953d73cf-335c-4773-8ed8-\
e67c4dc951f4"],

Cell["Gr\[AAcute]ficas simples", "Subsection",
 CellChangeTimes->{{3.716326417738494*^9, 
  3.7163264201716623`*^9}},ExpressionUUID->"acc7597d-afe5-4d7e-b127-\
99831f31aa08"]
}, Open  ]],

Cell["Ajustes de modelos", "Chapter",
 CellChangeTimes->{{3.7161565281278954`*^9, 
  3.716156531055892*^9}},ExpressionUUID->"4f2b9d39-244e-473f-94ca-\
72743f46dd86"]
}, Open  ]]
},
WindowSize->{1440, 753},
WindowMargins->{{218, Automatic}, {Automatic, 92}},
FrontEndVersion->"11.2 para Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 193, 3, 96, "Title",ExpressionUUID->"bdff2f26-a159-4dca-82a8-f9ffc4e6d163"],
Cell[CellGroupData[{
Cell[798, 29, 161, 2, 67, "Chapter",ExpressionUUID->"f205be8a-e2b4-4387-8757-cacf562f9c17"],
Cell[962, 33, 1064, 28, 67, "Input",ExpressionUUID->"72dc9dd3-d17d-43df-8714-dd83419e2e9a"],
Cell[2029, 63, 23851, 564, 557, "Input",ExpressionUUID->"69982079-9894-47dc-837e-41adcd43ea99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25917, 632, 224, 4, 67, "Chapter",ExpressionUUID->"2b6dd1b5-2dd8-4292-9bf0-a42a9b31cd4d"],
Cell[CellGroupData[{
Cell[26166, 640, 251, 4, 64, "Subchapter",ExpressionUUID->"e640789f-b38d-4725-9ebf-d837129c923d"],
Cell[26420, 646, 244, 6, 34, "Text",ExpressionUUID->"409080a8-81a5-4cc5-8403-27eeed43f783"],
Cell[26667, 654, 756, 19, 48, "Input",ExpressionUUID->"7cef6025-ad26-4cb0-b259-fae131b025a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27460, 678, 171, 3, 64, "Subchapter",ExpressionUUID->"fc85992d-c33e-4d7d-8155-7d3112a20cf2"],
Cell[27634, 683, 67669, 1116, 163, "Input",ExpressionUUID->"b9340e44-e82a-40ce-903f-f2aed75112ba"],
Cell[95306, 1801, 250, 6, 28, "Input",ExpressionUUID->"6abeef85-bb47-42e7-a1f0-36a352b3efc6"],
Cell[95559, 1809, 796, 23, 48, "Input",ExpressionUUID->"b633caf3-f330-4f93-ba47-70199403a6a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96392, 1837, 159, 3, 64, "Subchapter",ExpressionUUID->"ad858a3c-0d32-4a2d-87ce-1c7d45b2b7c8"],
Cell[96554, 1842, 220, 5, 28, "Input",ExpressionUUID->"c5f97b32-24ce-4720-97ef-7167d4fe3984"],
Cell[96777, 1849, 248, 7, 28, "Input",ExpressionUUID->"58ee490a-d027-47aa-8fa7-c349487adf06"],
Cell[97028, 1858, 280, 7, 28, "Input",ExpressionUUID->"91fbfd3d-83d5-4c40-aad8-96cf3992c755"],
Cell[97311, 1867, 312, 9, 28, "Input",ExpressionUUID->"c30831ad-292b-45f4-9e2c-3ea28b49075d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97660, 1881, 171, 3, 64, "Subchapter",ExpressionUUID->"d6aebf14-3e54-493a-bde5-8c5bc18e9305"],
Cell[97834, 1886, 19814, 462, 79, "WolframAlphaShortInput",ExpressionUUID->"23f44575-15e3-4ab7-a608-0e410785cf14"],
Cell[117651, 2350, 17930, 431, 79, "WolframAlphaShortInput",ExpressionUUID->"8df7d435-c7bf-439d-a462-8721e7ec115f"],
Cell[135584, 2783, 500, 11, 43, "Input",ExpressionUUID->"5eb3281b-5bb8-48a8-ac03-7d33dd4360f5"],
Cell[136087, 2796, 512, 12, 43, "Input",ExpressionUUID->"f4bfc391-10ec-46ce-b51f-9e1b6d1c8c75"],
Cell[136602, 2810, 333, 8, 28, "Input",ExpressionUUID->"3c9afc06-d302-4ba1-b142-024dd537a545"],
Cell[136938, 2820, 131, 1, 28, "Input",ExpressionUUID->"e821a287-53eb-4ea7-b6e9-a45d0e4f0fab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137106, 2826, 161, 3, 64, "Subchapter",ExpressionUUID->"d4b72b2c-48c5-4cce-8ecc-2289aac5c629"],
Cell[137270, 2831, 218, 5, 28, "Input",ExpressionUUID->"aac81c96-8bb2-4df1-bbb7-d970306dc279"],
Cell[137491, 2838, 480, 13, 28, "Input",ExpressionUUID->"364b02d1-bc5b-4c9c-ac3c-b970e3dcff06"],
Cell[137974, 2853, 770, 22, 28, "Input",ExpressionUUID->"39c70932-3cd9-49ab-b869-a2a8d16ef858"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138793, 2881, 190, 3, 67, "Chapter",ExpressionUUID->"ed36cafc-f2c2-4672-b9c5-ff075130d833"],
Cell[CellGroupData[{
Cell[139008, 2888, 159, 3, 53, "Subsection",ExpressionUUID->"4dae9897-b6d1-47af-b697-4f515596be7b"],
Cell[139170, 2893, 615, 13, 56, "Text",ExpressionUUID->"9d7e0e56-e36e-4a74-9fcb-2e271d496a0d"],
Cell[139788, 2908, 254, 6, 34, "Text",ExpressionUUID->"ccd27eaf-e077-422a-a0a3-9876c8de9719"],
Cell[140045, 2916, 149, 3, 34, "Text",ExpressionUUID->"3041c4f6-c629-49ce-a6d7-aa330ffc6029"],
Cell[140197, 2921, 131, 3, 28, "Input",ExpressionUUID->"504b63d0-4540-46ff-ad3f-4968837f569a"],
Cell[140331, 2926, 166, 3, 34, "Text",ExpressionUUID->"0b40fc86-22d9-48fc-92f3-6ff8658bcf58"],
Cell[140500, 2931, 157, 3, 28, "Input",ExpressionUUID->"8485a129-232d-40b9-b076-d6095b1513fc"],
Cell[140660, 2936, 167, 3, 34, "Text",ExpressionUUID->"2d6afec4-2a1f-4125-aab7-a90b675538ca"],
Cell[140830, 2941, 187, 4, 28, "Input",ExpressionUUID->"54023c2f-cc9c-4ff8-9ad4-13d450fc3459"],
Cell[141020, 2947, 154, 3, 34, "Text",ExpressionUUID->"e13c3d26-505c-42b5-9978-21303e851263"],
Cell[141177, 2952, 177, 4, 28, "Input",ExpressionUUID->"fe878ccb-1f5d-41cc-8e1c-5edf78e2f06c"],
Cell[141357, 2958, 159, 3, 34, "Text",ExpressionUUID->"f4fa3d60-e065-46e0-993c-ce774f775d13"],
Cell[141519, 2963, 173, 3, 28, "Input",ExpressionUUID->"68aba1a9-f386-4aaa-b738-8fa28ff9a1e5"],
Cell[141695, 2968, 239, 4, 34, "Text",ExpressionUUID->"2afca0cb-0632-48ab-b13a-40e2a8cc2566"],
Cell[141937, 2974, 202, 4, 28, "Input",ExpressionUUID->"f60cc8df-c5ef-4307-9185-3acc51497a5f"],
Cell[142142, 2980, 245, 5, 28, "Input",ExpressionUUID->"b76d31f4-ab38-44c1-a990-178dd3e6110a"],
Cell[142390, 2987, 186, 4, 28, "Input",ExpressionUUID->"9d45fb3b-5d77-4ff9-bd5e-9cebb303798e"],
Cell[142579, 2993, 277, 6, 34, "Text",ExpressionUUID->"45be4bf4-aeb3-4d0b-b91f-d26ee66572a6"],
Cell[142859, 3001, 452, 8, 34, "Text",ExpressionUUID->"e859f8d1-1e5f-430e-99a3-54e46b4a5f1a"],
Cell[143314, 3011, 182, 4, 28, "Input",ExpressionUUID->"47b6c6d6-d293-476f-a8ca-717a029d5e7a"],
Cell[143499, 3017, 222, 5, 28, "Input",ExpressionUUID->"49193b8c-b7ca-4674-a35f-f95a54048ee3"],
Cell[143724, 3024, 321, 7, 34, "Text",ExpressionUUID->"83c7c61b-ac6f-463a-97bb-73e5cb65c55c"],
Cell[144048, 3033, 191, 4, 28, "Input",ExpressionUUID->"4cdba9ed-f199-4771-8026-26ce80707943"],
Cell[144242, 3039, 340, 7, 34, "Text",ExpressionUUID->"169eb46a-4ee5-44aa-b825-4a8e0586bdbc"],
Cell[144585, 3048, 202, 5, 28, "Input",ExpressionUUID->"1bda96b0-506c-4eb8-8e66-4a3c9d2a8e13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144824, 3058, 174, 2, 53, "Subsection",ExpressionUUID->"129cde23-667e-4e96-b45f-8e37fccf7242"],
Cell[145001, 3062, 476, 11, 34, "Text",ExpressionUUID->"f180d076-39b3-4317-8053-8b14bf2794b8"],
Cell[145480, 3075, 186, 4, 28, "Input",ExpressionUUID->"0e6381c0-125e-4f3b-ae1a-7f79351edcfa"],
Cell[145669, 3081, 207, 5, 28, "Input",ExpressionUUID->"1634e5f7-ae02-49f3-bc50-be3e05db59b3"],
Cell[145879, 3088, 376, 7, 34, "Text",ExpressionUUID->"632ccdd2-38bd-45bd-ab22-8982827cd224"],
Cell[146258, 3097, 185, 4, 28, "Input",ExpressionUUID->"b2acd88b-93e6-4ee3-9bdf-81e46bfb6eec"],
Cell[146446, 3103, 183, 4, 28, "Input",ExpressionUUID->"1913f6eb-8c84-4e66-9dec-25bb02437139"],
Cell[146632, 3109, 199, 4, 28, "Input",ExpressionUUID->"e647f06f-53c3-4956-a6fe-cad5a142f532"],
Cell[146834, 3115, 185, 4, 28, "Input",ExpressionUUID->"ba926b92-d9c0-4ac6-9c01-9d1ed08b86b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147056, 3124, 154, 3, 53, "Subsection",ExpressionUUID->"6b2db38b-c5e0-4ca4-bd7a-fbfa83db10f6"],
Cell[147213, 3129, 226, 5, 34, "Text",ExpressionUUID->"7ad9776d-bbb9-4cb6-a858-8fa4e38aff93"],
Cell[147442, 3136, 299, 7, 28, "Input",ExpressionUUID->"3de15651-32b3-489c-a5f3-037e32a37915"],
Cell[147744, 3145, 238, 6, 34, "Text",ExpressionUUID->"2894add8-123f-42a8-ac4b-53637de97727"],
Cell[147985, 3153, 186, 4, 28, "Input",ExpressionUUID->"0b75177b-3155-4ee7-bf14-424b6ab0a25e"],
Cell[148174, 3159, 237, 6, 34, "Text",ExpressionUUID->"3fae7d1e-cbb8-4f61-8eb6-eca6812678f1"],
Cell[148414, 3167, 208, 5, 28, "Input",ExpressionUUID->"29ca0bc4-f468-4ad8-9a34-e38816b99cf6"],
Cell[148625, 3174, 208, 5, 28, "Input",ExpressionUUID->"711b3aed-98e8-4189-9085-2e9c9eacbbb1"],
Cell[148836, 3181, 199, 3, 34, "Text",ExpressionUUID->"ac9d8e2e-e698-4369-91cc-e137f823432c"],
Cell[149038, 3186, 225, 6, 28, "Input",ExpressionUUID->"c7f5380b-dfc2-4f2a-9eb2-dc1b78cca427"],
Cell[149266, 3194, 229, 6, 34, "Text",ExpressionUUID->"781b29b4-b943-440a-9986-578c3660154a"],
Cell[149498, 3202, 188, 4, 28, "Input",ExpressionUUID->"39bf3b81-a23a-42a7-b087-07754cbb6882"],
Cell[149689, 3208, 351, 7, 34, "Text",ExpressionUUID->"6d35a888-dee3-4b29-b4b0-6b9b90a80d13"],
Cell[150043, 3217, 344, 10, 28, "Input",ExpressionUUID->"26b150c2-ff28-4205-8fc3-ac9745147c5f"],
Cell[150390, 3229, 425, 12, 28, "Input",ExpressionUUID->"a4d0ab41-3eb9-4375-afc9-68212759b05d"],
Cell[150818, 3243, 360, 7, 34, "Text",ExpressionUUID->"c68b6869-121b-42c6-b982-8636a0c4e2fc"],
Cell[151181, 3252, 355, 10, 28, "Input",ExpressionUUID->"2c7ca0b5-304e-4883-afc9-74ec85b27b81"],
Cell[151539, 3264, 290, 6, 34, "Text",ExpressionUUID->"ae905511-8c5b-435b-a2d1-c3eaf64629bb"],
Cell[151832, 3272, 443, 14, 28, "Input",ExpressionUUID->"79c4e247-ab1b-4465-93af-c17e4a8d685b"],
Cell[152278, 3288, 522, 15, 28, "Input",ExpressionUUID->"fee33151-5e44-4ca7-968c-72e8a7f6c453"],
Cell[152803, 3305, 246, 6, 34, "Text",ExpressionUUID->"eb631fb8-f910-4e85-991e-88d2324a2542"],
Cell[153052, 3313, 571, 17, 28, "Input",ExpressionUUID->"fe52e664-c517-4756-9f99-0ae2c667efdb"],
Cell[CellGroupData[{
Cell[153648, 3334, 160, 3, 44, "Subsubsection",ExpressionUUID->"f36e7123-4baa-453e-9980-ec2f8367c738"],
Cell[153811, 3339, 156, 3, 34, "Text",ExpressionUUID->"305c42fa-40e6-4dde-a8fb-68ad44bd527a"],
Cell[153970, 3344, 271, 7, 48, "Input",ExpressionUUID->"97c221a4-fc67-4c77-bf14-ee9defaa3926"],
Cell[154244, 3353, 243, 6, 34, "Text",ExpressionUUID->"bca3a997-10e4-4b05-be6d-fdb4a24c6aec"],
Cell[154490, 3361, 516, 14, 28, "Input",ExpressionUUID->"40e1a01d-10c5-4b3b-b705-7cde8e986167"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[155055, 3381, 157, 3, 53, "Subsection",ExpressionUUID->"5fa28333-c234-4aa9-a0e0-f75b49bf0170"],
Cell[155215, 3386, 350, 7, 34, "Text",ExpressionUUID->"bf21fb19-a120-4cb3-b7f4-29e17db3641c"],
Cell[155568, 3395, 175, 4, 28, "Input",ExpressionUUID->"80e4c38f-7bba-4a8c-ba70-b24c8b4b75cd"],
Cell[155746, 3401, 121, 3, 34, "Text",ExpressionUUID->"2204fd5f-b0b7-45de-aea4-39e91a46420e"],
Cell[155870, 3406, 175, 4, 28, "Input",ExpressionUUID->"689c281f-4ebb-42e0-9b74-9e9dee826b5f"],
Cell[156048, 3412, 512, 9, 56, "Text",ExpressionUUID->"2da4a678-2e35-4ca0-9740-3298516bde68"],
Cell[156563, 3423, 210, 5, 28, "Input",ExpressionUUID->"bd38f006-543c-4f39-921d-33fc8c6b184d"],
Cell[156776, 3430, 218, 4, 34, "Text",ExpressionUUID->"644c522e-3756-4ea7-a83f-805a5985f8a5"],
Cell[156997, 3436, 208, 5, 28, "Input",ExpressionUUID->"1b81ff35-951c-4126-99cd-74e22f9cfff6"],
Cell[157208, 3443, 229, 6, 34, "Text",ExpressionUUID->"4e7e962f-7443-4d1a-a3ff-6d5c2eafcfe5"],
Cell[157440, 3451, 289, 8, 28, "Input",ExpressionUUID->"c689413f-029c-48d5-878b-04b0bf6a0bba"],
Cell[157732, 3461, 306, 6, 34, "Text",ExpressionUUID->"d7f36ffa-2db7-450c-a790-61cab6084fc5"],
Cell[158041, 3469, 260, 5, 34, "Text",ExpressionUUID->"35f73e01-b4b4-47a6-af4a-a7db6a80f6cc"],
Cell[158304, 3476, 174, 4, 28, "Input",ExpressionUUID->"849b9372-9fc1-43ee-b1c3-e00ccba85cfa"],
Cell[158481, 3482, 175, 4, 28, "Input",ExpressionUUID->"a776691f-02c9-454d-93df-8f854e991a3d"],
Cell[158659, 3488, 175, 3, 34, "Text",ExpressionUUID->"2cc63ffb-27a7-41f2-bcaa-ccaae4d67f44"],
Cell[158837, 3493, 144, 3, 28, "Input",ExpressionUUID->"9a4a70a5-f312-4680-92ef-dfc1f3a62ca6"],
Cell[158984, 3498, 222, 5, 34, "Text",ExpressionUUID->"9e5bdd53-8844-4a21-9609-b00c90956a82"],
Cell[159209, 3505, 175, 4, 28, "Input",ExpressionUUID->"82d3ac3e-c3dd-4406-919c-4bef28033131"],
Cell[159387, 3511, 172, 3, 34, "Text",ExpressionUUID->"154e6718-c5ed-4a7d-9629-1eb50d94af5b"],
Cell[159562, 3516, 282, 8, 28, "Input",ExpressionUUID->"48d85f5f-6629-4442-8774-c9b757292f8b"],
Cell[159847, 3526, 221, 4, 34, "Text",ExpressionUUID->"d728045b-7d65-42e1-a34e-9319933eede6"],
Cell[160071, 3532, 145, 3, 28, "Input",ExpressionUUID->"e78acc11-4b3b-4496-99d5-47f34b64e3ed"],
Cell[160219, 3537, 424, 8, 34, "Text",ExpressionUUID->"7d3a51a4-50f1-4562-bff9-978879d5c2e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160680, 3550, 160, 3, 53, "Subsection",ExpressionUUID->"167cc714-c986-4695-ba38-51558cd3134d"],
Cell[160843, 3555, 504, 13, 34, "Text",ExpressionUUID->"a01c49bb-a85c-4556-98f4-568efe205b45"],
Cell[161350, 3570, 187, 4, 28, "Input",ExpressionUUID->"05aecb4d-2e5d-43dc-84b0-939bbd0befdd"],
Cell[161540, 3576, 155, 3, 28, "Input",ExpressionUUID->"717f4924-bd60-48c5-bbf8-f7f4007dc687"],
Cell[161698, 3581, 242, 6, 28, "Input",ExpressionUUID->"6fd27062-6415-4ee1-9053-b0ca562fb805"],
Cell[161943, 3589, 879, 21, 56, "Text",ExpressionUUID->"5530db1d-d633-4293-964e-ce457c2cf4d9"],
Cell[162825, 3612, 184, 3, 34, "Text",ExpressionUUID->"8a2a19b8-a77c-4629-996f-fca94f960a6c"],
Cell[163012, 3617, 217, 5, 28, "Input",ExpressionUUID->"42107c30-4e91-45b4-a2b3-3484d2f7ace5"],
Cell[163232, 3624, 181, 3, 34, "Text",ExpressionUUID->"4b9c9f8c-8e75-4e1d-abc5-4fba62bc6624"],
Cell[163416, 3629, 129, 3, 28, "Input",ExpressionUUID->"54bcdf7a-6066-4fd7-bf03-828db480cedf"],
Cell[163548, 3634, 249, 6, 34, "Text",ExpressionUUID->"6a358fa8-df5d-4e5b-90e2-990e0006c815"],
Cell[163800, 3642, 220, 5, 28, "Input",ExpressionUUID->"4da0448c-0936-4d0f-add6-dfcf8e48732e"],
Cell[164023, 3649, 253, 6, 34, "Text",ExpressionUUID->"94b3e78e-e7dd-4315-a446-18191a0f9aa8"],
Cell[164279, 3657, 129, 3, 28, "Input",ExpressionUUID->"88dc8c80-a0db-49b5-be36-4f473e02e225"],
Cell[164411, 3662, 129, 3, 28, "Input",ExpressionUUID->"c28149d7-0f1c-44d3-a84f-b743bb829fb1"],
Cell[164543, 3667, 274, 8, 34, "Text",ExpressionUUID->"c7f361e7-4970-447d-8b08-9e5d79525969"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164854, 3680, 160, 3, 53, "Subsection",ExpressionUUID->"c85b3e09-500a-4de0-afc1-b51de8965cbf"],
Cell[165017, 3685, 536, 10, 56, "Text",ExpressionUUID->"0a29a853-d4ff-4cf1-a0d0-11f8a84b88fd"],
Cell[165556, 3697, 259, 7, 28, "Input",ExpressionUUID->"04f957b6-eabf-4ffe-82f4-2f697f3d835d"],
Cell[165818, 3706, 291, 8, 28, "Input",ExpressionUUID->"7a387991-46d0-4f1f-af34-29ef6aa3c2ea"],
Cell[166112, 3716, 194, 3, 34, "Text",ExpressionUUID->"6a187ef7-7e5d-4bb6-bc4f-07bd7f5a0a24"],
Cell[166309, 3721, 356, 11, 28, "Input",ExpressionUUID->"76116e84-4871-4eb4-ae5b-7dfdf8e7ebc9"],
Cell[CellGroupData[{
Cell[166690, 3736, 209, 4, 44, "Subsubsection",ExpressionUUID->"92c069dd-6f16-4091-a713-27ab870140c2"],
Cell[166902, 3742, 163, 3, 34, "Text",ExpressionUUID->"aa806fa5-02b1-493f-9fa2-fa74ee811957"],
Cell[167068, 3747, 286, 6, 28, "Input",ExpressionUUID->"fbd29d12-720b-43c3-86af-a7572cab107b"],
Cell[167357, 3755, 217, 5, 34, "Text",ExpressionUUID->"582e3ce0-2960-4daf-a143-2e013fe494f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167611, 3765, 164, 3, 44, "Subsubsection",ExpressionUUID->"0f0cad0a-2549-47aa-a53a-9d1e08321e9d"],
Cell[167778, 3770, 188, 3, 34, "Text",ExpressionUUID->"10b12d32-8dd5-478a-98c6-7130c770eb79"],
Cell[167969, 3775, 708, 23, 28, "Input",ExpressionUUID->"882e01ab-dd04-4d3f-ae5b-2f4942587b8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168714, 3803, 213, 4, 44, "Subsubsection",ExpressionUUID->"5a3324c2-51f4-4103-a3d0-942526be589b"],
Cell[168930, 3809, 160, 3, 34, "Text",ExpressionUUID->"11569a30-6c1b-4aab-b02a-cd28270f0fef"],
Cell[169093, 3814, 339, 10, 48, "Input",ExpressionUUID->"f3f4e4e5-36dd-466e-88ec-4ad6800de539"],
Cell[169435, 3826, 180, 3, 34, "Text",ExpressionUUID->"4ad8d306-ec71-4ed8-9604-70a000746897"],
Cell[169618, 3831, 404, 13, 28, "Input",ExpressionUUID->"ccdc2911-6bb6-4076-9835-33bc55238ad0"],
Cell[170025, 3846, 287, 7, 34, "Text",ExpressionUUID->"af91ac51-0a38-44c1-b852-c2b395ded0d0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[170361, 3859, 265, 4, 53, "Subsection",ExpressionUUID->"1e540197-0273-4e1f-85b3-3a3f18d2e078"],
Cell[170629, 3865, 787, 13, 56, "Text",ExpressionUUID->"4dc29d32-95a4-4d3e-9c39-c427f415e279"],
Cell[171419, 3880, 318, 8, 28, "Input",ExpressionUUID->"fa1916c4-21fc-4f2c-83c5-801680935d11"],
Cell[171740, 3890, 431, 8, 34, "Text",ExpressionUUID->"ceb2d46e-2fc5-46a3-a056-ead45735db1a"],
Cell[172174, 3900, 398, 11, 28, "Input",ExpressionUUID->"dee6314a-a78f-4f92-8d82-afa57da7a96a"],
Cell[172575, 3913, 360, 7, 34, "Text",ExpressionUUID->"13b24647-d5b3-4249-9a3e-ec35d0e1218e"],
Cell[172938, 3922, 236, 6, 34, "Text",ExpressionUUID->"4ae8e4d4-ca1e-4031-8793-35bfbfff64bd"],
Cell[173177, 3930, 288, 7, 28, "Input",ExpressionUUID->"1983b39c-6700-42a2-b13a-692989c41c12"],
Cell[173468, 3939, 242, 5, 28, "Input",ExpressionUUID->"1f969b35-53b4-4640-a033-19472a3b8c36"],
Cell[173713, 3946, 337, 7, 34, "Text",ExpressionUUID->"afd5f6be-bab9-480a-a33a-2242c3adc96c"],
Cell[174053, 3955, 559, 18, 28, "Input",ExpressionUUID->"8ad6fc64-6ac9-47b5-aac6-7d1a7d9d2e86"],
Cell[174615, 3975, 422, 8, 34, "Text",ExpressionUUID->"fdbcb5fd-223f-4947-a496-eb9c21244f63"],
Cell[175040, 3985, 618, 20, 28, "Input",ExpressionUUID->"b05bb03f-0c42-4bed-81ea-43f566b143e7"],
Cell[175661, 4007, 295, 8, 34, "Text",ExpressionUUID->"dab5bc8d-c0d8-4177-91f9-c70741fa747d"],
Cell[175959, 4017, 429, 12, 28, "Input",ExpressionUUID->"3430ecb2-da0b-4c94-9043-95588f0dbfac"],
Cell[CellGroupData[{
Cell[176413, 4033, 260, 4, 44, "Subsubsection",ExpressionUUID->"1fe0f3b6-76d8-4059-b5ca-7287aac1cf7f"],
Cell[176676, 4039, 360, 7, 34, "Text",ExpressionUUID->"5e4bdbf0-94a6-4f9b-a21b-74c2b1ee43e1"],
Cell[177039, 4048, 331, 7, 28, "Input",ExpressionUUID->"e4c690a1-1637-4807-bdfd-bc5443694449"],
Cell[177373, 4057, 150, 3, 34, "Text",ExpressionUUID->"177bc5bc-894c-4f77-9b9c-bc3dad9f9df8"],
Cell[177526, 4062, 237, 6, 28, "Input",ExpressionUUID->"3ca43335-611e-4b5e-9787-00801f3e4bec"],
Cell[177766, 4070, 160, 3, 34, "Text",ExpressionUUID->"e3a2b013-f54b-4450-905a-cb16545f362f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177963, 4078, 165, 3, 44, "Subsubsection",ExpressionUUID->"3665ead2-bf93-49d0-98b3-bd84b8765ac7"],
Cell[178131, 4083, 197, 3, 34, "Text",ExpressionUUID->"1ed16df6-2e26-49e6-bec6-161d028a4943"],
Cell[178331, 4088, 331, 7, 28, "Input",ExpressionUUID->"03be73b7-b7a5-478f-a6b8-3cbab2924278"],
Cell[178665, 4097, 190, 3, 34, "Text",ExpressionUUID->"7c802521-c2aa-423c-9a86-2f16d04ae3e5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178904, 4106, 157, 3, 53, "Subsection",ExpressionUUID->"dc0b2ae0-9d13-4956-8635-599efa58c3be"],
Cell[179064, 4111, 421, 8, 34, "Text",ExpressionUUID->"566aed7a-b1fe-42db-b48e-580b5cc2b93e"],
Cell[179488, 4121, 248, 7, 28, "Input",ExpressionUUID->"fac2fbd7-133f-46e8-b090-a86f41e6f8d0"],
Cell[179739, 4130, 291, 4, 34, "Text",ExpressionUUID->"e0486eff-9989-481a-a2c4-33e851c08532"],
Cell[180033, 4136, 180, 4, 28, "Input",ExpressionUUID->"aaa8d707-bb0c-4068-bce0-700e6b1291a4"],
Cell[180216, 4142, 247, 4, 34, "Text",ExpressionUUID->"d2f0c722-ff77-4c44-858b-a0d5b682ca43"],
Cell[180466, 4148, 177, 4, 28, "Input",ExpressionUUID->"f3addb50-0518-4827-b83f-6a468ab53471"],
Cell[180646, 4154, 175, 3, 34, "Text",ExpressionUUID->"67cfe036-828a-4b92-b691-23dc46f4d03a"],
Cell[180824, 4159, 186, 4, 28, "Input",ExpressionUUID->"487f84e7-d292-40ab-a4da-354194c0994a"],
Cell[181013, 4165, 210, 4, 34, "Text",ExpressionUUID->"1387e4aa-4409-4e9b-844c-9f3762215ade"],
Cell[181226, 4171, 181, 4, 28, "Input",ExpressionUUID->"d9368c95-d3c5-4d53-9e1d-429841d8f844"],
Cell[181410, 4177, 680, 13, 78, "Text",ExpressionUUID->"10b498f1-bc76-423d-a75a-0c628b8122b7"],
Cell[182093, 4192, 385, 10, 48, "Input",ExpressionUUID->"b3ae050d-6c1d-471e-a74f-7a03b1d52cf7"],
Cell[182481, 4204, 236, 4, 34, "Text",ExpressionUUID->"5a57f6b6-a985-4cee-9f63-a5578335c492"],
Cell[182720, 4210, 537, 14, 67, "Input",ExpressionUUID->"5e48dd5a-e3dd-48ce-ab16-860f0512b0d3"],
Cell[183260, 4226, 305, 7, 34, "Text",ExpressionUUID->"f5d64d35-2e38-4803-81d2-b6b620826d2a"],
Cell[183568, 4235, 390, 10, 28, "Input",ExpressionUUID->"609a395d-2799-4ed2-9b43-9d6284c81d63"],
Cell[183961, 4247, 210, 5, 28, "Input",ExpressionUUID->"5dd65638-1b50-4fe1-9525-de74f6bea79a"],
Cell[184174, 4254, 286, 6, 34, "Text",ExpressionUUID->"7ee1d19c-9276-4e77-ab3a-ee5234374e64"],
Cell[184463, 4262, 226, 6, 28, "Input",ExpressionUUID->"bd3a8605-bc30-41b4-b720-9c339a44b567"],
Cell[184692, 4270, 198, 3, 34, "Text",ExpressionUUID->"1180e654-4498-400e-9c88-234c7a7138bd"],
Cell[184893, 4275, 244, 6, 28, "Input",ExpressionUUID->"3b1573e3-5792-44e9-8f08-0d2876aa6afa"],
Cell[185140, 4283, 231, 6, 34, "Text",ExpressionUUID->"24b6824a-c3fa-4f8b-a8fb-415b60f97d22"],
Cell[185374, 4291, 375, 11, 28, "Input",ExpressionUUID->"c287a1f7-0b39-4c5d-9461-7cd56941ec1f"],
Cell[185752, 4304, 233, 6, 34, "Text",ExpressionUUID->"6480165a-730a-4092-960d-77d1dc7594f2"],
Cell[185988, 4312, 206, 5, 28, "Input",ExpressionUUID->"fcbc5ee8-21f8-42b4-9a47-92b1e39fa449"],
Cell[186197, 4319, 264, 5, 34, "Text",ExpressionUUID->"b89dc471-d0ef-4980-b5f7-042d71c23da4"],
Cell[186464, 4326, 186, 4, 28, "Input",ExpressionUUID->"29f0e6c6-5d7d-4c43-9ca5-75dcf0e208b9"],
Cell[186653, 4332, 448, 10, 34, "Text",ExpressionUUID->"135a897f-adad-4cc5-87a6-439e64bdb6e3"],
Cell[187104, 4344, 205, 5, 28, "Input",ExpressionUUID->"0007e34d-e2d9-40a7-bccf-8636818a668d"],
Cell[187312, 4351, 129, 3, 28, "Input",ExpressionUUID->"a8cffa43-d420-4ea9-b639-36b9cf992ff3"],
Cell[187444, 4356, 263, 7, 28, "Input",ExpressionUUID->"2a3bdf3b-d157-4295-85f8-a0801dc9b5c7"],
Cell[187710, 4365, 180, 4, 28, "Input",ExpressionUUID->"c04bc6d5-c9ed-44cb-9139-274527c9b440"],
Cell[187893, 4371, 126, 2, 28, "Input",ExpressionUUID->"578b4f21-57dc-4f84-91b3-c3ce6d84bb33"],
Cell[188022, 4375, 388, 8, 34, "Text",ExpressionUUID->"e8060d6f-885b-4a8b-9f6b-900e0125d520"],
Cell[188413, 4385, 129, 3, 28, "Input",ExpressionUUID->"5445f389-ab85-4dd4-94ea-e27561133219"],
Cell[188545, 4390, 566, 14, 105, "Input",ExpressionUUID->"fd58e43c-4051-437c-8d3a-6cfe71a2628c"],
Cell[189114, 4406, 182, 4, 28, "Input",ExpressionUUID->"6faddc39-0bc5-415a-8c80-0cb80cb42a93"],
Cell[189299, 4412, 131, 3, 28, "Input",ExpressionUUID->"471cebc2-8f56-4073-94c0-98cb4b34b272"],
Cell[189433, 4417, 545, 10, 56, "Text",ExpressionUUID->"f5f99285-a80c-40a8-b56d-ac346e7be35f"],
Cell[189981, 4429, 207, 5, 28, "Input",ExpressionUUID->"85d857c0-018f-4fab-afd2-2d88dc10d4fa"],
Cell[190191, 4436, 287, 8, 28, "Input",ExpressionUUID->"ee5f9cef-408a-4644-8a3b-297a2220fff9"],
Cell[190481, 4446, 291, 7, 34, "Text",ExpressionUUID->"8111d641-67f3-4882-96a6-c62b6c43b75d"],
Cell[190775, 4455, 184, 4, 28, "Input",ExpressionUUID->"e39b33ef-7791-4686-9cb5-8f71ea934571"],
Cell[190962, 4461, 569, 10, 56, "Text",ExpressionUUID->"da1e3b29-bb4d-4d7e-9d7d-92df2370dcca"],
Cell[191534, 4473, 301, 9, 28, "Input",ExpressionUUID->"3ebcc4a5-b86f-4057-aa21-95359101c632"],
Cell[191838, 4484, 152, 3, 34, "Text",ExpressionUUID->"69f97d77-fee9-4d6c-88a5-a2e7f5857fab"],
Cell[191993, 4489, 335, 10, 28, "Input",ExpressionUUID->"b586a84f-e725-4450-927e-a359c29e67e5"],
Cell[192331, 4501, 197, 3, 34, "Text",ExpressionUUID->"9ca75960-fb53-4179-a0ee-086861c0d4c7"],
Cell[192531, 4506, 312, 9, 28, "Input",ExpressionUUID->"01a11cd5-44c8-4dba-b188-d5d0948a76c9"],
Cell[192846, 4517, 537, 10, 56, "Text",ExpressionUUID->"f3bf5293-1cb4-4ac7-b702-b53da4b33669"],
Cell[193386, 4529, 234, 6, 28, "Input",ExpressionUUID->"91b89ad7-7417-4858-886b-2e7bd2201e04"],
Cell[193623, 4537, 234, 6, 34, "Text",ExpressionUUID->"3b8f3f7a-b65d-4ee9-9dca-938a7812f5b5"],
Cell[193860, 4545, 249, 7, 28, "Input",ExpressionUUID->"e9601ad5-0fdb-42da-ac8b-4d3260931a36"],
Cell[194112, 4554, 502, 9, 34, "Text",ExpressionUUID->"2ecc8ba3-9991-4366-90ac-a8dbe70d041c"],
Cell[194617, 4565, 333, 10, 28, "Input",ExpressionUUID->"dbdc0ca5-920a-4023-b31f-59224023b892"],
Cell[194953, 4577, 332, 7, 34, "Text",ExpressionUUID->"de1031d7-8ab1-4713-886c-411c8ef384e7"],
Cell[195288, 4586, 287, 8, 28, "Input",ExpressionUUID->"70fe66c4-830a-4074-a5bd-be981c6a5d3c"],
Cell[195578, 4596, 282, 7, 28, "Input",ExpressionUUID->"d1753f84-77b6-4b7e-8938-fdf5cc0ed868"],
Cell[195863, 4605, 312, 9, 28, "Input",ExpressionUUID->"f6a79b45-9ebc-43fd-bc8a-e3558af067cf"],
Cell[CellGroupData[{
Cell[196200, 4618, 164, 3, 44, "Subsubsection",ExpressionUUID->"65f46e4e-f4ae-464c-8428-eb56cf6d98b6"],
Cell[196367, 4623, 269, 6, 34, "Text",ExpressionUUID->"2401be26-284b-46b6-9a52-a1f2ea2886b1"],
Cell[196639, 4631, 331, 7, 28, "Input",ExpressionUUID->"4c6ff125-4715-4517-b475-87a142b4f071"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197019, 4644, 169, 3, 53, "Subsection",ExpressionUUID->"5f6e016f-cf44-424e-9696-f61d6b49bf80"],
Cell[197191, 4649, 1470, 30, 342, "Text",ExpressionUUID->"22c466a8-9fd1-4ad8-9662-56da8af118f7"],
Cell[198664, 4681, 98949, 1627, 518, "Input",ExpressionUUID->"de6c869e-6ce6-414e-81a4-f6266f05b1c5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[297662, 6314, 188, 3, 67, "Chapter",ExpressionUUID->"953d73cf-335c-4773-8ed8-e67c4dc951f4"],
Cell[297853, 6319, 174, 3, 53, "Subsection",ExpressionUUID->"acc7597d-afe5-4d7e-b127-99831f31aa08"]
}, Open  ]],
Cell[298042, 6325, 165, 3, 67, "Chapter",ExpressionUUID->"4f2b9d39-244e-473f-94ca-72743f46dd86"]
}, Open  ]]
}
]
*)

