(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    316471,       6562]
NotebookOptionsPosition[    310629,       6453]
NotebookOutlinePosition[    310994,       6469]
CellTagsIndexPosition[    310951,       6466]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Arithmetic parser", "Title",
 CellChangeTimes->{{3.757707687885583*^9, 
  3.757707690689005*^9}},ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-\
6160422fec5d"],

Cell[CellGroupData[{

Cell["Initialization", "Chapter",
 CellChangeTimes->{{3.757707699905423*^9, 
  3.757707702482992*^9}},ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-\
ceba4ac659e9"],

Cell[CellGroupData[{

Cell["Finite state machine", "Subchapter",
 CellChangeTimes->{{3.757707715690061*^9, 3.757707721818841*^9}, {
  3.757707839577127*^9, 
  3.757707842542766*^9}},ExpressionUUID->"21a9500e-0fd4-4842-9564-\
1968489f3e69"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", "\[Epsilon]", "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "\[Epsilon]", " ", "will", " ", "be", " ", "used", " ", "as", " ", "a", 
    " ", "symbol", " ", "to", " ", "denote", " ", "the", " ", "empty", " ", 
    "string"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Transition", "[", 
    RowBox[{"parent_", ",", "child_", ",", "inputSymbol_"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Parent\>\"", "\[Rule]", "parent"}], ",", 
     RowBox[{"\"\<Node\>\"", "\[Rule]", "child"}], ",", 
     RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "inputSymbol"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EmptyTransition", "[", 
    RowBox[{"parent_", ",", "child_"}], "]"}], ":=", 
   RowBox[{"Transition", "[", 
    RowBox[{"parent", ",", "child", ",", "\[Epsilon]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FATransitions", "[", 
    RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"transitions", ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Concatenate", "[", "l_", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Join", ",", "l"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.74863044954312*^9, 3.748630549858803*^9}, {
  3.7486306598174953`*^9, 3.748630694423757*^9}, {3.748632233538381*^9, 
  3.748632245553666*^9}, {3.7486942316328907`*^9, 3.7486942320239067`*^9}, {
  3.7486943237098417`*^9, 3.748694324963642*^9}, {3.7486946577550783`*^9, 
  3.748694659233904*^9}, {3.74889494655582*^9, 3.7488949594597397`*^9}, {
  3.750262163674677*^9, 3.7502621646742783`*^9}},
 CellLabel->
  "(Debug) In[1]:=",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NameTag", "[", 
     RowBox[{"machine_Association", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Subscript", "[", 
     RowBox[{
      RowBox[{"machine", "[", "\"\<Name\>\"", "]"}], ",", 
      RowBox[{"ToString", "[", "state", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "FAPlot", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Legended\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"\"\<Labeled\>\"", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FAPlot", "[", 
    RowBox[{"machine_Association", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "graphData", ",", "startTag", ",", "acceptTags", ",", "legend", ",", 
       "graph"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Labeled\>\"", "]"}], ",", 
        "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "False", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"p", "\[Rule]", "n"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"legend", " ", "=", " ", 
       RowBox[{"PointLegend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LightBlue", ",", "Red", ",", "Green", ",", "Purple"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<State\>\"", ",", "\"\<Start state\>\"", ",", 
           "\"\<Accept state\>\"", ",", "\"\<Start/Accept state\>\""}], "}"}],
          ",", 
         RowBox[{"LegendMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Disk", "[", "]"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"graph", " ", "=", " ", 
       RowBox[{"Graph", "[", "\[IndentingNewLine]", 
        RowBox[{"graphData", ",", "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "400"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"VertexStyle", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], "]"}]}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Legended\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Legended", "[", 
          RowBox[{"graph", ",", "legend"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "graph", "]"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.748703583696494*^9, {3.748717335552705*^9, 3.748717369089313*^9}, {
   3.7487174584052687`*^9, 3.748717459193922*^9}, 3.74871753815415*^9, {
   3.748717731275473*^9, 3.7487177431597853`*^9}, {3.748718023462709*^9, 
   3.748718024784854*^9}, {3.748718258122054*^9, 3.748718320605734*^9}, {
   3.748719213952038*^9, 3.748719215649395*^9}, {3.7488011555571203`*^9, 
   3.74880115834823*^9}, {3.748880460505911*^9, 3.7488805567965927`*^9}, {
   3.748880603048099*^9, 3.748880621274437*^9}, {3.750264951084629*^9, 
   3.750265014789797*^9}, 3.7502651890345573`*^9, {3.75045790436664*^9, 
   3.7504579050717087`*^9}, {3.750457965215435*^9, 3.750458042670035*^9}, {
   3.75045810531732*^9, 3.750458170800473*^9}, {3.750465993589058*^9, 
   3.750466003810172*^9}},
 CellLabel->
  "(Debug) In[6]:=",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"DFA", " ", "object", " ", "constructor"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DFA", "[", 
      RowBox[{
      "name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
       RowBox[{"stateExpr_:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Descriptive", " ", "name", " ", "to", " ", "keep", " ", "in", " ", 
         "track", " ", "the", " ", "regular", " ", "operations", " ", 
         "applied", " ", "to", " ", "it"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Each", " ", "state", " ", "may", " ", "have", " ", "an", " ", 
        "associated", " ", "expression"}], " ", "*)"}], "\[IndentingNewLine]",
       "|>"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Return", " ", "every", " ", "deterministic", " ", "transition", " ", 
     "leading", " ", "to", " ", "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFATransitions", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Cases", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"KeyValuePattern", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], "]"}]
      }], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Get", " ", "the", " ", "next", " ", "state"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "DFAIterate", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFAIterate", "[", 
      RowBox[{"transitions_", ",", "state_", ",", "inputSymbol_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "next", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"next", " ", "=", " ", 
         RowBox[{"Cases", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"DFATransitions", "[", 
            RowBox[{"transitions", ",", "state"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
              RowBox[{"i_", "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "A", " ", "DFA", " ", "must", " ", "have", " ", "only", " ", "one", 
          " ", "available", " ", "transition"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "next", "]"}], "\[Equal]", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{"First", "[", "next", "]"}], "]"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Return", "[", 
              RowBox[{
               RowBox[{"First", "[", "next", "]"}], "[", "\"\<Node\>\"", 
               "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"TODO", ":", " ", 
            RowBox[{"Crear", " ", "mecanismo", " ", "de", " ", "alerta"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Returns", " ", "the", " ", "trace", " ", "of", " ", "the", " ", 
     "computation", " ", "and", " ", "the", " ", "result", " ", "of", " ", 
     "whether", " ", "the", " ", "machine", " ", "accepts", " ", "the", " ", 
     "inputString"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFACompute", "[", 
      RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"computation", " ", "=", " ", 
         RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"DFAIterate", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"#1", "[", "\"\<Node\>\"", "]"}], ",", "#2", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"<|", 
            RowBox[{"\"\<Node\>\"", "\[Rule]", 
             RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
           ",", "\[IndentingNewLine]", "inputString"}], "\[IndentingNewLine]",
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", "\"\<Node\>\"", 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"computation", ",", "result"}], "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7486944026200647`*^9, 3.748694431856285*^9}, {
   3.748694463718862*^9, 3.748694511118013*^9}, {3.748694638883589*^9, 
   3.748694682179003*^9}, {3.7486947181076593`*^9, 3.748694744613942*^9}, {
   3.748695667903243*^9, 3.7486956915023117`*^9}, {3.7486958274053373`*^9, 
   3.748695899653247*^9}, {3.748695946982939*^9, 3.748695947502063*^9}, {
   3.748695997879771*^9, 3.748696002073357*^9}, {3.74869611727765*^9, 
   3.748696163820511*^9}, {3.748696233292552*^9, 3.748696413377371*^9}, {
   3.748696491389463*^9, 3.748696524052392*^9}, {3.74869658995395*^9, 
   3.748696593760084*^9}, {3.748703307880711*^9, 3.748703326225828*^9}, {
   3.748703367086596*^9, 3.748703383678033*^9}, {3.748703419136819*^9, 
   3.748703454047913*^9}, {3.748703484657639*^9, 3.748703485296896*^9}, {
   3.748801149430265*^9, 3.748801150396734*^9}, {3.74889367469322*^9, 
   3.748893826840029*^9}, 3.748893895761705*^9, {3.74889402959659*^9, 
   3.7488940352397423`*^9}, {3.748894980807784*^9, 3.748895011747181*^9}, {
   3.75025561350286*^9, 3.750255745901127*^9}, {3.750255897147194*^9, 
   3.750255910369213*^9}, {3.750256208805339*^9, 3.7502562256182756`*^9}, {
   3.7502562694987507`*^9, 3.750256277587036*^9}, {3.750261486482411*^9, 
   3.7502615142919807`*^9}, {3.7502627764170923`*^9, 
   3.7502627866744547`*^9}, {3.7502652041189337`*^9, 3.750265256846733*^9}, {
   3.750265535917069*^9, 3.7502655647458143`*^9}, {3.750547336438621*^9, 
   3.750547372594603*^9}},
 CellLabel->
  "(Debug) In[9]:=",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFA", "[", 
     RowBox[{"name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
      RowBox[{"stateExpr_:", 
       RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], " ", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], 
     "\[IndentingNewLine]", "|>"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ContainsQ", "[", 
    RowBox[{"list_List", ",", "form_"}], "]"}], ":=", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"list", ",", "form"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ContainsQ", "[", 
     RowBox[{"form1_", ",", "form2_"}], "]"}], ":=", 
    RowBox[{"form1", "===", "form2"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PureNondetStateQ", "[", 
     RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{
        RowBox[{"FATransitions", "[", 
         RowBox[{"transitions", ",", "state"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
      " ", "===", " ", 
      RowBox[{"{", "\[Epsilon]", "}"}]}], ")"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Return", " ", "the", " ", "list", " ", "of", " ", "nodes", " ", 
    "accesible", " ", "via", " ", "empty", " ", "transitions"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Association"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"state", "[", "\"\<Node\>\"", "]"}]}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Integer"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", "state"}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_List"}], "]"}], ":=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NFANondetNodes", "[", 
         RowBox[{"transitions", ",", "#"}], "]"}], "&"}], ",", "state"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFANondetNodesRecursive", "[", 
     RowBox[{"transitions_", ",", "states_"}], "]"}], " ", ":=", " ", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"NFANondetNodes", "[", 
           RowBox[{"transitions", ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
         "]"}], "]"}], "&"}], ",", "states"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "NFAIterate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAIterate", "[", 
    RowBox[{"transitions_", ",", 
     RowBox[{"state_", "?", "AtomQ"}], ",", "inputSymbol_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "next", ",", "deterministicTransitions", ",", "forkTransitions", ",", 
       "deterministicNodes", ",", "emptyTransition"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Get", " ", "all", " ", "the", " ", "transitions", " ", "corresponding",
        " ", "to", " ", "a", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"deterministicTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"FATransitions", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}], ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
            RowBox[{"i_", "/;", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"deterministicNodes", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"deterministicTransitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "]"}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Run", " ", "through", " ", "the", " ", "empty", " ", "transitions", 
        " ", "of", " ", "the", " ", "DFA", " ", "nodes"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodes", "[", 
        RowBox[{"transitions", ",", "deterministicNodes"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Get", " ", "past", " ", "the", " ", "current", " ", "deterministic", 
        " ", "nodes"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", 
        RowBox[{"transitions", ",", "forkTransitions"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Append", " ", "every", " ", "valid", " ", "nondet", " ", 
        "transition"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "next", " ", "nodes", " ", "will", " ", "be", " ", "a", 
        " ", "union", " ", "between", " ", "the", " ", "deterministic", " ", 
        "transitions", " ", "and", " ", "the", " ", "nodes", " ", "reachable",
         " ", "from", " ", "nondet", " ", "transitions"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"next", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"deterministicTransitions", ",", "forkTransitions"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "next", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"next", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFAIterate", "[", 
     RowBox[{"transitions_", ",", "state_List", ",", "inputSymbol_", ",", 
      RowBox[{"opt", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFAIterate", "[", 
          RowBox[{"transitions", ",", "#", ",", "inputSymbol", ",", "opt"}], 
          "]"}], "&"}], ",", "state"}], "]"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFACompute", "[", 
    RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"computation", ",", "result", ",", "start"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"start", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"<|", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", 
            RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"computation", " ", "=", " ", 
       RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"NFAIterate", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"#1", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", "#2", 
            ",", 
            RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], ",",
          "\[IndentingNewLine]", "start", ",", "\[IndentingNewLine]", 
         "inputString"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"Or", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
              "#"}], "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748696660242413*^9, 3.7486966647459993`*^9}, {
   3.7486967021050158`*^9, 3.748696831536084*^9}, {3.74869697189542*^9, 
   3.7486969809648447`*^9}, 3.748697215466445*^9, 3.74869751995757*^9, {
   3.7487002667885447`*^9, 3.748700369011458*^9}, {3.748700419261013*^9, 
   3.74870044744256*^9}, {3.748700478215622*^9, 3.7487004832193537`*^9}, {
   3.7487005955665207`*^9, 3.7487006595068207`*^9}, {3.748700694288843*^9, 
   3.748700746453335*^9}, 3.748700817284863*^9, {3.74870133603623*^9, 
   3.748701338714301*^9}, {3.748701412553027*^9, 3.748701433385751*^9}, {
   3.748703690592517*^9, 3.7487036910563593`*^9}, {3.74872577206177*^9, 
   3.748725873675222*^9}, {3.748726096655231*^9, 3.748726097862135*^9}, {
   3.748726161467107*^9, 3.7487261661149473`*^9}, 3.748726593319901*^9, {
   3.748726796627596*^9, 3.748726818991522*^9}, {3.7487268513408527`*^9, 
   3.748726851865614*^9}, {3.748726887823266*^9, 3.748726897576947*^9}, {
   3.748727017532686*^9, 3.7487270198114967`*^9}, {3.74872708125178*^9, 
   3.7487270820410557`*^9}, {3.7487288780661297`*^9, 3.74872887985073*^9}, {
   3.748730819090145*^9, 3.748730822972616*^9}, {3.748732013638582*^9, 
   3.748732058344652*^9}, {3.74880113462694*^9, 3.748801136463613*^9}, {
   3.7488035603062153`*^9, 3.748803604623309*^9}, {3.74880375095224*^9, 
   3.748803753859046*^9}, {3.7488042695495777`*^9, 3.748804274425645*^9}, {
   3.7488047683020563`*^9, 3.7488047718077297`*^9}, {3.748804812399547*^9, 
   3.7488049951363697`*^9}, {3.74880505264699*^9, 3.748805053420678*^9}, {
   3.748805470504953*^9, 3.748805476503813*^9}, {3.748807279102119*^9, 
   3.7488072869248123`*^9}, {3.748807328740156*^9, 3.748807400696988*^9}, {
   3.748807808587181*^9, 3.748807836949627*^9}, {3.748808099301045*^9, 
   3.748808174415368*^9}, {3.7488082143482523`*^9, 3.748808217419037*^9}, {
   3.748808272406879*^9, 3.748808275718526*^9}, {3.748808399482581*^9, 
   3.748808399578511*^9}, {3.7488084453504753`*^9, 3.748808510178919*^9}, {
   3.748808549481038*^9, 3.748808553538176*^9}, {3.748808682742573*^9, 
   3.748808682986268*^9}, {3.748808785518733*^9, 3.748808809006649*^9}, 
   3.74880891383162*^9, {3.748809105368822*^9, 3.7488091409700403`*^9}, {
   3.7488094667814283`*^9, 3.7488094694792128`*^9}, {3.7488096384105253`*^9, 
   3.748809641309116*^9}, 3.748809871655493*^9, {3.748809926286551*^9, 
   3.748809926477386*^9}, {3.74880996291532*^9, 3.748809993168223*^9}, 
   3.748810655609845*^9, {3.748810913056004*^9, 3.748811010806554*^9}, {
   3.748811060755949*^9, 3.748811061282751*^9}, {3.748811135937064*^9, 
   3.748811136115068*^9}, 3.748811387794766*^9, {3.748811455189604*^9, 
   3.748811493198897*^9}, {3.748811570454311*^9, 3.7488115713057337`*^9}, {
   3.7488183364958467`*^9, 3.748818347315804*^9}, 3.7488184138505573`*^9, {
   3.748818476964366*^9, 3.7488184974181433`*^9}, {3.748818632924273*^9, 
   3.748818656918626*^9}, {3.748818795287841*^9, 3.748818963348254*^9}, {
   3.748819708145546*^9, 3.748819721079083*^9}, {3.74881982125387*^9, 
   3.748819821436996*^9}, {3.748819866580336*^9, 3.748819871655216*^9}, {
   3.748819980285425*^9, 3.748819984589164*^9}, {3.748820625590354*^9, 
   3.748820705429714*^9}, {3.748820745775682*^9, 3.748820746633438*^9}, {
   3.748820992073642*^9, 3.748821001058663*^9}, {3.748821103036991*^9, 
   3.748821111674374*^9}, {3.7488211428106337`*^9, 3.74882115195549*^9}, {
   3.748821305823208*^9, 3.748821306269497*^9}, {3.7488242901542473`*^9, 
   3.748824290476968*^9}, 3.7488247109240713`*^9, {3.748873218603817*^9, 
   3.748873337382937*^9}, {3.7488733681466618`*^9, 3.748873411836718*^9}, {
   3.7488734559127913`*^9, 3.7488734846393967`*^9}, 3.748874369479238*^9, {
   3.7488748523353148`*^9, 3.7488748915303173`*^9}, {3.748874984927391*^9, 
   3.748875042232397*^9}, {3.748875076959214*^9, 3.7488751458652973`*^9}, {
   3.748875251786681*^9, 3.7488752642448053`*^9}, {3.748875340638957*^9, 
   3.7488753476113367`*^9}, {3.7488753838410873`*^9, 3.748875405935307*^9}, {
   3.748875555618806*^9, 3.748875559889102*^9}, {3.748875658590469*^9, 
   3.748875658864766*^9}, {3.748875696679154*^9, 3.7488756969853992`*^9}, {
   3.748889791049992*^9, 3.748889811896161*^9}, {3.74889007150378*^9, 
   3.7488901091101933`*^9}, {3.74889048215899*^9, 3.74889051222755*^9}, {
   3.748890629123641*^9, 3.7488906440530777`*^9}, {3.748890753176607*^9, 
   3.748890805779504*^9}, {3.7488908426502247`*^9, 3.7488908689660378`*^9}, {
   3.7488909142413054`*^9, 3.748890914664418*^9}, {3.748891441953947*^9, 
   3.748891446155963*^9}, {3.748891538016032*^9, 3.748891582391594*^9}, {
   3.7488916155734787`*^9, 3.748891712650625*^9}, {3.748894094876234*^9, 
   3.748894099111452*^9}, {3.748895551322866*^9, 3.748895570330468*^9}, {
   3.7502559198574057`*^9, 3.7502559502206593`*^9}, {3.750256329382059*^9, 
   3.75025635028307*^9}, {3.750256700770001*^9, 3.750256741046235*^9}, {
   3.750261562702235*^9, 3.7502616043085537`*^9}, {3.750262809143704*^9, 
   3.7502628357536173`*^9}, {3.75026619353651*^9, 3.7502662181861563`*^9}, {
   3.750266316706027*^9, 3.750266374824163*^9}, {3.7503647141078377`*^9, 
   3.750364714673781*^9}, {3.750364767204461*^9, 3.750364816349908*^9}, {
   3.750366727570877*^9, 3.750366734490394*^9}, {3.75042022868252*^9, 
   3.750420229108513*^9}},
 CellLabel->
  "(Debug) In[14]:=",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TransitionApplyThreshold", "[", 
    RowBox[{"transition_", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "+", "threshold"}], "&"}], ",", "transition", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Node\>\"", "]"}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MachineApplyThreshold", "[", 
    RowBox[{"machine_Association", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Name\>\"", "\[Rule]", 
      RowBox[{"machine", "[", "\"\<Name\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"TransitionApplyThreshold", "[", 
          RowBox[{"#", ",", "threshold"}], "]"}], "&"}], ",", 
        RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<StartState\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "+", 
       "threshold"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], "+", 
       "threshold"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], "]"}], 
         "\[NotEqual]", " ", "0"}], ",", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "+", "threshold"}], "&"}], ",", 
          RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "1"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.7488011080330544`*^9, {3.750257081825346*^9, 3.7502571060047483`*^9}, {
   3.750257582428767*^9, 3.7502576073845387`*^9}},
 CellLabel->
  "(Debug) In[26]:=",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetDirectSuccesors", "[", 
     RowBox[{"machine_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Select", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFANondetNodes", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], 
          "]"}], "&"}], ",", 
        RowBox[{"{", "state", "}"}], ",", "2"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"ContainsQ", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
            RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}]}], " ", "&&", 
         RowBox[{"PureNondetStateQ", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"FAParents", "[", 
            RowBox[{
             RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
             RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], "]"}], 
          "\[Equal]", "1"}]}], ")"}], "\[IndentingNewLine]", "&"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ReplaceKey", "[", 
     RowBox[{"assoc_", ",", "key_", ",", "replaceTo_"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"replaceTo", "&"}], ",", "assoc", ",", 
      RowBox[{"Key", "[", "key", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeleteIntermediateTransition", "[", 
     RowBox[{"transitions_", ",", "startState_", ",", "endState_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "deleteState", ",", "replacement", ",", "newTransitions", ",", 
        "cleanedUp"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"deleteState", " ", "=", " ", 
        RowBox[{"endState", "[", "\"\<Parent\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"replacement", " ", "=", " ", 
        RowBox[{"ReplaceKey", "[", 
         RowBox[{"endState", ",", "\"\<Parent\>\"", ",", 
          RowBox[{"startState", "[", "\"\<Node\>\"", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Parent\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"cleanedUp", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"newTransitions", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"cleanedUp", ",", "replacement"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newTransitions", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SimplifyStateIteration", "[", 
    RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newMachine", ",", "newTransitions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newMachine", " ", "=", " ", "nfa"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Fold", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteIntermediateTransition", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "|>"}], ",", 
            "#2"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"GetDirectSuccesors", "[", 
          RowBox[{"nfa", ",", "state"}], "]"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"newMachine", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ",
        "newTransitions"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SimplifyState", "[", 
     RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SimplifyStateIteration", "[", 
        RowBox[{"#", ",", "state"}], "]"}], "&"}], ",", "nfa"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SimplifyMachine", "[", "nfa_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"simplified", ",", "oldStates", ",", "newStates", ",", 
       RowBox[{"stateRelabelRule", " ", "=", " ", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"simplified", " ", "=", " ", 
       RowBox[{"Fold", "[", 
        RowBox[{"SimplifyState", ",", "nfa", ",", 
         RowBox[{"GetStates", "[", 
          RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"oldStates", " ", "=", " ", 
       RowBox[{"GetStates", "[", 
        RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"newStates", " ", "=", " ", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"Length", "[", "oldStates", "]"}], "-", "1"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"stateRelabelRule", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"oldStates", "\[Rule]", "newStates"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Replace", "[", 
            RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
          RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Node\>\"", "]"}]}], "}"}]}], "}"}]}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], " ", "=", " ", 
       
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], " ", "=", 
       " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], "]"}],
          "\[NotEqual]", " ", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], " ", 
          "=", " ", 
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Replace", "[", 
              RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
            RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "simplified", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750364998620798*^9, 3.7503650158668737`*^9}, {
   3.75036515975064*^9, 3.750365172407138*^9}, {3.750365205458529*^9, 
   3.7503652380323153`*^9}, {3.7503660801827383`*^9, 3.750366090758335*^9}, {
   3.7503663461945887`*^9, 3.750366374019957*^9}, {3.750366748755925*^9, 
   3.750366778092875*^9}, {3.750366929251663*^9, 3.7503669714568996`*^9}, {
   3.750418126799262*^9, 3.75041812711924*^9}, {3.7504188815057087`*^9, 
   3.750418882737925*^9}, {3.750419763370091*^9, 3.750419802856162*^9}, {
   3.750420144465686*^9, 3.750420144797082*^9}, {3.7504557414041567`*^9, 
   3.7504557418426123`*^9}, {3.750455807898966*^9, 3.7504558158804197`*^9}, {
   3.750455885104082*^9, 3.7504558890245743`*^9}, {3.7504559602622547`*^9, 
   3.7504559609399433`*^9}, {3.750456077257615*^9, 3.7504560776730328`*^9}, {
   3.750456563904047*^9, 3.7504566001341677`*^9}, {3.75045683067983*^9, 
   3.750456850430387*^9}, 3.750456945376627*^9, {3.7504569899984837`*^9, 
   3.750457054656065*^9}, {3.7504571702230186`*^9, 3.7504571903594513`*^9}, 
   3.750457228095786*^9, {3.750457755513661*^9, 3.750457768254644*^9}, 
   3.750460239484729*^9, {3.750460316589691*^9, 3.75046037279637*^9}, {
   3.75046046293909*^9, 3.750460489202183*^9}, {3.7504605243792677`*^9, 
   3.7504605285463743`*^9}, 3.750460626232395*^9, {3.750460756664249*^9, 
   3.750460757604216*^9}, {3.750460858165915*^9, 3.7504608718712378`*^9}, {
   3.75046129217626*^9, 3.7504613431681747`*^9}, {3.7504613795029593`*^9, 
   3.7504613815429*^9}, {3.750462019486672*^9, 3.750462043861949*^9}, 
   3.750462125452442*^9, {3.750462202208126*^9, 3.75046236819396*^9}, {
   3.750462408880802*^9, 3.750462413123973*^9}, {3.750462667053422*^9, 
   3.7504626872869053`*^9}, {3.7504627358468637`*^9, 
   3.7504627581677322`*^9}, {3.750463038129942*^9, 3.750463077273861*^9}, {
   3.750463175146579*^9, 3.750463191360002*^9}, {3.750463564110938*^9, 
   3.75046357731059*^9}, {3.750463648460927*^9, 3.750463660917789*^9}, {
   3.750466103797947*^9, 3.750466106124605*^9}, {3.7506138823329782`*^9, 
   3.750613899429646*^9}},
 CellLabel->
  "(Debug) In[28]:=",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"machine1_Association", ",", "machine2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newIndexThreshold", ",", "newM1", ",", "newM2", ",", 
       "newAccept", ",", "newTransitions", ",", "newMachine", ",", 
       "newStateExpressions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM1", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine1", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine2", ",", 
         RowBox[{"newIndexThreshold", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"newM1", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM1", "[", "\"\<StartState\>\"", "]"}]}], "]"}], ",", 
         " ", 
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"newM1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
           RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}], 
         ",", "First"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\[Union]\>\"", ",", 
            RowBox[{"machine2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"machines__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "machines", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAUnion", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487022125147448`*^9, 3.7487022284560547`*^9}, {
   3.7487037949551*^9, 3.748703810067548*^9}, {3.748703847611432*^9, 
   3.74870404079329*^9}, {3.74870407141705*^9, 3.748704089081665*^9}, {
   3.748704142419063*^9, 3.748704143225679*^9}, {3.748704223761829*^9, 
   3.748704353447658*^9}, {3.748704390442054*^9, 3.748704436263219*^9}, 
   3.7487046978191*^9, {3.748719121151486*^9, 3.748719139032186*^9}, {
   3.74871933691008*^9, 3.748719376249671*^9}, 3.748719468746488*^9, {
   3.748719573108873*^9, 3.748719631982278*^9}, {3.7487196623214493`*^9, 
   3.7487196895780582`*^9}, {3.74871973646187*^9, 3.748719752903273*^9}, {
   3.748801102369158*^9, 3.748801103866334*^9}, {3.750257229482656*^9, 
   3.750257289656272*^9}, {3.750257454533383*^9, 3.750257463970312*^9}, {
   3.7503655558430223`*^9, 3.750365561933421*^9}, {3.750458378519979*^9, 
   3.7504583839423647`*^9}, {3.7504587614814253`*^9, 3.7504587632883*^9}, {
   3.750458798210857*^9, 3.750458827119969*^9}, {3.7504607199153013`*^9, 
   3.7504607241374617`*^9}},
 CellLabel->
  "(Debug) In[34]:=",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machine1_Association", ",", "machine2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "newIndexThreshold", ",", "newM2", ",", "newTransitions", ",", 
       "newMachine", ",", "newStateExpressions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine2", ",", "newIndexThreshold"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"#", ",", 
            RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "&"}],
          ",", 
         RowBox[{"machine1", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"machine1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
         RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "newStateExpressions", "]"}], "\[NotEqual]", 
          " ", "0"}], ",", 
         RowBox[{"SortBy", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"machine1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
             
             RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}],
            ",", "First"}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Name\>\"", "]"}], ",", 
            RowBox[{"machine2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", 
          RowBox[{"machine1", "[", "\"\<StartState\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machines__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "machines", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAConcatention", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.748719789148725*^9, 3.7487197944868813`*^9}, {3.7488010865882683`*^9, 
   3.748801088815999*^9}, {3.7488012499936447`*^9, 3.748801250218133*^9}, {
   3.750257712785565*^9, 3.750257750828499*^9}, 3.750458782188929*^9, {
   3.750458831040436*^9, 3.750458839488649*^9}, {3.750460710913538*^9, 
   3.750460715354344*^9}, {3.750465443814703*^9, 3.750465482733283*^9}},
 CellLabel->
  "(Debug) In[36]:=",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFAStar", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newM", ",", "newTransitions", ",", "newAccept", ",", 
       "newMachine"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newM", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"minIndex", ",", 
            RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "}"}], 
         ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"EmptyTransition", "[", 
             RowBox[{"#", ",", 
              RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
            "&"}], ",", 
           RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "minIndex"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<(\>\"", ",", 
            RowBox[{"machine", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\!\(\*SuperscriptBox[\()\), \(*\)]\)\>\""}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
          RowBox[{"newM", "[", "\"\<StateExpressions\>\"", "]"}]}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.74870536295217*^9, 3.748705371149591*^9}, {3.748705402510075*^9, 
   3.7487054412116423`*^9}, {3.748705648603009*^9, 3.748705745937058*^9}, {
   3.7487058887337914`*^9, 3.748705894022087*^9}, {3.748705976402442*^9, 
   3.748705995321293*^9}, {3.748719272227729*^9, 3.74871928403937*^9}, {
   3.7487384672229953`*^9, 3.7487384675042257`*^9}, {3.748801068950972*^9, 
   3.748801079915145*^9}, {3.750258036678369*^9, 3.7502580535842323`*^9}, {
   3.750458883956998*^9, 3.7504588853391447`*^9}, {3.750459955991395*^9, 
   3.750459957270669*^9}},
 CellLabel->
  "(Debug) In[38]:=",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Check", " ", "if", " ", "there", " ", "is", " ", "at", " ", "least", " ", 
    "one", " ", "of", " ", "the", " ", "accepted", " ", "states", " ", "in", 
    " ", "searchState"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", 
       RowBox[{"searchState_", "?", "AtomQ"}]}], "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"stateList", ",", "searchState"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", "searchState_List"}], "]"}], ":=", 
     RowBox[{"Apply", "[", 
      RowBox[{"Or", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"stateList", ",", "#"}], "]"}], "&"}], ",", 
         "searchState"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "parents", " ", "of", " ", "the", " ", "current", " ", 
     "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FAParents", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{
       RowBox[{"Cases", "[", 
        RowBox[{"transitions", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Check", " ", "if", " ", "the", " ", "state", " ", "is", " ", 
     "inaccesible"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"JunkStateQ", "[", 
      RowBox[{"transitions_", ",", "start_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"stateParents", ",", "nonSelfTransitions"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ContainsStateQ", "[", 
           RowBox[{"start", ",", "state"}], "]"}], ",", 
          RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"stateParents", " ", "=", " ", 
         RowBox[{"FAParents", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nonSelfTransitions", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"stateParents", ",", 
           RowBox[{"{", "state", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "nonSelfTransitions", "]"}], "\[Equal]", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "False", "]"}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", "l_List", "]"}], ":=", 
     RowBox[{"Sort", "[", "l", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", 
      RowBox[{"l_", "?", "AtomQ"}], "]"}], ":=", "l"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "alphabet", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetAlphabet", "[", "transitions_", "]"}], ":=", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"transitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
        "]"}], ",", "\[Epsilon]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "states", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetStates", "[", "transitions_", "]"}], ":=", 
     RowBox[{"Sort", "[", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
              RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}]}], "}"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"{", 
            RowBox[{"p", ",", "n"}], "}"}]}]}], "]"}], "]"}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "the", " ", "states", " ", "reachable", " ", "from", " ", 
     "the", " ", "current", " ", "states", " ", "list"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Explore", "[", 
      RowBox[{"transitions_", ",", "states_"}], "]"}], ":=", 
     RowBox[{"Map", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Transition", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SafeSort", "[", "states", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"SafeSort", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"NFAIterate", "[", 
             RowBox[{"transitions", ",", "states", ",", "#", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}]}], "]"}], "]"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
       RowBox[{"GetAlphabet", "[", "transitions", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Explore", " ", "one", " ", "step", " ", "down", " ", "each", " ", 
     "branch", " ", "of", " ", "the", " ", "computation", " ", "and", " ", 
     "append", " ", "it", " ", "to", " ", "the", " ", "explored", " ", 
     "branches", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StepDown", "[", 
      RowBox[{"transitions_", ",", "branches_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{"branches", ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Explore", "[", "\[IndentingNewLine]", 
              RowBox[{"transitions", ",", "\[IndentingNewLine]", 
               RowBox[{"#", "[", "\"\<Node\>\"", "]"}]}], 
              "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]",
             "branches"}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "1"}], 
       "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewStateNode", "[", 
      RowBox[{"node_", ",", "newStateRules_"}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Parent\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Parent\>\"", "]"}], ",", 
          "newStateRules"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Node\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Node\>\"", "]"}], ",", "newStateRules"}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"node", "[", "\"\<InputSymbol\>\"", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAToDFA", "[", "machine_Association", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "protoDFA", ",", "start", ",", "protoDFAStates", ",", "newStateRules",
          ",", "newStates", ",", "containsAccept", ",", "newMachine", ",", 
         "newAccept", ",", "newStart", ",", "newTransitions", ",", 
         "newTransitionsCleanedUp", ",", "protoDFAExpressionNodes", ",", 
         "newStateExpressionsNodes"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"machine", "[", "\"\<Type\>\"", "]"}], " ", "=!=", " ", 
           "\"\<NFA\>\""}], ",", 
          RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Explore", " ", "all", " ", "paths", " ", "until", " ", "there", " ",
           "is", " ", "no", " ", "unexplored", " ", "transition"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"start", " ", "=", " ", "\[IndentingNewLine]", 
         RowBox[{"FixedPoint", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
              RowBox[{"#", ",", "\[IndentingNewLine]", 
               RowBox[{"NFANondetNodes", "[", 
                RowBox[{
                 RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], 
                "]"}]}], "]"}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
            "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Make", " ", "a", " ", "DFA", " ", "by", " ", "exploring", " ", 
          "all", " ", "possible", " ", "paths", " ", "in", " ", "the", " ", 
          "NFA"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"protoDFA", " ", "=", " ", 
         RowBox[{"FixedPoint", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StepDown", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              "#"}], "]"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"start", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "|>"}], 
            "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"protoDFAStates", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Match", " ", "old", " ", "NFA", " ", "parameters", " ", "to", " ", 
          "the", " ", "new", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"newStateRules", " ", "=", " ", 
         RowBox[{"Thread", "[", 
          RowBox[{"protoDFAStates", "\[Rule]", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "protoDFAStates", "]"}], "]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"newStates", " ", "=", 
         RowBox[{"newStateRules", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"containsAccept", " ", "=", " ", 
         RowBox[{"Position", "[", 
          RowBox[{"protoDFAStates", ",", 
           RowBox[{"s_", "/;", 
            RowBox[{"ContainsStateQ", "[", 
             RowBox[{"s", ",", 
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], 
             "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"newAccept", " ", "=", " ", 
         RowBox[{"Extract", "[", 
          RowBox[{"newStates", ",", "containsAccept"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newStart", " ", "=", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"First", "[", "protoDFAStates", "]"}], ",", 
           "newStateRules"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"newTransitions", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"NewStateNode", "[", 
             RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"protoDFA", ",", "1"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newTransitionsCleanedUp", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"newTransitions", ",", 
            RowBox[{"t_", "/;", " ", 
             RowBox[{"JunkStateQ", "[", 
              RowBox[{"newTransitions", ",", "newStart", ",", 
               RowBox[{"t", "[", "\"\<Node\>\"", "]"}]}], "]"}]}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"protoDFAExpressionNodes", " ", "=", " ", 
         RowBox[{"Concatenate", "[", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{"protoDFAStates", ",", 
                 RowBox[{"s_", "/;", 
                  RowBox[{"ContainsStateQ", "[", 
                   RowBox[{"s", ",", 
                    RowBox[{"First", "[", "#", "]"}]}], "]"}]}]}], "]"}], 
               "\[Rule]", 
               RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "protoDFAExpressionNodes", "]"}], 
           "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Replace", "[", 
               RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
             "protoDFAExpressionNodes", ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"newMachine", " ", "=", " ", 
         RowBox[{"<|", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<Name\>\"", "\[Rule]", 
            RowBox[{"machine", "[", "\"\<Name\>\"", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<Transitions\>\"", "\[Rule]", "newTransitionsCleanedUp"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"\"\<StartState\>\"", "\[Rule]", "newStart"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<StateExpressions\>\"", "\[Rule]", 
            "newStateExpressionsNodes"}]}], "\[IndentingNewLine]", "|>"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748738116522354*^9, 3.7487381169129496`*^9}, {
   3.748738158246546*^9, 3.7487382802511435`*^9}, {3.7487385894166284`*^9, 
   3.7487386169375763`*^9}, {3.748738680548212*^9, 3.748738682590212*^9}, {
   3.7487387313849397`*^9, 3.748738735385742*^9}, {3.748738769293524*^9, 
   3.7487387933746843`*^9}, {3.748738834312461*^9, 3.7487388501955876`*^9}, {
   3.74873910447606*^9, 3.7487391139458637`*^9}, {3.7487395671939325`*^9, 
   3.7487395678504243`*^9}, {3.7487399301793365`*^9, 
   3.7487400405796556`*^9}, {3.748778288431039*^9, 3.74877829725898*^9}, {
   3.748778336607294*^9, 3.748778346753574*^9}, {3.7487785536527443`*^9, 
   3.7487785656020393`*^9}, {3.748785833642488*^9, 3.748785833808627*^9}, {
   3.7487859100429697`*^9, 3.748785916181673*^9}, {3.748786505715897*^9, 
   3.748786505889102*^9}, {3.748786729968886*^9, 3.748786746499671*^9}, {
   3.748786912970744*^9, 3.748786960223692*^9}, {3.748787020551764*^9, 
   3.748787044188747*^9}, 3.7487872186123533`*^9, {3.748787419786417*^9, 
   3.748787431514227*^9}, {3.748787504666951*^9, 3.748787547671826*^9}, {
   3.74878766431117*^9, 3.748787680662057*^9}, {3.748787887520782*^9, 
   3.7487879249258432`*^9}, {3.748800292059382*^9, 3.748800301736413*^9}, {
   3.748800474346759*^9, 3.7488005101594152`*^9}, {3.74880060174504*^9, 
   3.7488006221840773`*^9}, {3.74880072485863*^9, 3.748800725441907*^9}, {
   3.74880075934431*^9, 3.7488008884978313`*^9}, {3.748800929965019*^9, 
   3.7488009310692883`*^9}, {3.74880099766628*^9, 3.748801043554268*^9}, 
   3.74881915174897*^9, 3.748819560915099*^9, {3.748875904270234*^9, 
   3.748875917410491*^9}, 3.7488760544994373`*^9, {3.748876104117798*^9, 
   3.748876107310285*^9}, {3.7488763188209*^9, 3.748876319090781*^9}, {
   3.748876352807436*^9, 3.7488763610884438`*^9}, {3.748876427632503*^9, 
   3.74887644305375*^9}, {3.7488767113568153`*^9, 3.7488767115476933`*^9}, {
   3.7488771269569473`*^9, 3.7488771388240423`*^9}, {3.748877175832747*^9, 
   3.7488771839931726`*^9}, 3.7488778401039343`*^9, {3.7488779312394753`*^9, 
   3.748877931346951*^9}, {3.748878639644886*^9, 3.748878641819347*^9}, {
   3.748878699517582*^9, 3.748878700291568*^9}, {3.748878733498934*^9, 
   3.7488787640588713`*^9}, 3.748879000885603*^9, 3.748879127485878*^9, 
   3.7488793518544416`*^9, {3.7488794386611223`*^9, 3.7488794399886427`*^9}, {
   3.748879574707954*^9, 3.7488795793609657`*^9}, {3.7488921119514236`*^9, 
   3.7488921221033173`*^9}, {3.7502581600826883`*^9, 
   3.7502582184878197`*^9}, {3.750258347344426*^9, 3.750258457650097*^9}, {
   3.750258588423644*^9, 3.750258608860096*^9}, {3.750258861819542*^9, 
   3.750258888330533*^9}, {3.750260101925166*^9, 3.750260116608245*^9}, {
   3.750260221820777*^9, 3.750260240317586*^9}, {3.7502602769409513`*^9, 
   3.750260308042882*^9}, {3.750260600918014*^9, 3.7502606148493357`*^9}, {
   3.7502606463933363`*^9, 3.7502607050158052`*^9}, {3.75026078890306*^9, 
   3.7502608036382427`*^9}, {3.750260872272193*^9, 3.750260916170094*^9}, {
   3.750260962485422*^9, 3.7502610194214087`*^9}, {3.750261299679121*^9, 
   3.750261300047111*^9}, {3.7502616501646*^9, 3.750261650977852*^9}, {
   3.750262300266654*^9, 3.7502623974920588`*^9}, {3.750262441013131*^9, 
   3.750262460331875*^9}, {3.750262583717654*^9, 3.7502626561775923`*^9}, {
   3.750266446011175*^9, 3.7502664486936817`*^9}, {3.7504203675709667`*^9, 
   3.750420393541206*^9}},
 CellLabel->
  "(Debug) In[39]:=",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0"]
}, Closed]],

Cell[CellGroupData[{

Cell["Regular expressions", "Subchapter",
 CellChangeTimes->{{3.757707848639778*^9, 
  3.7577078522051353`*^9}},ExpressionUUID->"3b519190-0088-4cf5-bc8c-\
eba64cf01b88"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RegexUnion", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAUnion", "[", "args", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexConcatenation", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", "args", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"NFAStar", "[", "machine", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "c_String", "]"}], ":=", 
   RowBox[{"NFAStar", "[", 
    RowBox[{"Regex", "[", "c", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machine", ",", 
     RowBox[{"NFAStar", "[", "machine", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "c_String", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{
     RowBox[{"Regex", "[", "c", "]"}], ",", 
     RowBox[{"NFAStar", "[", 
      RowBox[{"Regex", "[", "c", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748777933298731*^9, 3.7487779371938334`*^9}, {
   3.748777969531754*^9, 3.748777985636819*^9}, {3.748778016512574*^9, 
   3.748778035290359*^9}, {3.7487883155664873`*^9, 3.748788355111487*^9}, {
   3.7488021749658833`*^9, 3.748802181448103*^9}, {3.748802220353901*^9, 
   3.748802263000498*^9}, {3.748802664752873*^9, 3.748802724474334*^9}, {
   3.7488028835151043`*^9, 3.748802893769829*^9}, {3.748822409064942*^9, 
   3.748822461250548*^9}, 3.748822615571062*^9, {3.7488815924639797`*^9, 
   3.748881618069347*^9}, {3.748894225641362*^9, 3.7488942260451813`*^9}, {
   3.7502646637720547`*^9, 3.750264664122982*^9}, {3.750336547211566*^9, 
   3.750336558039886*^9}, {3.750339686428809*^9, 3.750339686668764*^9}, {
   3.757707867112628*^9, 3.75770786729426*^9}},
 CellLabel->
  "(Debug) In[51]:=",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"c_String", "/;", 
     RowBox[{
      RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"c_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], ",", 
     "stateExpr_"}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", "\[Rule]", "stateExpr"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"s_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "s", "]"}], ">", "1"}]}], ",", 
     RowBox[{"tokenRecognize_:", "\"\<\>\""}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"NFAConcatention", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Regex", ",", 
           RowBox[{"Characters", "[", "s", "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"tokenRecognize", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
            "tokenRecognize"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"r_Association", ",", "tokenRecognize_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", " ", "=", " ", "r"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
         "tokenRecognize"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748740312676521*^9, 3.748740313645201*^9}, {
  3.7487403479479637`*^9, 3.748740397018611*^9}, {3.748743469717832*^9, 
  3.7487435934236317`*^9}, {3.7487436740558963`*^9, 3.748743681369012*^9}, {
  3.750336869429418*^9, 3.750336938835622*^9}, {3.750337329699889*^9, 
  3.750337380362454*^9}, {3.750340240062293*^9, 3.750340283654842*^9}, {
  3.75046574035165*^9, 3.750465753009005*^9}, {3.750531774957251*^9, 
  3.750531785197893*^9}, {3.750531895605538*^9, 3.7505319893143463`*^9}, {
  3.750532070050654*^9, 3.750532085952318*^9}, {3.750532550372366*^9, 
  3.750532553571492*^9}},
 CellLabel->
  "(Debug) In[57]:=",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexAlphabet", "[", "alphabet_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "input", ",", "name", ",", "transitions", ",", "acceptStates", ",", 
        "newMachine"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"input", " ", "=", " ", 
        RowBox[{"Characters", "[", "alphabet", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"newMachine", " ", "=", " ", 
        RowBox[{"<|", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Name\>\"", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Riffle", "[", 
             RowBox[{"input", ",", "\"\<\[Union]\>\""}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Transition", "[", 
               RowBox[{"0", ",", "#", ",", 
                RowBox[{"{", 
                 RowBox[{"input", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "}"}]}], "]"}], "&"}], ",", 
             
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", "input", "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StartState\>\"", "\[Rule]", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "input", "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetLowercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetUppercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"ToUpperCase", "[", 
      RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabet", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Alphabet", "[", "]"}], ",", 
       RowBox[{"ToUpperCase", "[", 
        RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexDigits", "[", "]"}], ":=", 
    RowBox[{"RegexAlphabet", "[", 
     RowBox[{"StringJoin", "@", 
      RowBox[{"Map", "[", 
       RowBox[{"ToString", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"asciiChars", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\f\>\"", ",", 
      "\"\<\\r\>\"", ",", "\"\< \>\"", ",", "\"\<!\>\"", ",", "\"\<#\>\"", 
      ",", "\"\<$\>\"", ",", "\"\<%\>\"", ",", "\"\<&\>\"", ",", "\"\<'\>\"", 
      ",", "\"\<(\>\"", ",", "\"\<)\>\"", ",", "\"\<*\>\"", ",", "\"\<+\>\"", 
      ",", "\"\<,\>\"", ",", "\"\<-\>\"", ",", "\"\<.\>\"", ",", "\"\</\>\"", 
      ",", "\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", 
      ",", "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", 
      ",", "\"\<8\>\"", ",", "\"\<9\>\"", ",", "\"\<:\>\"", ",", "\"\<;\>\"", 
      ",", "\"\<<\>\"", ",", "\"\<=\>\"", ",", "\"\<>\>\"", ",", "\"\<?\>\"", 
      ",", "\"\<@\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", 
      ",", "\"\<D\>\"", ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\"", 
      ",", "\"\<H\>\"", ",", "\"\<I\>\"", ",", "\"\<J\>\"", ",", "\"\<K\>\"", 
      ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", "\"\<N\>\"", ",", "\"\<O\>\"", 
      ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", "\"\<R\>\"", ",", "\"\<S\>\"", 
      ",", "\"\<T\>\"", ",", "\"\<U\>\"", ",", "\"\<V\>\"", ",", "\"\<W\>\"", 
      ",", "\"\<X\>\"", ",", "\"\<Y\>\"", ",", "\"\<Z\>\"", ",", "\"\<[\>\"", 
      ",", "\"\<\\\\\>\"", ",", "\"\<]\>\"", ",", "\"\<^\>\"", ",", 
      "\"\<_\>\"", ",", "\"\<`\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\"", ",", 
      "\"\<c\>\"", ",", "\"\<d\>\"", ",", "\"\<e\>\"", ",", "\"\<f\>\"", ",", 
      "\"\<g\>\"", ",", "\"\<h\>\"", ",", "\"\<i\>\"", ",", "\"\<j\>\"", ",", 
      "\"\<k\>\"", ",", "\"\<l\>\"", ",", "\"\<m\>\"", ",", "\"\<n\>\"", ",", 
      "\"\<o\>\"", ",", "\"\<p\>\"", ",", "\"\<q\>\"", ",", "\"\<r\>\"", ",", 
      "\"\<s\>\"", ",", "\"\<t\>\"", ",", "\"\<u\>\"", ",", "\"\<v\>\"", ",", 
      "\"\<w\>\"", ",", "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", 
      "\"\<{\>\"", ",", "\"\<|\>\"", ",", "\"\<}\>\"", ",", "\"\<~\>\"", ",", 
      "\"\<\.7f\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexASCIIChars", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", "asciiChars"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750264626530047*^9, 3.7502646347630997`*^9}, {
  3.750264666135603*^9, 3.750264696357594*^9}, {3.7502647265015993`*^9, 
  3.750264778323572*^9}, {3.750336644015066*^9, 3.750336683110643*^9}, {
  3.750458653932007*^9, 3.750458669102903*^9}, {3.750504916952344*^9, 
  3.7505049209709597`*^9}, {3.7505057133816824`*^9, 3.7505058519705877`*^9}, {
  3.750506533506524*^9, 3.750506536475669*^9}, {3.7505067470086*^9, 
  3.75050675229692*^9}, {3.7505067838361444`*^9, 3.7505067970359073`*^9}, {
  3.7505071411031*^9, 3.7505071411968527`*^9}, {3.750530965582837*^9, 
  3.750531022527288*^9}},
 CellLabel->
  "(Debug) In[61]:=",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RegexCompute", "[", 
    RowBox[{"machine_", ",", "input_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"machine", "[", "\"\<Type\>\"", "]"}], "\[Equal]", " ", 
         "\"\<NFA\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", " ", 
          RowBox[{"NFACompute", "[", 
           RowBox[{"machine", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Last", "[", "trace", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", 
          RowBox[{"DFACompute", "[", 
           RowBox[{"machine", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Last", "[", "trace", "]"}], "[", "\"\<Node\>\"", "]"}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750339694319202*^9, 3.750339761565926*^9}, {
  3.750457644064279*^9, 3.75045764564149*^9}, {3.7504584883737307`*^9, 
  3.750458519332707*^9}, {3.750531449449689*^9, 3.750531460840279*^9}, {
  3.7505315512323437`*^9, 3.750531579998457*^9}, {3.750532270345401*^9, 
  3.750532273742708*^9}},
 CellLabel->
  "(Debug) In[68]:=",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lexer", "Subchapter",
 CellChangeTimes->{{3.757707928174493*^9, 
  3.7577079289916077`*^9}},ExpressionUUID->"d07c23e9-1d59-4e51-ac14-\
31d0660d35e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Token", "[", 
    RowBox[{"symbol_String", ",", "name_String"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Class\>\"", "\[Rule]", "\"\<Token\>\""}], ",", 
     RowBox[{"\"\<Symbol\>\"", "\[Rule]", "symbol"}], ",", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}]}], "|>"}]}], ";"}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7500868562980757`*^9, 3.750086917600198*^9}},
 CellLabel->
  "(Debug) In[69]:=",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenKeyword", "[", 
    RowBox[{"symbol_String", ",", "name_String"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Class\>\"", "\[Rule]", "\"\<TokenKeyword\>\""}], ",", 
     RowBox[{"\"\<Symbol\>\"", "\[Rule]", "symbol"}], ",", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}]}], "|>"}]}], ";"}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7500869240403347`*^9, 3.750086928616561*^9}},
 CellLabel->
  "(Debug) In[70]:=",ExpressionUUID->"dd1a2e4b-3d9f-46b9-b5c8-8985b121e954"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetToken", "[", 
     RowBox[{"input_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "symbolAccept", ",", "symbolResult", ",", "keywordAccept", ",", 
        "keywordResult"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"symbolAccept", ",", "symbolResult"}], "}"}], " ", "=", " ", 
        
        RowBox[{"Rest", "[", 
         RowBox[{"RegexCompute", "[", 
          RowBox[{"symbolTokens", ",", "input"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"keywordAccept", ",", "keywordResult"}], "}"}], " ", "=", 
        " ", 
        RowBox[{"Quiet", "[", 
         RowBox[{"Rest", "[", 
          RowBox[{"RegexCompute", "[", 
           RowBox[{"keywordTokens", ",", "input"}], "]"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"keywordAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "keywordResult", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"symbolAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "symbolResult", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "\"\<Nothing\>\"", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeStringTake", "[", 
    RowBox[{"string_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"StringTake", "[", 
    RowBox[{"string", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"n", ",", 
       RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SafeStringTake", "[", 
     RowBox[{"string_", ",", 
      RowBox[{"{", 
       RowBox[{"m_", ",", "n_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"StringTake", "[", 
     RowBox[{"string", ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", 
        RowBox[{"Min", "[", 
         RowBox[{"n", ",", 
          RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetNextToken", "[", 
     RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tokenizerResult", ",", "nextToken"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tokenizerResult", " ", "=", " ", 
        RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "+", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"GetToken", "[", 
              RowBox[{
               RowBox[{"SafeStringTake", "[", 
                RowBox[{"program", ",", 
                 RowBox[{
                  RowBox[{"First", "[", "#", "]"}], "+", "1"}]}], "]"}], ",", 
               "symbolTokens", ",", "keywordTokens"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"0", ",", "\[IndentingNewLine]", "None"}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "=!=", " ", 
               "\"\<Nothing\>\""}], ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "\[LessEqual]", 
               RowBox[{"StringLength", "[", "program", "]"}]}], ")"}]}], 
            ")"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"nextToken", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "tokenizerResult", "]"}], ">", "2"}], ",", 
          RowBox[{"tokenizerResult", "[", 
           RowBox[{"[", 
            RowBox[{"-", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Last", "[", "tokenizerResult", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "nextToken", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeMod", "[", 
    RowBox[{"m_", ",", "0"}], "]"}], ":=", "m"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeMod", "[", 
    RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Mod", "[", 
    RowBox[{"m", ",", "n"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LinePosition", "[", 
    RowBox[{"pos_", ",", "lineBreaks_"}], "]"}], ":=", 
   RowBox[{"SafeMod", "[", 
    RowBox[{"pos", ",", 
     RowBox[{"Last", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"lineBreaks", "+", "1"}], ",", " ", "0"}], "]"}], ",", 
        RowBox[{
         RowBox[{"#", "\[LessEqual]", "pos"}], "&"}]}], "]"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ColumnPosition", "[", 
     RowBox[{"pos_", ",", "lineBreaks_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Ordering", "[", 
         RowBox[{"Prepend", "[", 
          RowBox[{"lineBreaks", ",", " ", "pos"}], "]"}], "]"}], ",", "1"}], 
       "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Tokenize", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<IncludeLineBreaks\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tokenize", "[", 
    RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"length", ",", "type", ",", "\[IndentingNewLine]", 
       RowBox[{"cursor", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"tokenList", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"inComment", " ", "=", " ", "False"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"omitTokens", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Whitespace\>\"", ",", "\"\<LineComment\>\""}], "}"}]}], 
       ",", "\[IndentingNewLine]", "breaks", ",", "positionMappedTokens", ",",
        "formattedTokens"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"cursor", "<", 
         RowBox[{"StringLength", "[", "program", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"length", ",", "type"}], "}"}], " ", "=", " ", 
          RowBox[{"GetNextToken", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"program", ",", "cursor"}], "]"}], ",", "symbolTokens", 
            ",", "keywordTokens"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"inComment", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"type", " ", "\[Equal]", " ", "\"\<LineBreak\>\""}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"tokenList", ",", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{"\"\<Position\>\"", "\[Rule]", "cursor"}], ",", 
                   RowBox[{"\"\<Type\>\"", "\[Rule]", "type"}], ",", 
                   RowBox[{"\"\<Value\>\"", "\[Rule]", 
                    RowBox[{"SafeStringTake", "[", 
                    RowBox[{"program", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"cursor", ",", 
                    RowBox[{"cursor", "+", "length", "-", "1"}]}], "}"}], "+",
                     "1"}]}], "]"}]}]}], "|>"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"inComment", " ", "=", " ", "False"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"omitTokens", ",", "type"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"tokenList", ",", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{"\"\<Position\>\"", "\[Rule]", "cursor"}], ",", 
                   RowBox[{"\"\<Type\>\"", "\[Rule]", "type"}], ",", 
                   RowBox[{"\"\<Value\>\"", "\[Rule]", 
                    RowBox[{"SafeStringTake", "[", 
                    RowBox[{"program", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"cursor", ",", 
                    RowBox[{"cursor", "+", "length", "-", "1"}]}], "}"}], "+",
                     "1"}]}], "]"}]}]}], "|>"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"cursor", "+=", "length"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"type", " ", "\[Equal]", " ", "\"\<LineComment\>\""}], ",", 
           RowBox[{"inComment", " ", "=", " ", "True"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"breaks", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"tokenList", ",", 
         RowBox[{
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Position\>\"", "\[Rule]", "p_"}], ",", 
             RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<LineBreak\>\""}]}], 
            "}"}], "]"}], "\[RuleDelayed]", "p"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"positionMappedTokens", " ", "=", " ", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", "\"\<Type\>\"", "]"}], " ", "=!=", 
             RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<Type\>\"", "->", 
               RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<Value\>\"", "\[Rule]", 
               RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}]}], 
             "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{"\"\<Type\>\"", "->", 
              RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], 
             "\[IndentingNewLine]", "|>"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "&"}], ",", "\[IndentingNewLine]", 
         "tokenList"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<IncludeLineBreaks\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Return", "[", "positionMappedTokens", "]"}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"formattedTokens", " ", "=", " ", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"positionMappedTokens", ",", 
            RowBox[{"KeyValuePattern", "[", 
             RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<LineBreak\>\""}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "formattedTokens", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7505467952931557`*^9, 3.750546921093223*^9}, {
   3.750546955860371*^9, 3.750546956268186*^9}, {3.75054702722803*^9, 
   3.750547157418901*^9}, {3.750547385123595*^9, 3.750547389067976*^9}, {
   3.7505486456200666`*^9, 3.7505487233998413`*^9}, {3.750614439670219*^9, 
   3.7506144944474382`*^9}, 3.750614612478499*^9, 3.750614674239463*^9, {
   3.750614725493066*^9, 3.750614777471882*^9}, {3.750614812101779*^9, 
   3.7506148537990294`*^9}, {3.750614901115054*^9, 3.7506149036731863`*^9}, {
   3.75061495486823*^9, 3.7506149573642397`*^9}, 3.7506150298739557`*^9, {
   3.750615118034342*^9, 3.7506151500911837`*^9}, {3.750616327714858*^9, 
   3.750616381609274*^9}, {3.750616462525311*^9, 3.750616462932968*^9}, {
   3.750689611104656*^9, 3.7506896131770763`*^9}, {3.750689782032683*^9, 
   3.750689904839724*^9}, {3.750689949718709*^9, 3.7506899850806103`*^9}, {
   3.750690035354953*^9, 3.7506900600413847`*^9}, {3.750690248383431*^9, 
   3.7506902485445127`*^9}, {3.7506922266888533`*^9, 3.750692265015525*^9}, {
   3.750692297732071*^9, 3.750692343698224*^9}, {3.7506924282715883`*^9, 
   3.750692455826165*^9}, {3.750692609973333*^9, 3.750692688737253*^9}, 
   3.750692993505443*^9, {3.750693767600814*^9, 3.7506939070694313`*^9}, {
   3.750693957222479*^9, 3.750694072526411*^9}, {3.75719022484966*^9, 
   3.7571902954715023`*^9}, {3.7577079574640083`*^9, 3.75770798407833*^9}, {
   3.7577083211942244`*^9, 3.757708348091176*^9}},
 CellLabel->
  "(Debug) In[71]:=",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc"]
}, Closed]],

Cell[CellGroupData[{

Cell["Parser", "Subchapter",
 CellChangeTimes->{{3.7577080324779577`*^9, 
  3.757708033312429*^9}},ExpressionUUID->"491b6222-dc01-403a-a304-\
3cbf3275f40d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MapUntil", "[", 
    RowBox[{"f_", ",", "expr_", ",", "test_"}], "]"}], ":=", 
   RowBox[{"Drop", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"test", "[", 
               RowBox[{"f", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "&&",
              " ", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "\[NotEqual]", "1"}]}],
             ")"}]}], "}"}], "&"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "expr", ",", "True"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "\[IndentingNewLine]", 
       "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
     "1"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.75727422692801*^9, 3.757274257333918*^9}, {
   3.7572758893795013`*^9, 3.757275901894582*^9}, {3.757276013302582*^9, 
   3.7572760202879887`*^9}, {3.7572761090893373`*^9, 3.757276109605762*^9}, {
   3.757276140723743*^9, 3.757276155064015*^9}, {3.7572762079300423`*^9, 
   3.757276209797475*^9}, {3.757276286018305*^9, 3.7572763289550877`*^9}, {
   3.7572764233771544`*^9, 3.757276447112692*^9}, {3.757276481196123*^9, 
   3.757276513223014*^9}, {3.757277368150168*^9, 3.757277380461828*^9}, 
   3.757277484388959*^9, {3.757277550731369*^9, 3.7572775582058287`*^9}, {
   3.757277664727478*^9, 3.757277681917262*^9}, 3.757277716847905*^9, {
   3.757277758889657*^9, 3.757277779408081*^9}, {3.757277848723716*^9, 
   3.757277853220859*^9}, {3.757355860286427*^9, 3.757355863823473*^9}, {
   3.757356142833145*^9, 3.757356159817898*^9}, {3.75735619635362*^9, 
   3.757356197922917*^9}, {3.7573563085512447`*^9, 3.7573563558007936`*^9}, 
   3.757356395825831*^9, {3.7573564730094624`*^9, 3.757356505816045*^9}, 
   3.757356613063459*^9, {3.757703495661273*^9, 3.757703500993032*^9}},
 CellLabel->
  "(Debug) In[81]:=",ExpressionUUID->"28264908-7582-4bf1-ace5-cd2120689b6b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", 
    RowBox[{"EmptyString", ",", "Term", ",", "NonTerm"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetArgument", "[", 
    RowBox[{"_", "[", "arg_", "]"}], "]"}], ":=", "arg"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Substitute", "[", 
     RowBox[{"l1_", ",", "l2_"}], "]"}], ":=", 
    RowBox[{"Join", "[", 
     RowBox[{"l1", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{"l2", ",", 
        RowBox[{"Length", "[", "l1", "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", "terms_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{"input", ",", 
        RowBox[{"Length", "[", "terms", "]"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "\"\<Type\>\""}], "]"}], "]"}], " ", "\[Equal]", 
     " ", 
     RowBox[{"Map", "[", 
      RowBox[{"GetArgument", ",", "terms"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateTransition", "[", 
     RowBox[{"rule_", ",", "stateId_", ",", "lastId_"}], "]"}], ":=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", "stateId"}], "}"}],
         "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"#1", ",", 
          RowBox[{"lastId", "+", 
           RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}], "&"}], ",", 
      RowBox[{"rule", "[", "\"\<To\>\"", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MatchTerminalsWithRule", "[", 
     RowBox[{"stateId_", ",", "lastId_", ",", "input_", ",", "rule_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "terms", ",", "transition", ",", "rest", ",", "cuttedInput", ",", 
        "currentState", ",", "lastIndex", ",", "matchTransitions"}], "}"}], 
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"currentState", " ", "=", " ", 
        RowBox[{"rule", "[", "\"\<From\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], "===", "EmptyString"}], 
         ",", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentState", ",", "stateId"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"EmptyString", ",", 
                RowBox[{"lastId", "+", "1"}]}], "}"}]}], "}"}], ",", 
            RowBox[{"{", "}"}], ",", "input", ",", 
            RowBox[{"lastId", "+", "1"}]}], "}"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"transition", " ", "=", " ", 
        RowBox[{"GenerateTransition", "[", 
         RowBox[{"rule", ",", "stateId", ",", "lastId"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"lastIndex", " ", "=", " ", 
        RowBox[{"Last", "@", 
         RowBox[{"Last", "@", 
          RowBox[{"Last", "@", "transition"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"terms", " ", "=", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "#", "]"}], "=!=", "NonTerm"}], "&"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rest", " ", "=", " ", 
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"transition", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "terms", "]"}], ">", 
          RowBox[{"Length", "[", "input", "]"}]}], ",", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"TermMatchQ", "[", 
          RowBox[{"input", ",", "terms"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"matchTransitions", " ", "=", 
           RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"KeyExistsQ", "[", 
                 RowBox[{"#1", ",", "\"\<Value\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}], ",", 
                   RowBox[{"#1", "[", "\"\<Value\>\"", "]"}]}], "}"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}], "&"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Take", "[", 
              RowBox[{"input", ",", 
               RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"transition", " ", "=", " ", 
           RowBox[{"Substitute", "[", 
            RowBox[{"matchTransitions", ",", "transition"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"cuttedInput", " ", "=", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{"input", ",", 
             RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "transition", ",", "rest", ",", "cuttedInput", ",", "lastIndex"}],
             "}"}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatchTerminals", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"state_", ",", "stateId_"}], "}"}], ",", "lastId_", ",", 
     "input_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"possibleTransitions", ",", "matched"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"possibleTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"grammar", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matched", " ", "=", " ", 
       RowBox[{"Last", "[", 
        RowBox[{"MapUntil", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MatchTerminalsWithRule", "[", 
            RowBox[{"stateId", ",", "lastId", ",", "input", ",", "#"}], "]"}],
            "&"}], ",", "possibleTransitions", ",", 
          RowBox[{
           RowBox[{"#", "=!=", "$Failed"}], "&"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "matched", "]"}], ";"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757274783650526*^9, 3.757274820428228*^9}, {
   3.757274862544322*^9, 3.757275103606566*^9}, {3.7572751636565237`*^9, 
   3.757275164811874*^9}, {3.7572751964583693`*^9, 3.757275196915545*^9}, {
   3.757275248182845*^9, 3.757275305590396*^9}, {3.7572755185338383`*^9, 
   3.757275525223351*^9}, {3.757275562775797*^9, 3.757275570631586*^9}, 
   3.757276113821259*^9, {3.757276918159042*^9, 3.7572770037161493`*^9}, {
   3.75728418007928*^9, 3.7572842206198187`*^9}, {3.757287044508272*^9, 
   3.757287046411515*^9}, {3.7572872857087393`*^9, 3.757287300671541*^9}, {
   3.757287362543298*^9, 3.757287362659718*^9}, {3.7572874347766237`*^9, 
   3.7572874349241343`*^9}, {3.7572874783326197`*^9, 3.75728747843075*^9}, {
   3.7572875128295393`*^9, 3.757287518510971*^9}, {3.7572894865818453`*^9, 
   3.75728948864775*^9}, {3.757358932698401*^9, 3.757358952178666*^9}, {
   3.757358985741022*^9, 3.757358989712109*^9}, {3.757359643749208*^9, 
   3.7573596496516743`*^9}, {3.757359690226437*^9, 3.7573596984694967`*^9}, {
   3.7577015909094152`*^9, 3.757701632528507*^9}, {3.7577029124528008`*^9, 
   3.7577030244891577`*^9}, {3.757703073074065*^9, 3.757703075078184*^9}, {
   3.7577031093317966`*^9, 3.757703113940316*^9}, {3.757703245654786*^9, 
   3.757703245855764*^9}, {3.7577032941945972`*^9, 3.757703296627157*^9}, {
   3.757703411503927*^9, 3.7577034138585777`*^9}, {3.7577036175904703`*^9, 
   3.757703633547387*^9}, {3.757703760883068*^9, 3.757703830680175*^9}, {
   3.757704333388521*^9, 3.757704335579052*^9}, {3.757704448889593*^9, 
   3.757704449106048*^9}, {3.757704517873886*^9, 3.7577046238877153`*^9}, {
   3.7577047304257717`*^9, 3.7577047306601686`*^9}, {3.757706426428527*^9, 
   3.757706450360586*^9}, {3.757706490330243*^9, 3.757706490622726*^9}, {
   3.757709390136578*^9, 3.7577094288164988`*^9}, {3.7577094599477177`*^9, 
   3.757709468534696*^9}, {3.757709534401555*^9, 3.757709545184486*^9}, {
   3.757709605535029*^9, 3.757709682226736*^9}, {3.757709819069147*^9, 
   3.757709876650505*^9}, {3.75770995313941*^9, 3.7577099542666388`*^9}, {
   3.757710616283051*^9, 3.757710654877925*^9}, {3.7577112623004704`*^9, 
   3.757711262767686*^9}},
 CellLabel->
  "(Debug) In[82]:=",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Parse", "[", 
     RowBox[{"input_", ",", "grammar_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "stack", ",", "transitions", ",", "next", ",", "inputBuffer", ",", 
        "lastId", ",", "parseTree", ",", "parseSymbol", ",", "toStack"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"stack", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"lastId", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"inputBuffer", " ", "=", " ", "input"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"parseSymbol", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "grammar", "]"}], "[", "\"\<From\>\"", "]"}],
           ",", "1"}], "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"inputBuffer", ",", "parseSymbol"}], "}"}], " ", "=!=", 
          " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "None"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", "===", 
             "NonTerm"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "transitions", ",", "next", ",", "inputBuffer", ",", 
                "lastId"}], "}"}], " ", "=", " ", 
              RowBox[{"MatchTerminals", "[", 
               RowBox[{
               "parseSymbol", ",", "lastId", ",", "inputBuffer", ",", 
                "grammar"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"parseTree", ",", "transitions"}], "]"}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"GetArgument", "[", 
                 RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", 
                "\[Equal]", " ", 
                RowBox[{
                 RowBox[{"First", "[", "inputBuffer", "]"}], "[", 
                 "\"\<Type\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"inputBuffer", " ", "=", 
                 RowBox[{"Drop", "[", 
                  RowBox[{"inputBuffer", ",", "1"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"next", " ", "=", " ", 
                 RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", "Push", " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"parseSymbol", ",", "toStack"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"First", "[", "next", "]"}], ",", 
                RowBox[{"Rest", "[", "next", "]"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"stack", " ", "=", " ", 
              RowBox[{"Join", "[", 
               RowBox[{"stack", ",", "toStack"}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", "Pop", " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "stack", "]"}], " ", ">", " ", "0"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"parseSymbol", ",", "stack"}], "}"}], "=", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Last", "[", "stack", "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"stack", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "}"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"parseSymbol", " ", "=", " ", "None"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"parseTree", ",", "1"}], "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ParseTree", "[", 
    RowBox[{"input_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parseTree", ",", "startProduction"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"parseTree", " ", "=", " ", 
       RowBox[{"Parse", "[", 
        RowBox[{"input", ",", "grammar"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"startProduction", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"First", "[", "parseTree", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"TreePlot", "[", 
       RowBox[{"parseTree", ",", "Automatic", ",", "startProduction", ",", 
        RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757287153826024*^9, 3.7572872216771708`*^9}, {
   3.757287634689281*^9, 3.7572876934867487`*^9}, {3.757287725455359*^9, 
   3.757287824962241*^9}, {3.7572878564582787`*^9, 3.757287879362458*^9}, {
   3.7572879118394012`*^9, 3.757288160008748*^9}, {3.757288349761772*^9, 
   3.757288351613283*^9}, {3.7572889289313383`*^9, 3.757289005745718*^9}, {
   3.757289165081707*^9, 3.757289166406535*^9}, {3.757289360893189*^9, 
   3.757289409590063*^9}, {3.757340091531893*^9, 3.7573400925674057`*^9}, {
   3.757340156334832*^9, 3.7573401565282784`*^9}, {3.757340515890152*^9, 
   3.757340526180696*^9}, {3.757340562484044*^9, 3.7573405975335827`*^9}, {
   3.757340933022827*^9, 3.757340933437621*^9}, {3.757340966854559*^9, 
   3.7573409700190067`*^9}, 3.757341013479683*^9, {3.757341133565576*^9, 
   3.757341133750214*^9}, {3.7573413629451227`*^9, 3.7573413752743187`*^9}, {
   3.757341421584483*^9, 3.757341423787003*^9}, {3.7573415600769033`*^9, 
   3.757341586136511*^9}, {3.757341624460498*^9, 3.757341624623155*^9}, 
   3.757341695002104*^9, {3.7573417542240133`*^9, 3.757341791794108*^9}, {
   3.757341964907411*^9, 3.757342100584084*^9}, {3.757342146356031*^9, 
   3.757342149031186*^9}, {3.7573422320844507`*^9, 3.757342233882634*^9}, {
   3.757342986668407*^9, 3.757342991181703*^9}, {3.757343021725061*^9, 
   3.7573430245026827`*^9}, {3.757348186509583*^9, 3.75734818726821*^9}, {
   3.757348432609365*^9, 3.757348438598989*^9}, {3.757348542730608*^9, 
   3.7573487161025267`*^9}, {3.757348807780157*^9, 3.757348807877275*^9}, {
   3.757348853901032*^9, 3.75734890920122*^9}, {3.757349127318986*^9, 
   3.7573491325688753`*^9}, {3.757349183127816*^9, 3.75734920603309*^9}, {
   3.757349279727099*^9, 3.757349320836172*^9}, {3.75735707187536*^9, 
   3.757357072643874*^9}, {3.757357112790221*^9, 3.757357193156868*^9}, 
   3.7573574231479273`*^9, {3.757359302539564*^9, 3.757359334814144*^9}, {
   3.757359366158173*^9, 3.757359383080202*^9}, {3.757359435585299*^9, 
   3.7573594511022797`*^9}, {3.757359492657642*^9, 3.757359600688477*^9}, {
   3.757359935887082*^9, 3.757359976604569*^9}, 3.757360016542276*^9, {
   3.75736006648175*^9, 3.757360068159026*^9}, {3.757701549727418*^9, 
   3.757701555250287*^9}, {3.7577037078609962`*^9, 3.757703708043736*^9}, {
   3.757705080342566*^9, 3.757705378744836*^9}, {3.7577054100903473`*^9, 
   3.757705486613831*^9}, {3.757706700406754*^9, 3.7577067250799437`*^9}, {
   3.757706774280291*^9, 3.757706881682398*^9}, {3.757706948416572*^9, 
   3.757706954048917*^9}, {3.75770700973498*^9, 3.757707010367838*^9}, 
   3.757708591061474*^9, 3.7577100591345367`*^9, {3.757711446222785*^9, 
   3.7577114490659313`*^9}, {3.757712040489437*^9, 3.757712047454317*^9}},
 CellLabel->
  "(Debug) In[90]:=",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation", "Chapter",
 CellChangeTimes->{{3.757707693055922*^9, 
  3.7577076948058662`*^9}},ExpressionUUID->"9764d62a-13d8-4273-861c-\
c2aab0ea6f24"],

Cell[CellGroupData[{

Cell["Lexer", "Subchapter",
 CellChangeTimes->{{3.758399824330983*^9, 
  3.758399825304015*^9}},ExpressionUUID->"bab3d486-94e8-495d-b547-\
0903f2fcb95e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tokenSymbols", " ", "=", " ", 
    RowBox[{"Map", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Token", "[", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\< \>\"", ",", "\"\<Whitespace\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<\\n\>\"", ",", " ", "\"\<LineBreak\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<:\>\"", ",", " ", "\"\<IncompleteAssign\>\""}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<:=\>\"", ",", " ", "\"\<Assign\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<*\>\"", ",", " ", "\"\<Times\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\</\>\"", ",", " ", "\"\<Slash\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<+\>\"", ",", " ", "\"\<Plus\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<-\>\"", ",", " ", "\"\<Minus\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<=\>\"", ",", " ", "\"\<Equal\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<#\>\"", ",", " ", "\"\<NotEqual\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", " ", "\"\<LeftParenthesis\>\""}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<)\>\"", ",", " ", "\"\<RightParenthesis\>\""}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<;\>\"", ",", " ", "\"\<Semicolon\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<,\>\"", ",", " ", "\"\<Comma\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<.\>\"", ",", " ", "\"\<Dot\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<>\>\"", ",", " ", "\"\<Greater\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<>=\>\"", ",", " ", "\"\<GreaterOrEqual\>\""}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<<\>\"", ",", " ", "\"\<Lower\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<<=\>\"", ",", " ", "\"\<LowerOrEqual\>\""}], "}"}]}], 
       "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenIdentifiersAndLiterals", " ", "=", " ", 
    RowBox[{"Map", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Token", "[", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<identifier\>\"", ",", " ", "\"\<Identifier\>\""}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<number\>\"", ",", " ", "\"\<Number\>\""}], "}"}]}], 
       "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tokenKeywords", " ", "=", " ", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"TokenKeyword", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<const\>\"", ",", " ", "\"\<Const\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<var\>\"", ",", " ", "\"\<Var\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<procedure\>\"", ",", " ", "\"\<Procedure\>\""}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<call\>\"", ",", " ", "\"\<Call\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<print\>\"", ",", " ", "\"\<Print\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<begin\>\"", ",", " ", "\"\<Begin\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<end\>\"", ",", " ", "\"\<End\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<if\>\"", ",", " ", "\"\<If\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<then\>\"", ",", " ", "\"\<Then\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<while\>\"", ",", " ", "\"\<While\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<do\>\"", ",", " ", "\"\<Do\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<odd\>\"", ",", " ", "\"\<Odd\>\""}], "}"}]}], 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757707294752634*^9, 3.757707329734219*^9}, {
  3.757708239562243*^9, 3.757708247301545*^9}, {3.758396841840823*^9, 
  3.758396857327552*^9}, {3.758397220477949*^9, 3.7583972258113413`*^9}},
 CellLabel->
  "(Debug) In[111]:=",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokenSymbolsNFA", " ", "=", " ", 
   RowBox[{"SimplifyMachine", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"RegexUnion", ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Regex", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
        "tokenSymbols"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenSymbolsDFA", " ", "=", " ", 
    RowBox[{"NFAToDFA", "[", "tokenSymbolsNFA", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRegex", " ", "=", 
   RowBox[{"RegexConcatenation", "[", 
    RowBox[{
     RowBox[{"RegexAlphabet", "[", "]"}], ",", 
     RowBox[{"RegexStar", "[", 
      RowBox[{"RegexUnion", "[", 
       RowBox[{
        RowBox[{"RegexAlphabet", "[", "]"}], ",", 
        RowBox[{"RegexDigits", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberLiteral", " ", "=", " ", 
    RowBox[{"RegexConcatenation", "[", 
     RowBox[{
      RowBox[{"RegexDigits", "[", "]"}], ",", 
      RowBox[{"RegexStar", "[", 
       RowBox[{"RegexDigits", "[", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRegex", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"identifierRegex", ",", "\"\<Identifier\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"integerLiteral", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"numberLiteral", ",", "\"\<NumberLiteral\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"symbolTokens", "=", " ", 
   RowBox[{"RegexUnion", "[", 
    RowBox[{
    "identifierRegex", ",", "integerLiteral", ",", "tokenSymbolsDFA"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750545689764975*^9, 3.75054569007624*^9}, {
  3.75054756997795*^9, 3.75054757074094*^9}, {3.757189645862894*^9, 
  3.7571896462142572`*^9}, {3.757189723083748*^9, 3.7571897448523893`*^9}},
 CellLabel->
  "(Debug) In[114]:=",ExpressionUUID->"5f478895-e67f-4842-8936-a7f82f98e1dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"keywordNFA", " ", "=", " ", 
   RowBox[{"SimplifyMachine", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"RegexUnion", ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Regex", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
        "tokenKeywords"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keywordDFA", " ", "=", " ", 
   RowBox[{"NFAToDFA", "[", "keywordNFA", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7505475524660587`*^9, 3.750547578156279*^9}},
 CellLabel->
  "(Debug) In[121]:=",ExpressionUUID->"27ceeb91-84ca-4f8f-b889-0991a3c2b621"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "tinyProgram", " ", "=", "\[IndentingNewLine]", 
   "\"\<var n, f;\nbegin\n   n := 0;\n   f := 1;\n   while n # 16 do\n   \
begin\n      n := n + 1;\n      f := f * n;\n   end;\nend.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750087542246511*^9, 3.750087556285872*^9}, {
   3.7571898361710367`*^9, 3.757189844338978*^9}, {3.7571898795910482`*^9, 
   3.757189884095022*^9}, 3.7571907007273607`*^9, {3.757191843678382*^9, 
   3.757191844209124*^9}, 3.758397209647339*^9, 3.758397864293529*^9},
 CellLabel->
  "(Debug) In[126]:=",ExpressionUUID->"755fc599-1137-4d38-b150-c3b15f38e174"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tokens", " ", "=", " ", 
   RowBox[{"Tokenize", "[", 
    RowBox[{"tinyProgram", ",", "symbolTokens", ",", "keywordDFA"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7577075887691603`*^9, 3.757707619469573*^9}, {
   3.757710161500033*^9, 3.757710163165203*^9}, {3.7577113871881037`*^9, 
   3.75771138942542*^9}, {3.757712097580559*^9, 3.7577120987472267`*^9}, 
   3.758396952036305*^9, 3.758396988339271*^9},
 CellLabel->
  "(Debug) In[127]:=",ExpressionUUID->"3a4b5cb8-85ab-443d-8f69-d704df1dd23a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", "tokens", "]"}]], "Input",
 CellChangeTimes->{{3.758396989487317*^9, 3.7583969945421257`*^9}},
 CellLabel->
  "(Debug) In[128]:=",ExpressionUUID->"a3da1426-9fa3-4da2-8d95-09fc4f17fd8d"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 36, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Type", "Value"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 36], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Type"} -> 1, {All, "Value"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Type" -> TypeSystem`PackageScope`AtomShape[124.80000000000001`],
               "Value" -> 
              TypeSystem`PackageScope`AtomShape[28.800000000000004`]]]], 
           20, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[859734734], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Type", "Value"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 36], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[859734734]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1869402647][{All, "Type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[All, "Type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1869402647][{All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[All, "Value"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Comma", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[3, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[",", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[3, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[4, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["f", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[4, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[5, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[5, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[6, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[6, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[7, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[7, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Assign", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[8, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[":=", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[8, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[9, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["0", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[9, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[10, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[10, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[11, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["f", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[11, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Assign", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[12, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[":=", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[12, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[13, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[13, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[14, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[14, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["While", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[15, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["while", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[15, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[16, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[16, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NotEqual", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[17, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["#", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[17, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[18, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["16", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[18, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Do", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[19, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["do", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[19, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[20, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
                  GeneralUtilities`Slice[20, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    36 (-20), {1, 36 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 36 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    36, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 36 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    36 20, {1, 36 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    36 (-20), {1, 36 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 36 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    36, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 36 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    36 20, {1, 36 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647},
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647},
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647},
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647},
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647},
                     100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1869402647]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1869402647][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {299., {337., 345.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.758396995401924*^9, 3.7583972464171743`*^9, 
  3.758397872223709*^9},
 CellLabel->
  "(Debug) Out[128]=",ExpressionUUID->"44c5155c-f78c-419f-bef9-7a25b9931815"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Grammar", "Subchapter",
 CellChangeTimes->{{3.758399830686873*^9, 
  3.7583998314688797`*^9}},ExpressionUUID->"eaca36e0-bc36-4820-9969-\
a42cd00fd781"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
EATrI3otCIIgCNZH9FoQBEEQrI/otSAIgiBYH9FrwZ/kXs6n06lnKSnzYsCv
RRD0pOdmct1My8kI+LUIghk81evqY6vTTf1ucpg2KHIwlepdSmPn2d0+u16c
C+dsu6RtQMprf2wslSpViipUqEDjx08I+POzOvHJR/l5vTfvfcPjWi9qzcft
vxAb8Gu+1jB6V4uLESNH0kMPPURVqjwW8PJQTNk9levcqKjRhsf9b8T/6IFh
DwT8eq81EtIvcPm/MutVv5y/bt269OCDD1LvPn0Cfq96jp84yfpxyy23UK/e
vd3K6w+9jj4fw+/CC1NfuCb1ukyZMh7ljf76Gzo1YyYlrFlDu1q1Cni9UZxZ
uIh2tGjhMC31wEHaXKcOf456/XVKjtzi1rkDpdcLDyzi8/XY1LNYn9PJv6fR
vk6dKOdSCoVUrBjwZwusoNcPPPAALV+xwlJlHSi97ry6C39vyNGNbucNf+YZ
Sjt8mOL+6kXxw0e4lddq7Y+/9Rps2RpFZcuW9Sivv8u6devWltBrBTRV9Nq9
ZxgI/KnXZhG99h9W0Ovrr7+e352rsaxFr/1Dceh1wvkL7A9NTUu3XFkHQq/7
hPelWwfeSjXG1aDIU1ttjjHSa/RpKwdVodsH3U6NZzSxaafz//2XRkaNoqpj
Hqey/cvS48FP0JK4pZym1+u8y5fpg/kf8Ha/zf2LpY75S6/zc/MoftQoimzY
kEJr1mT9TI+PL0zLzqG4Xr1pc926rJ2xv/5KuRmZWt5tb73FdWpny5YU+dJL
tP+HH+iy7pmenj2HIgr2hz31FJ8/YdUq3p8WF8fHh9euTRurVuXP4Pz69Vpe
b/Qa7ZwaE7G3rzGe/c7cFlx3ms16hd7+5x0bvT6cdISaz36D7hx8J5UfWZ6+
X9OVMnKzOG3Y1uFaHXhoxEN0z5B7aOqeadp59WMxCtQlX75rzvBUQ4zuCShf
FcoA4HPdyXU5rcG0BtRweiMub5TZhws+5HKbHj3T1LtqVNYAafg+5Me13djv
Rrf6QfkFdfG6666jAwcPWqKs4xIP2dQNe/t6T0I01Z5Ym24ZcAt1W9e9iF6v
i19Pz056ltNRr8bvvDIupupxp1Xf0W0Db+M2TrV/qg9pzxcrvjR97YHQa6N7
ysnPs6mLKw+t4u2f1v/M2/iM/PcOvZfrVc1xNbmO7Tsfo+k16u67897j8kRb
cCbtnKmyBthfJegx+nZ1J742bK86vFpLv5CYxHqdfPGSW2VVHGVd3HqNsn5m
4jNc30r3Lk2Pjq7I84vUMc70ekb0LN5fb0o9+nnDL3TzgJv5GabmFPaBxmwP
5vTHxlSlX0N+o08Wf0J/bPyT0/R6/c2qb4tVq4E3ep0Uvpmff8bJU3Rhwwab
tPgRI1gP0+OPUn5ePiVv2856irRj48ZR1KuvUlbCecpOvkg73nuPDg8cpOWF
Xu/65BPKz8ml3PQMinj+eUoMDeO07KRkCqlUiVJjD/B2xqnTlLLf1s4xsq9z
Cur52cVL+HPC6tWUeS7B9P3+s3+uNpfBXq+VjfHytJfpo4Ufcf1Rep2Zl631
5QZEDOR3EWk/rO3GeZW24d2HpuE46BvSsvJy2M+JtkW1FdhecGChT56TK/DM
kiIiuY91es4/pvMZ3RNwpdflhpejrmt/KHw3lrbjPi72u3pXXZU1UHoNrcYx
Q7cO4/602XvbsCGEbrzxRrqUkmqJsr6Uncp1ov2yDg71+qnxT/H+NkvaUP0p
9bm8lF6jft7Q9wYu39Hbgtg2xLFL45ZxutI29Jn6RwywqftHLx7n7206s5mm
adjefDLS9LXjXc0pKMeLO3dRSvQ+t8rL07I2uiczeg09fm3W6/y5V1hvLj/0
95Reo3xbzH2XXp/dnLc/XfypqbIG0Gf1/XiO0Im1R9Zp6Xn5l+nOO++kBQvN
v/9myxoajn4i+ouelHUg9PpIcqENCFsJ2+g3qWOc6XWjGY3puj7X0bn087z9
56YefNzc/fO09+X6vtfz3E2VB/UC/5VewxbA/y9XfmX6midPnkzdunUrwvAR
5vtO3ui1ERH16tnYtXq2F2gpbAm1fW7FCtrSqLG2Db3Wt1d7O35OJ6ZM4c/Z
Bf3LjVWqcN3LdeITMtJrb3E2fo2+GOy0i1mFdR06pfR6xaGV/LnLmu/ZXgbo
W9839D4+Vmnb2B3jeBt9cmwnZ13pQ3vjD3dGTJcu3Oe2B30lb8/t6p5c6TXe
qd3n9vL+5YdWcJuHdg7pRu+qq7IGSq83Hgt1+75q1arF9s3QYcP8Ur+8wdH4
9anUMzZlizYKbZXS6x/X/8Tp82Lnc1kpWx1+PqQrbYtNLOwfo47XmlDL5nu9
8Yc7g/1kDupm/LDhXp/b6J7M6PVfYb1oRNRI/oy5+A+PfJjbbaXXFUZVYJ8q
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
0GVeMCN6Fu+vN6Ue/bzhF7p5wM1UfmR5Ss1J53TcK9L/CutFnyz+hD+jfS6O
55QUvpm1NePkKbqwYYNN2u52n9H+rl0pLyub9TX8mWcocVMopyWsXk2bn3uO
0uPjKefiJdreooWNXm9r3pwO9etP+dk5dHbJUgqpWNFGr5Hn7OIl2rnQNzBz
vdCpG/reQI8HP0GjtwXRK7Ne5fJaGreM01Gm0LUHhj2g1Qelt0qvwZ+belC3
dd35c5slbbTzK72GVg+IGEhDtw6jkVGjOE09my5rvqd+m/tzf+G5Sc9R/r//
8rmv63Md9zPn7p9HQdvGUPtlHbTzqrozMHIQ9xtRt1ccWqmlbzoexnUK9dVe
r4uj/oheC0LJxVO97ry6C7c3aPPUPug0/qNNQxraPmzD3kHbBVsF26p9Hrtj
HG83m/UKb8PWmLlvNn/+af3PnDY/dkGxjV83mtGY23LM/cU2tEJ/j2hvHxz+
IH/efDJS0wRXZXWiQGO7devmkJiY/d49v8ws1tjUg3HavoM9elDsL7/w5/0/
/EAHe14pB2iv0uuM4yc4b3ZSspa+pVFjn8w3+3H9T1w+82Lns99DjWt8MP8D
7ZiIk1u4z1e6d2nWT1V/lF5D67ENnYWtDH+Lyqv0euOxUJvvTcvJ4PPBrsf3
Augxjt13PoZOpZ7h9CpBj9G0vTNsbHbwxYov+djvVnfmZ6x8QvY4Gr/2V/3R
I3otCCUXT/UaPj20N2iH7dOUnTEiaqS2D7bUbQNv489Kr2ftm8Pbqu1FOw0b
CZ8n757CaWhji0uv0YbfNfgubXt69Ew+bsiWobyN9lb51qNOb+e0b1Z967Ks
cvPyKbFAEx2RnZPr1fPLOHGyUHOTr/w27ejo0bSnQ0f+jPHoo2PGaGlJW6M0
vcZY9saqVW3Ot/Pjj32i1x8t/Mjh2AR0VH9c7Ym1eX/w9rHaPqXX0D+1D/Yx
dFbpp6oz0F/9+Q4kHnT4vWDZoeV8DOol/ODYB31tt/Qz7hMg7dilE+zHxn6k
o58AbbW/P0d67a/6o0f0WhBKLp7qNewPtDewf9U+jEPiv719DX+gI/vakV7D
B6nGJZGGMXJ39XpJ3FLNl+ro2l3Z17gObEPv7e0jT9rb4wWa2rVrV4fs2xfj
3fNzZl//XOif2F9gw8PfrdLYP67s6/+0Pjc9Q0vHGLUv9Lr7uh81f2/I0Y0a
KDd1DPzkahwY4DfxfI3/6fXDIx9mHc3Oz+V0aKzKq+qMyqNAXYOuox+g/16g
nmthvb9MO8/u1vz0YSc225wnMTOZ7e8yfcrw2Ln9/RnZ176uP3pErwWh5OKp
XqOtQ1sGewK+a4zzYbwYafBrPhFcjceh0W6jHUPbBJ1GupFeq/Fr2DWw0zEW
qNdr2PMYP1Rj0LDXsA2dV9e2/cxOTntq/FM0cdckbfzaVV5lD9WfUp9+2fAr
j3viOvTjj1azrwFsaG38ukC3MX6txrjPr1vHPu7ctHSee4Z5aTbj12++Sadm
zuLPl3bvKTJ+7SlqfgN82v0jBvB48MeLPuaxW6TDDkYfDn5waCXK8vXZzTlN
6TV0F3PFXpv1utPxa3u9Bh8u+JDzwrcNW/rXkN94PltGbhZdyEiiV2e/xuPW
6GsqvUadQV7Mb4QvH3UTNj/G4N+c8xanYVwH9UWNX9868FZtG2M5/qo/ekSv
BaHk4s38cMzDgeah3S03vJyN//lw0hFuZzGXDLYI5o4r+9tIr7GNMWzM00Fb
1yO0p41eo2105OvEvCX9tX258ise70S7rdpIM3kxJ65iUCX23Tec3oiiz1+x
f33R3vqDzDNn2f8dVqsWRb70Eh0bP94mPX7UKNr6yiu084MP6MCff9roNeah
7fzwQ56HFv3lV7T9nXd8tl7KmiNrWbtQB1CeqCvwfaA/B/82yk/5mpX/HHMa
lF6j/OEDQf3CHAdH88Md6fXFrBT2/6DeYc4j6hHOj/oH7Ww6sxnrLbQY9Uz/
uwbUEfQxMN8RevzytJe1Od7KL+MIdYy/64/otSCUXKz++2uh5KH0GrZvoK/F
aoheC0LJRfRasBqi184RvRaEkovotWA1RK+ds3FTKK1cuSrg1yEIQvEjei0I
giAI1kf0WhAEQRCsj+i1EEjSczN5jjfWJQv0tQiCIOixWpx70WshkKjf2BXX
Oux6jh47TpUqV6aMzKxi/d7GTZrQwkWLiv1+AzlXrUyZMpSkW4PPCoSGhdNT
Tz0VkO8OVB1wBtaIqIGYP16u33StEai4uc4QvRYCSSD1um27djR02LAi+72J
XXry72m0r1MnyrmUwmvPODrGWVttJhZazPff09mlyyg9/ihtadzErbxGeo01
dhBPJu6vXhQ/fIRb92wmrzO99lWcWE+uy0ivvbkuM3md1QEz9cdTXF3X39Om
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
Onu8LUbvHmP3ubQ/fPD2IVJlfFXlJy83qpy0XNpSLqZeMvKfSIiWjxY0l8dH
Pi6PjXhMPl38mWTdzHaqvULjtsjL016Wh4c+LLWn1JYVUStz1Q3nn5nwrGqH
R4c9qo5Dotc5/WyhW7Yqn6i9tLPnzkvx4sUlMSm/H6FAzc3pNxfXrFHndzVu
IueWLJWb2Tedy/s/XNXr5CNHZVvdupJ1LbXIed9r2lTGBgQ43YZ7L+y3+x61
PzwmMVbemv22evcPDnlQXgh8UeYenm/kz/7zTwmIGKfeO9KfD3zBeM91ptSx
W/a5lAsq/VpmmnQM6SQVx1RUfa/tyq9Uv9JlD985Ql2PcVZjUg0pOaikvD37
nVz179z5B+na9UePjyNCiGcwo9fXb2QqP2DnkB/UHNFi4cfqeOnxZSo9/UaG
0tzSw0vL0B3DlMbguu4b/IwytF5Dq3HNqN2j1VwGvcZ5nLvP/z6l258s+lTu
H3S/ZGRnue257XH40hH1HJhPUYdJf0zO5Q9vvrCFtF/bQYIOzJQu67qqa/Q6
IjUrXWl58YHFpc2KNtJzcy81b2KNUlh7YZ7H/P302Kflly2/StUJ1VQ5f1zY
Z9QN+oy8aI9xEePl1y19ZEPMRqefrW/fftKwYUO7aatzNLdSpUp20zJzNPzC
8hXq//h16yT9YryRlnb2nBzv3Vv259i3e1u1kqN+fpIaG+dUXk1Beg17PTM5
RZL27pPkQ4ftXnOkSxeJGT7CVF5oV9u2bZ1uw8tpCeq94f3hXXRd/2Muf3jY
qXCpP72+DNs5XGYenK3eY4mBJeT8tYsqfeKeQJXv2YnPyX9De0vr5a3Ve0Ta
8sgVMuH3icY6DuUC9Cukt1v9nUprtayVfL3qG/X/x4s+Meqm9RrrXqxxcS9o
t239R44aJa+99pryLXhyHBFCPIMn/OFrTqw15jPYAABzEOwCfY3W6y0nw3Ll
RVnQKvwPOwVzz/R9v6lr9bzniNNnzopfjmbY40iOHebsc8Efac8fro+xbki6
nqzWEA2DGuZqC9hA+nrY1rCpCmuv/tsGqPNLji1Vx5vjQvOVBb1GfBPsrKK8
o9i4k1KmTBl56KGHlE/c3jWz58yVGjVqFPn9Q4NTY2ON/Wvo94UVK4tUhivx
Zmk57zssp97X4y+Zyt+nT1/56KPmRc6n15R5/eF4N/p9p2SmSu/QX9R166LX
q3OwodFntM0MMrNvGP878oejH0GHa06uaZxrNKuRujY+9bI61nrdL6y/w3pD
pxFnV7JkSZk4MdBUmxFCvIcn9HryH1Ps+vYA5jFco/X6bMr5XHlRFmwS/P/E
yCfk5009jfie08lnC6wP4n4RT2WPjEznbXN7eo05s9uG7mrNYfs8dafWVelj
IwLU8dS90xyW66i9tO20/+JBdYznxDF86/oa6DXsMjPvKTvn/Xbp0lWaNmtm
Nx32tY+Pj+k+BBv2Stg2U3ld0evIvv3kWK9epusN+9perHxhONLrHWd2Kf8H
tNW2jwRHLlfpWH/Ch+KoXEd6fSb5nDoPP5M+9+3qdurcnvN71bHWa1v/e14m
T54itWvXlqSryabbjBDiPVzRa+y9YY7os7VvrvOrT6xR579Z9a3al7VF2xNa
r21tDVCQXp+6eqbA+pw6fUa6detml8NF+O2OPb3WWltvWj313HgW+OthMyEd
vm2kw+d9q21v5irXUXvlta9Rtj372na/u6hs3LjJoc+7oP1rT2NWrzMSkySs
Vi1l35u997vvvSdjxjqOY3OEI73We9CDtg9WPhL9OwP0HaQjLgH2ta2fCOtA
/f/VjBR1PWxn23JxDfaja02ula+P5rWv5x1e4LDeWJ9gD/t2v2NCiHtwRa+x
tsccgXlq2r7pxn4s/IKVx1dRsWbwCSKOC/u8tvttntBrT9rXWq+xdxmXdErF
nuln189cKaCSqjvWKdiHxvxsG2PnqL0Qm4cYNsTlYT8Te//YE9C2E3BVr6GL
ZuLDPY1ZvY4NCJBD37c3fV8dHx4dHVPkvIXp9abYzXLo0hHlD7HVa8Rn4Bhx
aCjjq5Vf5/O1IJYQ8ZXYy7bdv9b29JfBX6r+pfuizueMXiM+vHt3P4fp1apX
F/+BA297HyCEOIer30v5fm17eXLUk8rWtNWTyIQopc/lR5dXsVSYu6BxOt0T
eu0u7Ok1bOUOIR1V7DfAc8PvqfUaIO4I39GA3xNzLvzZtvZTQe21MXaTst2h
y7CjtA9V46peh2/fIeXKlXOY7uj3157GjF7fSL8u4TnrC/jhzd4Xz2v299eO
9Dr89A7VH9DfsVbTcWlar9GHRuwaqeL89ZjQaRrsp/x93N+VHW47PrCPhFjH
CqMr/BUfnmO7X0m/9Vt6Z/S6fYcO0qPHzw7TixUrpvZNbncfIIQ4B79vdm+A
uLMSJUpIrE38ti3wTdwp3zc7M2u27G3Z0vQ98S03xNcddBA3fjcC/9Kbb75Z
pN+vEUKsBfX63qFnz15SuUoVUzFWnsKMXp9ftFiuHjjo9brfKeB7pIgn9PX9
QC5dvuL1+hBCzEG9Jt4E37MODLT297cJIcQKUK8JIYQQ60O9JoQQQqwP9ZoQ
QgixPtRrQgghxPpQrwkhhBDrQ70mhBBCrA/1mhBCCLE+1GtCCCHE+lCvCSGE
EOtDvSaEEEKsD/WaEEIIsT7Ua0IIIcT6UK8JIYQQ60O9JoQQQqwP9ZoQQgix
PtRrQgghxPpQrwkhhBDrQ70mhBBCrA/12r2kZqXLuZQLci0zzet1IeROJ+tm
thpPCelJXq8LId7GVb1ecGSRVB5XWYoPLC4VRlfw+vN4m6D9M6SYfzEZFzG+
wOueHvu0pdqrcZMmsiw42Ov1APGpl1UbNp3XzGt1GODvL126dPVM+dk3JcLX
V5KPHvN6W1ud2MQ41Rc+W/xPr9dFk30jWyKaNZOUyCiv14XcW7iq19Dq0sNL
y+Q/psj8IwvdVq8u67qqcRoat8XrbVQUvKXXrrYX9To3ZvX6zMxZcrhzZ8m8
miyhVavavebckqVysN13pvLea3hLrw916Chn58yV+PXrZd8XX+RLP78sWA58
285UXkLM4qpelxhYQl6e9rLb63Wn6rWzUK8dc7fr9Z4WLdRcbiYvuT0UprlZ
aekSVru2pJ06XeS8hJjFrF63WPixmlNtsdWfwduHSJXxVeWBwQ9IuVHlpOXS
lnIx9ZKRfiIhWj5a0FweH/m4PDbiMfl08Wdqr2rZ8eB85YL/W/O9kReahDXC
w0MfltpTasuKqJW56obzz0x4Vjqt6yyPDntUHYdEr/NoO0ZdOZGrvnnt6wPx
h4w6+238KZ9eb4zdJPWn11fpz018XqbsnZqvrTuH/KCep/qEZ2Tvhf0qzZn2
cgYzel1QvTbEbFRpP2/qqY7xF8drT4SoY/yP/E+OelJ+XN9Nak2uJT4BPnL4
0hFDr9+e/Y7qF2iT9+Y1lfPXLqq82X/+KQER4+TZic/JI8MekdeCXpNtp7e7
tQ94Sq/TL8ZLaLVqkpmcUuS8BeGo/6TfyJCak2uq/aqD8YclNumkGpOVAiqp
PWHd1m/MeEM+mP+h8pU1mfuu0dYA53HNwPBB8tTYp6TU4FLSd2s/lRadEKPS
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
    "], {{0, 334}, {
    492, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{492, 334},
  PlotRange->{{0, 492}, {0, 334}}]], "Input",ExpressionUUID->"149dc345-7f1a-\
4ff6-bc22-f3a417052e81"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvee7VEXah/ue8OF8PP/Cua6ZcUQk55wEFAQEUaJERVFQyShZAQERiQYk
CKiAoICIZCVHRUSyoIAKKqCOk5z3fafOvguqp/Zida/Vvffupje/DzfsXqGq
VoWnfvVU1Vr/X88n2z7yf/7Xf/3XwP+n4J+2PYY2HDCgx/B2/2/Bj/b9Bz7W
p//Dve/uP+jhPg8PqNHz/yo4+Pj/8V//tbDg+v+74O9//9uYf//40jX+8ZUQ
QgghhBAlS4H+ND+9dI1/fiWEEEIIIUSJIf0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGySD/rzwO7V5g+33W6uXPw04zA6dW5vRo8aGDu8P91+h1m3ZuEN
94r0+eH8flOrbm2zbcuynKclir073k+rrs2aMd40v6eZ/bso9bQ46nhp4eNN
S219+fHCgZynRZQMJW1T31v+uqlavbqpXbdOVp6ntLTfLz79yD7HxW/25Dwt
ojDTp41L9DWlhaLozwc6tLV1NYznxg0ttjQWR9s++vkG8/XJ7bHD8/Wnf69I
n46d2puJE57JeTri8OuPn1sN+q/fjse6/mbSn//+x2nz6uyJSX/nE8+PG2Y6
F2iU4g43aLPKVaxky+/1VybdcN1tZcqaLz/bcEMY/fs/YoYP7W///u+/nkhq
A2HjusU5z8ubkZK2qU2aNjajRw40f7t6xP5Gj5akpiqJ9puNdAfjyJX+TKUl
ALscdl1R229U3FE6Jqz9V65WzYa5ef2StPJg385Vth4lO3/h7C5z+OC60HL7
/MCH1+rf9wezWm5Fpaj68/HHe9l8CfLzpUMZpOW0+Z+/nbzheHGPLdPVn/lG
XO2UjTDpfytUqmR++SH9+pAP3Ez689jhjaZM2TuT/s4nrl76zPYtm9e/Vazh
YrP69ett7TacOfGJmf/GVNvely+dU+g6/Gct773H9jF+GGH6c+6rk0Pt4N9/
/rLIaU5mF/OBkrBFcaDslr09J5F/VapXM4f2rS2x+Eqi/RY13XHyPhhHLvVn
Mi0B//v3U4nrirP9RsUdpWNc+58/98VEmhhbET5pOntiW+w8ePTRHrH9BcFy
O310i03HP345mtVyKypF1Z+DBz8eWT4zpz9vx6N3Vqhomt/d1Cxa8LLNP85z
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
+W06zBYF8W3qG69NsbrKf7ZUdiWqT3HXJNOfcWwEz4Av0T+PH2HUyPA9U1Ht
l99oZuyMfx9jQRdPlP6MY7Pj5L1PMv2JNnLXuP7L6VnsodNVDmydezbqLnrw
d2/+Hx8kfuRU7ZLn4PmD+P6N4m6/7tqi6k/S4NLEb8YAfh9W0vrTJ932lEuK
qj+T1RnsMWOnsDX49F2Uk6urwTYVxLXt82d2FjpOmeNTKor+xDbwdyE7/5dj
kfrTn+91x1gvwhx7sL8OhhcEDYMvxD/mwnTzwvgvsFP41BmLMg/KeXQJ57E7
wX6XtNCnMVZlXg+N4fTnhPHDk665xnfHNWiRMHuJ/wQfGfM86MVk5YYvK5gX
ceJNFUdUXlHeycIfMvgJ6xO6prfC14YH9WdUvqda/zlm9CDTtl1r+zd9HW2F
OpJJHacNcd75UhzoAvyz/B2lP/FbsB4qGDd9BWuoXJn760Rox/jY/OvRkW5c
w7O7/HX5EFd/ss7Cv4Y6/Mgj3RK/8dG6ucCwPMNuM/9Mv0bZYHN5FuYyUtks
f60XegsbQJ0aO2ZwoetcX0B54k9AZ/E7TH9SX8PsoL+2weF0iT+nCfSRvv4M
2sWo53XtgPDdPfSrzNX4YfjjO/LczfkDecJ558tybbaTtxcMHyllyTiONDCm
Qe/55ZhqDAC+TaVO08bIL+Yh8f0mW38Yp0+BVPozyka4Zxg2tPC8DseS6ZSo
9uvyPYz61+dbo/RnHNsZJ+99kulPf07f79/4jS1jLYJdr3G9HmLbGN+6uovf
3Y+HY8nmlV17YyxFewzi1+fibr/u2lQ6JlX+ha3/xve05M3phXzb2dSf6bSn
XFNU/ZmszmAnnK1wayAcrA9hvOTqJfmeKh7Xtv024do2tjBMfzL2iqM/mTuw
+tObJ0UvRelPvzz99unC89cJ/et6WlLpz/qBtkm94h7mDYiLZ6XvcVrOrTf2
9efwoTfOg1O38Q8ybmetE9ehQZmXZ21OqnxHi2ATg8dZx4guZY6O8WcyX1iY
/owTb6o4ovKKPp2/k+13cv1AsvljX3/GyfdU+pM+nN/MY3Ed/pNM67jTn7Qp
/zzr1GiD/B1Hf7KeIBg31zjbTJl/8P78xDnsr68twNef35zabvMC+JtjYfqT
9UdB/en6TAdzfqz1db+d/UimP9H3jAv8Pa7Ulyj9GaYhGI/Ydn1ub+I6vy9A
k5M36Av63qD+xKaF2cGwPSDUbe5hHaV/nDlKX38G7WLU8zo75Ps9eFY/P8L0
J2v53HmnP139Bl9/0tdf25u5IDHnS18b1J9htsgn7P1LxMlzs3aQtSt7drx3
w31x+hRIpT+jbESyZ4ijP5O1Xzfu3fBh8nUrUfozju2Mk/c+yfRnsv6N36xv
Zc2TX8/Qd77+DNbdOPqzKOs/M22/7tpUOiZVelLNf+BHcb6SMP3p+sfi1p/p
tKdcU9Lz74yPsA3+sUGD+ib8QunoT39OgLrv9CW+ZWwiOsudd3MsUfrTzS34
8+/uXQaZ6E+nX6i77rybk0+lP1lT5dfNhC6+8kWo74v6HqU/g3N19FvcQ94w
l2PXJ3p+X3SpP34P6k/6m+D7HZjHZl4p7Lnc/Ltvk6PijYojKq9cubt9OQ7C
d75f/Db+mnT80/zGV+Xrzzj5HrX/nT1CrIPCZ5Vs/1mcOo625m/2mPj5hhaf
dH2NRJT+pB8Mzr+TL74WSld/hsHaXObS/WNPP/3oDfoTTepfwx4C/z1dbv7d
b5s++HL996PQF2BLiqI/GSu464J9Ab5ZxhDcX5T5dzQpYyrWNrhjjKEpm1T6
M+p5s6E/w3zoxFEU/enWMgbzmjoTdm9UnwJx5t9T2YhM9Wey9stvbBjrAv37
0EuuPcaZf4+y2SWtP7GFwfE7dpNjN4P+TLf9phN3GFH6k/ky/t53vV/x99NT
niWhP9NtT7mkpPUn/TprIVjDhbbAl0Ebcu9KSEd/MteILx5bPXLEAFu2bh0g
5eLmTrDvzJ0wJxalP/GTun2E/KaNsTY92f73qPZJerB9rDnBp4p9YY+xv58p
CBqGeXL8G4yTWWfD3PPDDz9kzzsdx7Ngbxg34V/nmFunFbQ72ASegTXHpAnw
caEviAMbhh3HbtMmqLPstSVPXXsI6k/8VWg3NBBlif+AOp3sPY1u/5Hvl46K
NyqOqLwC1uCzlgt/HGHgc2Ce0mk3wqDM2e/KOib8dZSZe/enqxtx8j1Kf767
9BU7D4Pv2V+zmkkdx3byPgH2yHGMeRXy162td+tgKXvqXvA3NonndP5c8h9t
Qvtzfrri0J/Uc9Ll3j3CeI78Dtt/xPpryoj9s6TVX2uBr43+ONn+I9oV7y5g
rsHVE9YAovlT2Sz//S303ZQl4wN8S05/hPVftGU0Ivt5i7r/CBuDH4mxGc/H
/AR5lEp/Rj1vNvQnc8nUZdYfYTtJJ7qP8nZzSOnqT+w2e/0pC3wJ/M+e9hlJ
6lhUnwK+/qSe80zUMefzjLIRmerPVO2X9kreoXuJk3la1ka5uZ1gew2mO47N
Dqabtkf5Jtu3H4wjqn+jfPAz44ulrZB/7l0Zbq9Apvoz1fuX3F7f4m6/7tpk
5Ur/QP7561F8wt6/hN2jH6OfcmsCaJP0x27OBxvOehtffzJmZ60rZRK2XtPX
n2F12pFue8ol2Xj/EvWSMqdvI499Wx1Hf+I3Jq/p/8lHwsF2+NofPyZlw/wU
5/Dn0NbdOC3V+5fQGazZZq4EfznrJP33JaWjP/mNDWOeE5tI/8Ba/6B/1gcN
Q1/E+JH000bon/x+hLqHneGZWL9C/eMarqX9hdlL+m/ygvziOvzw+7w10fhD
0TOkk/2KzKn4+6aC+pO2zfp81vagC0gPNiM45+SDXgu+wzdVvFFxxMkr/KcD
rr9bhTLFX+Nrf7QWfap7/xL54vZsBNd/RuV7lP6kj+Ba9HJR6zjPyPy007PY
GP88+pln5ZlIV/A319AfufkYdD7P5OasXJkXVX/St1IXCf+uZk3s/ln6At9v
RntgPETfRZyUN/4APxzsPuuXksXDHAPah/vxnbLWivW69I/J3tsUfNc0fQI+
ZPoJf79wWP8F7JPmvqLqTzQKGsitz+Z+2orrr8LsYtTzZkN/ogMIj3aLP491
vTwLaaU90V+nqz8ZF5FO7kfH0q7xHf2e5P2VUX0K+PoTsAfoS7ePKspGpKs/
47Rf2gX+T/deHPTYjJefS2iNsPYaTHeUzQ6mG/sdtm7Hx48jTv/G2gfaK3UX
DcX8BO9DIE3YhUz1p98ug7h+qLjbr7s2Wbm69uD7UIJ1MZhW924t9gH5+/RY
p8KabvKGMnTjDTe/xnnqDXYzbD928PtHwbrhSLc95ZJ8+P5mvkGd88vazcP4
3y7w8TVMaYN5EfrHqHU0ccm3vMJ+MdfKutFcp+VmIur7Duh8+retG9/JeVpL
iqBfF60e/I6LEEWF924E38EuxM2A9Gfxw1wAfiXGNcA72hgvhr3bFPJNU6UL
vg7ma4ojrHzJK3ys+BDwUbLePdfpudmI0p+M10vi+5s3C8zN8t5u5sawC/hl
8OVonCKKE9bm+O+UEOJmQvqz+GENNPMizI8wv8MeZbcuOox80VSZwvwcc3X+
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
HOQ1vkbSzJo7tDr78NEAaIZM9Wcq0CRh17n3SrH3zL0PMpn+BHzSnCuq/gS0
Fu9UIn60oksLfs/vzu5OXBeWz8wBM17gPjQsa1dZA8AYi/rJNSWtPzMtyyBh
dQZNjuakHdNmGSP67yAIEnxXPHvR8FMzpvD33YfpT+BdGdyn9y8JIcStyc3+
/nm0F300e1ZynRYhhBBCCFF0blb9iS8Q/yjvRMevksoXI4QQQggh8oebVX/y
Dh7mwJkndO+rF0IIIYQQ+c/Nqj+FEEIIIUTpRPpTCCGEEEJkE+lPIYQQQgiR
TaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEIIkU2kP4UQQggh
RDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEIIIUQ2kf4UQggh
hBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6Uwgh
hBBCZBPpTyGEEEIIkU2kP4XIjJ9/+TXvyXUeilsX1WEhbm2kP0U+s3fH++YP
t91urlz8NPR8p87tzehRA0sk7lxrx9LWd7+3/HVTtXp1U7tunRIJ/4tPP7J1
5eI3e3L+rDcrxd1eunbtkDS8fKvDs2aMN83vaVasYabKHziwe3VK+yZEPpOv
+vOH8/vN2DGDTcNGDc3tZcuZKtWrWdu5dtWCnKctiu/O7jarVrye83TkI//+
x2nz6uyJid+//vi51aD/+u24/b1v5yprs935o59vMF+f3F4iacm1diypvjuY
x9miSdPGZvTIgeZvV4+USPj5pD9zZSOKu71If2aePyD9KUoz+ag/z5/ZaWrU
rmXubtHMfPD+fHPqy63m0L61ZsqkEebPd9xppr44OudpDMNppAXzppoePTrl
PD3BdGVeh06b//nbyayk9djhjaZM2TuTnn/00R5Z005R/eJPl6+YPo89bipX
q25q1alndu7eE6s/LVMwnvrT7XcUonHTZrHuXbhosY2LOCdOmpxR3x2VxyUF
vs9lb88pkToK+aQ/i2ojiiO/ioN09eesOa+Yu5rdbX748afEsRGjx5iOnR+S
/rwJylOI4iQf9WfPnl3sHN1vV7644RxzeE891cf8/pdj9vfxLzaZhx7qaP2j
1WvVNH36dDPnvtqRuL57905Wt44bO8Q0a97UXvPkk4+Yf/xy1Gzfuty2/W/P
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
PvOU1cdB/enWsfjHLpzdFZqmKPtQ1Drl9J/D1dWgjcikTbtj7NV0x0i375t1
bc6tnwnTn4w1kuUXflT0OXMvlDNreDl/8sgWez5T/blv/wEbztSXXo6s52Fh
L1k03eYZczTUPcZP1C8//1O1c/yO+B7881Mmj0ypP1PlBdo0bLzGegiXP6zb
YB2Hf96tAZP+FKWRbOtP1uX5tjOsX0sF83+MU1PtMXHz0vQLYf5V+lY3DqUv
GZ6ifwFszqtzXrC2mjWJ26/7GNycDfOTydISFn6U/mSOC39mqnxYt2ahnZdm
boh5etZnuXOse2K9WrJ7k+3DeHP+NGuvGX/Tb8yeMT5pGOhPtIV/LCpepz+D
62nRMfQXzEm5NWzJwiiq/nx+XOE+xfl98VXwmz4ouO84Xf154dvv7Dza3S1b
mW+/u5gz/+dnnx8u6AdrmyZNmxdZf0a1oyD039Qhf80dvp509adfFnHaG9BO
WUeHj5I5U9qgP//u1/s4+jOVfShqnaKtoU8cTisGbUQmbdod88uAdOOz9fMq
Sn8myy+OMxc0ccIziXWop49uKbL+vPrzL6bdAx3MkGHDTcUq1cyx4yfS0p+s
x6X9MafifImsWQrqz1TtnDUbzLv457HLyfRnVF5cOr/vuv5cUug+ytXlzzPD
n7S+fP+8q/PSn6I0kov1n24Ovl4G6z+B8Tu25Mr3N86ZYXOYw6WPQtME5w3d
Ph3Wp/M7jv5Ez2An2GtP2M6muflA1gj59xOH87lkoj+Zf0fn+nPbhOd8sMAz
uXVpdzVrYt5aNCNxjrk69l34YTKf7tZYJtOfXIMNZZ8IGj/VPuEw/RkVr9Of
jOndeWeX3VoC8hc97YeBv9SVYVH0Z79+D9v9JH7YrO+nr3J5XRz6E9j3061n
LzN67HM5058PdOxkxj433vyYYv9TWNkG8zhOOwqWOedYM+eOseaNY0XRn3Ha
m6+14MvPrs1fcG9J6M/irlPJbEQmbbqk9Sfly99ubS7wTEXVn3PfmG9a3NvG
+u3HPT/BdO3eIy39Geav57nT0Z/4MYPz76zlT6Y/o/KCuXbmNPzxmrPhLn9Y
DxCcf2edvfSnKK3k4/53NEvdBvWs1qCN077Zo8DcMbrpjdem2OtYf0V7dmNS
bDW2l/ucjzSO/mT+if6kc5cHEvPTDmwSY9ZvTm23dgPfHf48fCDJwue9pdgx
0uPvo3XQbzF/w/w615B29ukwn+OvL2IPK/YdreD7hNz8H2N+9n7Q/7CeiT34
nE/1HhrixK/Kc6UqgzD9GRWv05/0q5Qh17BHmudy+1iwt/is0BjkJ+stmEvF
/8x5/Fp2nrFAz+ALD+pP1hCQL+Qb68D8/pT4nV+E/uDsiW12ryl7UNwzFJf+
hHdXrjSt72uXM/3JfPeXx46l1XeH5XGcduRDvtOv4i9CF9I2WDPJfqXJgfbj
E6U/o9ob6WUvDfOq1CegvyccfOsloT+Lu04lsxGZtOmS1p9ubRLrIihnxpXo
No65dajp6s8Tp04X2J9qZseu3fb39xcvFdj6Rubtd5bGrsPs58eGYLeZH8JW
tW3X2uo/6nOcMqHeUK9Y50UesVee+plMf8bJC/Qs+49YJ8V8PH5zX3/ii+F6
bB19AHWaPVLSn6K0ko/6E7DL9G+0Z+wEtgFds91bfw/sC2VfN/5E5pZZf++v
P4yjPwHtiR0I7lnFBzvg+vtg8B0y7mZuPFX49CWkBdvj9qEGwW9DnKSb939g
x9Fi/jW8d4Y0+fs6Hfhq7btaCrQp+s5pWc6l0p9OIzKHlSr/w/RnVLwubPQN
dhx7j5Zg7ODuR1Pg/2QNFWHgI5/x8nNW03Ae/wJ5TL7w/pKg/qR/JlzyFxse
fP8Svl33fhPWt6KH/D3cxak/i7L/Pfj+T+CdSumEQ75ksv89mMdx2lEQ9mmT
v6zFZI0bc9HsR+Z+f3+QTxz9GdXe7LuQCuoU9+KzJc3u/V4loT+Lu06lshHp
tumS1p/8pixJC+VBnSA96GLyHt2Vrv7s+fAjZugzzxY6tmbtOvs+27NffxOr
DjPW4Bmxm8ynsM+cdQ3YK9aCov2iygQ7hK+B959wnDX/zKvQ3yQrs6i8wEax
h4nxPWtR8Hcyl8c6ZRcGOpe5f/o02g31ObiGV4jSQr7qT1EyYP+w2SXx/urS
9i7lKP23avWajPRncWH156nTaetPIbJBcdXzXD+HECIzpD8FsBbp8MF11ufC
OxVLIo5bTX/yvaOqNWqZi5d+yLr2/PTQtfdn+d+RUd8tbiakP4W4tZH+FMD6
POarUq3PKyq3mv6EQUOGpf39zaLgvr9ZtXpN8/rceeq7xU2L9KcQtzbSn0Jk
RrZ9miVBrvNQ3LqoDgtxayP9KURm5Fo7qu8W+YzqsBC3NtKfQgghhBAim0h/
CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptIfwohhBBCiGwi
/SmEEEIIIbJJvunPXL8vUQghhBBCpEb6UwghhBBCZBPpTyGEEEIIkU2kP4UQ
QgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNbgX9uXP3HnNnhUrm
88NHEsdWrV5jqlavab4+dz7nZRCXOg0amQMHP0vrnh69HzYDBg1J/L585app
2bqNmTJ1Wqz7y5QtZ/50+x2FaNy0Wc7zQgghhBD5y62gP2HUmHGmfYdO5urP
v5jzFy6YGrXrmKXLV+Q8/9MhE/154tRpU75yVbNh0yb7e9qMmabZPS3Mjz9d
jnU/+nPrJ9ty/uxCCCGEKD3cKvrz+4uXTP2Gjc0b8xeapwYMMt179c5aHl+5
+rMZ9/wE06BRE1O7bn2r/1avWZt2OJnoT5g7b4F99r379ls/8I5du2PfK/0p
hBBCiOLmVtGfsH7jJlO2fEVToVIVc+Lkqdh51LV7D+tDDDJh0uRY9698f5Vp
2KSp1cD83rt/v5k8ZWraZZWp/sTni++XZx81emxa90p/CiGEEKK4uZX056Uf
fjTVa9Uxnbo8lNU83rRli6lao5bZvWdvkcLJVH/C7FdfM3+47Xbz8bbtad2H
/ry9gDIe06bPzHm9FUIIIUT+civpz+cmTDTdevQy9Ro0tj7JbObz4KHDrP4r
V7GyeXPxkozCyFR/fnXmrKlSrYYZ+syzpsW9bcxPl6/Evlf+TyGEEEIUN7eK
/tx/4KCpULmaOX7ipFm77iO7/4h9SHHyqKjz7/ge72nZ2nxx5MsilVWm+vPR
vo+bZ0aOsvPw97Vrb/cgxb1X+lMIIYQQxc2toD9551CrNm3NjFmzE8fQZAMH
Dc1KHrP3/qHuPW06+M17oIY9MyL2HnRHJvqTfU4169Q1F779zv5Gh5evVNkc
/iKeFo6jP89+/Y2pVaeeeWfZuzmvz0IIIYS4+bkV9OesOa+YZi1aFpp3Pnn6
K+vD3Lh5c4nnMfPf3Xr2MnUL9CO0aNXGLF+xMu1w0tWfaE722wfjGjPuefNA
x2vvoooKI+z9n3Ds2InENae/OmvXFix4c1HO67MQQgghbn5uBf1ZWijK/iMh
hBBCiJsF6c/8QfpTCCGEEKUB6c/8QfpTCCGEEKUB6U8hhBBCCJFNpD+FEEII
IUQ2kf4UQgghhBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEII
IYQQ2aS06U8hhBBCCJHfSH8KIYQQQohsIv0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGwi/SluFXL9LbJsfM9MiJJA9VcIUdxIf4qbhenTxpnm9zQrsfBz
rR1LU/999PMNpvFdjU2ZO8uZU19uLZE47qxQ0axa8XrOn/Vmpbjby6wZ45OG
l2/1N9WzlFSYB3avNn+47XZz5eKnOa8bQuQD+ao/fzi/34wdM9g0bNTQ3F62
nKlSvZrp1Lm9WbtqQc7TFsV3Z3erXw3Jhwtnd5nDB9eVWHy51o4l1X+/t/x1
c/GbPVktu2efecq0at3C/OWnw+Z//nayROLIF/3573+cNq/Onpj1eIu7vUh/
Fi1M6U8h0iMf9ef5MztNjdq1zN0tmpkP3p9v/S+H9q01UyaNMH++404z9cXR
OU9jGP/67bj9f8G8qaZHj045T08wXdkm2/mQql+sVaeeqVKthv1/wqTJsfvT
rt26mz/+uYz50+13FOLEqdOx7p/28gwbZ9UatUz5ylXT7r/RPoy9qP/ZLLsn
nuhtBgx4rETrU77oz2OHN5oyZe/M+P5ctb8g6erPnbv3FJRRJfP54SOJY6tW
rzFVq9c0X587L/0phEhJPurPnj27mNp165jfrnxxwzl8QU891cf8/pdj9vfx
LzaZhx7qaPvo6rVqmj59uplzX+1IXN+9eyerW8eNHWKaNW9qr3nyyUfMP345
arZvXW7tybdndheKY9CgvubBDu3s31cvfWYGFvTDlapWNRUqVzYPdGhr9u1c
lbi2S5cHbfg9ena2umTm9OfNbWXK2r/pX08fC5+7ZH6Te7mGNPXt29P6Czl3
/wNtzNAh/QpdjyYnrbu2rbC/P1y9wOpz5kcbNGxgxj8/zPz95y/tuf27Vtlr
N3y42ObL5BdGmLLlK5gVy14tFOaa9+aZO8qVtz6usDR+9MGbplWbFqZ8pUqm
fsP6ZszoQeavV47Yc//791M2jrcWzTDdunW0acBX/eb8afZ8WD4E5xOjyo4+
f9XKueaRR7rZueBadWubOTMnJK03Ufpz85ataftz0J8vvvRykf1Cu/bsTVt/
4nek3MhnymngdT1I/zd48OOmTr06tk7e376N2b19Zco2Ne/1F6/NpxfkKW1r
4oRnkvo1O3d5wJYb5UfZnTiy2Wrw5e/MMU2aNjadO7eP1TZIZ//+jxToleq2
nja/u2khvUnY1B/qPs/JmDNV+b4ya6Jtl6SjRcu7Tc06tWycX5/cXmJ1au+O
9+09lAHpfWfJrMj2B2H5RTi0QdJHGTRq3NCW28J5L5l7Wja3+YTmd+Xit5fP
9q61aUADUd60R9L/8aaliTiJf8SzT9t8IV1Nm91l7aU7n4n/c9SYcaZ9h07m
6s+/mPMXLhSUUR2zdPmKtPyflE/v3l1tPSlXsZJp/+B95tD+/4ynUtlozjMG
e/mlsba+Y4uefvpRe30qrRiVF3HCXL92kb2Ptkea3136ivSnEGmQbf2Jvb63
VQvbTrGR6Kx07v/lh0PWduM7i3NtxSpVzPjnhprfLh82P186ZLUptv2fv17T
p9g9rnF2+uK5vfb34oXTrZ3HPr3+yqREmOjaCgX2aNnbc+zvXr262jB+vHDA
/P7bcfP24pm2H3Ga1Wnl99+day5/d9AeGz60f0q/HxoOGztt6hhrJ9F/6E1s
H2la8uZ0m0bfb0LfW6d+Xav7Pj/woU3Dpo+WmP/+6wmrTVvf19KMHDHAXst5
8r9fv972HPENGfxEQlM76JsHJvFxUY6UAxqVPKEPob9FK7hr0Cj0oW5ueOcn
K2y86PqwfPD70zhlR3+PZjl3+pq+oAwJP9l6xNKmP219Lchbntn3f7IOBThH
H01boSyStbWN6xbb84xdqMNHD20wlatVs20gWR19/PFehfyf9MG0a9Lx64+f
x2oblD9a9sr3B209pb5ynnllV753NWtitm1ZZuso9T5V+c59dbLVCi9OGWX1
A+0DXYCvtqTqFKCZff9nVPtLll/E3abtvTY/+I02Ryejg/j9/dd7bLiUV7C9
fPHpRzadtL+/Xb02Bnxh4rOmWo3qNi/4/dy4oVYL01Z53tUr37BtmPED5zPR
n99fvFRgxxubN+YvNE8NGGS69+qdVv0F8qFPn+5Wt+FTGD1qoLV/TmenstGJ
/C/QkGh16hn5g5ZNpT+j8iIqTOowbYa+AfvHuAb7J/0pRHyyrT9b3nuPbaMO
bE869x/5dL29b8+O9yKvXbTgZasVnS8UsOHcv3n9W/Y3tg0/o38f/odRIwfa
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
t3KN822F5UPw/UtRZXez6M+w938ueeudrOhPoP7RBpy+Qe/gn2YcQb3s2Kl9
yveDfnX8Y9O2XWubd7QnvuFAeVAu1Luwe+Loz6i2wfpP3s1FPJxn/al7f1Em
5RulP0uiTgH+NJ6NMGddX7OSqv2liqck59/Zj08b5B1HvMONdTK8W4p0E1a6
+nPWnFdMsxYtzU+XrySOnTz9la3HGzdvjl1/iZs8op5QHuQTeh1fNRo0ykYz
dsEvwLtKyEPW5zNnRV1OVmZReREnTDSp+wYYYWAzyW++jRJlO4UQ+as/RcmA
TWWNQXG8E/uaf3RhkcMpLkpCfxYXRdGfQpQ0xVXPc/0cQoibB+lPAayJY54c
nxDvaSyOMKU/pT9F6UD6UwhR3Eh/CmCOnHn+4DsJi0K+6c9Mvr9ZVIr6/U0h
soH0pxCiuJH+FLcKufJtFie5zkNxa6L6K4QobqQ/xa1CrrWj+m+Rr6j+CiGK
G+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEII
kU2kP4UQQgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEII
IUQ2kf4UQgghhBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEII
IYQQ2STf9OfPv/wqhBBCCCFuYqQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBC
ZBPpTyGEEEIIkU2kP4UQQgghRDaR/hRCCCGEENnkVtCfO3fvMXdWqGQ+P3wk
cWzV6jWmavWa5utz53NeBnGp06CROXDws7TumTZ9pvnDbbebP91+RyHeXro8
588jhBBCiFuTW0F/wqgx40z7Dp3M1Z9/MecvXDA1atcxS5evyHn+p0Om+rNj
54dynnYhhBBCCMetoj+/v3jJ1G/Y2Lwxf6F5asAg071X76zl8ZWrP5txz08w
DRo1MbXr1jfN7mlhVq9Zm3Y40p9CCCGEKA3cKvoT1m/cZMqWr2gqVKpiTpw8
FTuPunbvYcpXrnoDEyZNjnX/yvdXmYZNmloNzO+9+/ebyVOmpl1W0p9CCCGE
KA3cSvrz0g8/muq16phOXbKrxzZt2WKq1qhldu/ZW6RwMtWff/xzGVOmbLkE
rIXNdb0TQgghxK3LraQ/n5sw0XTr0cvUa9DY+iSzmc+Dhw6z+4DKVaxs3ly8
JKMw5P8UQgghRGngVtGf+w8cNBUqVzPHT5w0a9d9ZPcfsQ8pTh4Vdf599quv
mXtatjZfHPmySGUl/SmEEEKI0sCtoD8vX7lqWrVpa2bMmp049mjfx83AQUOz
ksfsvX+oe0+bDn7zHqhhz4wwP/50Oa1wSlJ/Pjd+grm3zX05r49CCCGEKP3c
Cvpz1pxXTLMWLc1Pl68kjp08/ZX1YW7cvLnE8/irM2dNt569TN0C/QgtWrUx
y1esTDuc4nz/54BBQwpdN2TYcFOrTr2c10chhBBClH5uBf1ZWshEfwohhBBC
3GxIf+YP0p9CCCGEKA1If+YP0p9CCCGEKA1IfwohhBBCiGwi/SmEEEIIIbKJ
9KcQQgghhMgm0p9CCCGEECKbSH8KIYQQQohsIv0phBBCCCGyifSnEEIIIYTI
JqVNfwohhBBCiPxG+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEIIIUQ2kf4UQggh
hBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6Uwgh
hBBCZBPpTyGEEEIIkU2kP4UQQgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8h
hBBCCJFNpD+FEEIIIUQ2kf4U2ebnX34VpRTVF5FNcm3LhBCZk6/683/+dtJ0
6fKgmTJ5ZM7TItIj132WyC89kOtnEjcvk14YYbp27WD7g1zbNSFEeuSr/pw2
dYxpd38ba3fua9vKPP54rxuu6dato6lRu1bBM54udHzm9OdNxSpVzH//9UTO
n6O08t7y183Fb/aEnst1nyVKjrDypv29OntixnUp188kbl6w4dj/6dPG5dzm
CSHSIx/15w/n95s7ypU3u7evtL9nzRhvKlSqZP712/HENX+7esSUKXunKV9w
/MvPNhS6//4H2pinnuqT8+cojVAG6I0q1auZQ/vWhl4T1o/s3L3H3Fmhkvn8
8JHEsVWr15iq1Wuar8+dz1p/1r1X74J6U86cv3Ah7XsXvLnI3F5wb6069Szn
zsdL97TpM80fbrvd/On2Owrx9tLlse7fvGVrIk7C2bt/f+w0b9+xy97DM99R
roKp26CRmTBpsrn68y8Z5V9YeR87vNG2xUzrVFg8F779ztSuW9+89fbSxLHj
J06a8pWrmi1bP7np6wv3BMu7cdNmsevLH/9cxoZRrmJl07zFvWbp8hVpp33R
krfMI4/2zei5d+/Za+vNc8+PT+u+rt26m9vKlDVl7ixvKlapZjp06mr27N2X
cf5TP7ZvWWbKlq9gfvr2QM7tnxAiPvmoP2e8/Jxpfk+zxO/jX2yytnDPjvcS
xzavf8s0atzQPPZYT6tP3fGrlz6ztvuD9+cnfg8c8JipVLWqqVC5snmgQ1uz
b+eqlPGvXPaaaXxXY9unNmveNBEWfH1yu+ndu6sNr1zFSqb9g/eZQ/v/o8O6
d+9kpkwaYcaNHWLvrV6rpnnyyUfMP345mjQ+7kczE1+turXNS1PHmP/9+yl7
jvE//twmTRsX6LeKpvndTc2iBS8nfL6vzJpoHuzQzix/Z45p0fJuU7NOLfuM
pJPzhDt0SL9C8Z0/s9Pm565tK+zvD1cvMHe3aFbQZ5QzDRo2MOOfH2b+/vOX
9tz+XavstRs+XGw1J35p+gKOMUYgb4PPk6wvGTVmnGnfoZPVPvTnNWrXyahf
zRR07p/vuNOycNHitO9Hfz7QsVPa96EnOnZ+qFieAQ2frv5E+/A3+b5v/wFT
pVoN8/Y7SzOKP1jWe3e8b+st9YH6+c6SWYk2+9BDHW2doQ306dPNnPtqR2j9
TxbX6jVrTeVq1c2Zs1/b3w9172mGDBueF/UF7bj1k20ZxevXl8tXrppl7660
ZXjs2Im0wimK/hw5aqx97tr1G6Y1VkF/vvjSy/bv776/aEaMHmMaNGqScRm4
OnJXsyaF7LwQ4uYnH/Unmm78c0MLHavfsL6ZMH544vfIEQPMM8OfNAvnvWQ1
lju+euUb1m7+5afD9nevXl2tXvzxwgHz+2/HzduLZ9r+8tszu0PjPrhnjb1/
3ZqF5udLh6z2xPZznPP3tmpR0Jd2N1cufmp+u/KFGT1qoO1f3fok4mLu/+NN
S+3vi+f22t+LF04Pje+3y4dtH/3ilFHm8ncHzReffmTXFKArOf/yS2OtJv38
wIfW94hPGJ/vm/On2fNzX51sf3M/mpRryL8nnuhtzy95c7qN3/cdE3ad+nWt
xiVc8mPTR0us1kWbtr6vpc1fruU82qJfv9723F+vHLHz7hxLx/8J31+8VFCO
jc0b8xeapwYMsr6lbGkJeH3uvIKyqmMGDx1mHuzUJe37811/JjRC9x5m8pSp
RdIDPqtWvF7I//nLD4dsnaMNU79pR8xH1K5bx/zz12Ox6ws89ng/0/eJfmbx
kret//f8hW/zor4Ul/5MhHdnebNly8dphZOp/kTz8tz4yRnLp+Nv9vWnrX87
r9U/wixKfRs7ZrAdV+e6bxJCxCcf9Sdz7fgg/WPYH/yJ7ne9Aj2KRvzq+MfW
RtLHcRx/HOvV+RsfIDrp3OnthcJq1bqF9SmGxY2v8pFHuhU6tnbVAnPyyBb7
N/5UNJg7x9yjHwf6k31T/v34gUaNHBgaH3oYX6q/VnXfjvfNjo/ftX+jTYNr
64YN7W9atWlh/0Z/4rf83dOXs2eMT+QV6UVPb934TuI8flL0Kn8//fSjN/gw
N69fYueZ0dToYZ5v25ZlifOZ6k9Yv3GTKVu+YkEZVzEnTp6K3Q9NLejTmHsN
8mDHzrHDuK9dezPsmRF2Pps6c+LU6bT6wnzXn/ixduzabdc8ZDonGlbeQf2J
f542/Ptf/qM1v//6Wp1h3iKd+nLm7NcF7aO6rTOs18iX+lJc+vOny1es7xU/
JP7EdMLJVH+u+2iDrTOnvzpr63s6Pmdff3773UUzcPDQjH2wfn1jfof5q1z3
TUKI+OSb/kRH0U85/6Fj5ycr7HF8cKePbrH28dcfP7fn8I2ueW+e9f9Vq1Hd
+kQ5vmXD2/aeMIYMfiI0fnx/Qd+rD3PW6Ev8h9Vq1ijoy6vb8Jw+RX+iD/17
ODZ48OOh4eHTRQ+HncOHS9gb1y0udPzVOS8kbDH6s2GjhoXOcwx97n4z9zlo
UF/79+ljW22YZ058knjeZHmEj9jpT1/DF0V/XvrhR+tb6dSlePRYXI58edSm
+ZNtO8yVqz+bmnXqmpmz56QVRlH0p1vP50BHZvIcmehPnhvthYbj79FjnzM/
/nS5SHrAJ6g/nxs31LS8954brmOcNP+NqWnVF+j5cJ+C+l7N6pl8qS+U8e1e
eQP1IG59YQ0lZUYY5StVzmi9RKb6s9+TT5vOXa+1z7nzFlj9/0PM+oL+xFdL
2qnzzHcUdf0nMCamPPxxthDi5iZf9ecnmwvrT+aP0VxvLZph5s99sdBczIhn
n7b6ymmlC2d32eNoWH4zHxg3fvQY/WfYOXQXax4nTngmsT4SLRzUn8PT1J9h
fTU4/cncuH+c+XPmN/kbrck6WP98UH/iJybvyFvWb97f/j/rFdhbylrVZPnh
8tTf614U/fnchImmW49epl6Dxmbl+6uypieYbyZO95v1bS3ubZNWGPnu/4Qz
Z782Tw4YaHr0frhIesAnTH+yTiV4HdcsmJee/ly3fqPdh4QGfWbkqLypL8Xl
/8RnfejwF6ZFqzZm1pxX0gonE/3JGhn2PLHegd9nvzlntfDqNR/Eut/3f+K7
3bRli/W3Mw9flPqGDZT+FCK/yDf9Cczd8X6f4PH+/R+xoOf8tej4B+vUq2Pn
qe9p2Txx3M2/u330DnyowXc2OZh/Z77cP7bs7Tl27xPxEJ7zu8KKZa8WSX8y
/876TX9/EnPvhMvf+FjdWlAHWrttu9b27zj6k3lQtyaVdfxoeHeO+fcOHe8v
dD/P59YzFKf+3H/goPVjsY957bqP7P6juPuKizqf2rBJU6sJ3H30sTzDZ58f
jt0Xlgb9CbyLgGfPxAcaVt5B/blk0fQb5t/dnrfguDJVfUELuXEKc8Hsp962
fWde1JfiXv85feYs0+6BDmmFk4n+fHvpMvucrI9xz47+ZB1unPuD6z+B8SZr
STPJC1dHmH93Y24hRH6Qj/oT36a/18jB3iL25mCHjny6PnGcfUCscWTN49QX
Rxe6p2fPLnZ++5tT2+16RvZxMw/42d5w7cR+b+aN3l36il07uW7NAhs2e+aP
HtpgbTPz+ujX7VuX27l4f31kuvoTH2flatXM6JED7R4pngst7fQ1aznZt3H0
8w02/WhT9p8vXzrHno+jP2H4sP52XSw6wfcHs/ee9LNPib0hpIE9Wz16drbn
w/Qn2pRjjBHCfMth/Qj7D1q1aWtmzJqdOPZo38fNwEFDM+qX0gHfC+n94siX
hY43bX5PWv1iadCf35y7YJ4eONjc3bJVoevwb7G/5+jx47H0gM/6tYuurdH4
aofdb0SdZt2ymyegvvD+Xurpv0L8V8niGjV6rOnWs1fi99w35tsyizsXnMv6
Upz6k7UALVu3sXvJ0wknE/3J3rR+Tw0odGz5ipX23V0Xvvs++n5Pf9Lmt378
idWw769eXei658ZPMPe2uS8yPFdHxoweZN/zkeu+SQgRn3zUn+wNCpuTxi/H
WJw1nkH/ZafO7W2fwX5t//iV7w+aAdffv8TcOeEyH50qfrRdoyaN7Nor/IWr
Vs5NnOM9yKz5JDx8sfSt6DX8PWjQdPUnoIWZE3fvX+L9TW4/PfuSJr8wwr5X
iffb4N91vlGIqz/Rz+SP2xfvwx5/+/6lgvh5NvyrqfyfQJ6i451O9QnrR5g7
bNaipZ2Tc8dOnv7K9k0bN28uUT3BvC3v7gkeZx8+69PihlMU/Rn2/s8Bg4ak
HVam6z/dGkTevdTr4UetpvGv4z1YYZormR4ItkvaFeMiN26iHaIXOMaYkbbC
uyDC7g+LZ9eevXbdo6+HWYfZ+r525oXJU276+hL2/s+471AKrhdm/cHwESPN
xUs/pPUc6erPM2e/tvaVPWr+cdosaVjy1juRYSTe/3n9fbNNmjY3r74294br
2NPEeCcqPFdHsMNzZk7Ied8khIhPPupPfHBoRfaB5zotIn1KUhvkkkz1Z3GS
rv4sblRf8oeivP/zZoH6wTwT4xjeT5dr2yaEiE8+6k/Az8h7PfXd3/wj131W
SSH9Kf2ZT5QG/cn8D2vdZ+j7m0LkHfmqP9GdrFecMnlkztMi0iPXfVZJken3
N4tKUb6/WdyovuQPpUF/svaIfkB+CCHyj3zVnyJ/yXWfJUoO1ReRTXJty4QQ
mSP9KbJNrvsskV96INfPJG5ecm3LhBCZI/0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGwi/SmEEEIIIbKJ9KcQQgghhMgm0p9CCCGEECKbSH+K0kyuv0+t
b1yLfEX1VwhRkkh/itJMrrVjaeu/R48aaO6sUNE8/fSjJRL+3Fcnm0aNG+b8
OW9m/nDb7WbdmoXFFt6fbr8jNLx8rL/JnqUkw+zatYNtF7muF0LkG/mqP384
v9+MHTPYNGzU0NxetpypUr2a6dS5vVm7akHO0xbFd2d3m1UrXs95Om4Fcq0d
S6r/zkUdos2hfda8N8/8/pdjJRJHPunPfTtXmQO7V2c93r073jdXvj9YbOFJ
fxYtTOlPITIjH/Xn+TM7TY3atczdLZqZD96fb059udUc2rfWTJk0wvz5jjvN
1BdH5zyNYfzrt+P2/wXzppoePTrlPD3BdOV7HGFE9Y3ffnfRNGzS1Kz54MPY
/en2HbusDqNf8hk8dFjsMDZs2mRq12tgvjl3IaP+Oxd1iHbGc39zavsN5/79
j9Pmf/52sshx5JP+fPTRHubV2RMzure48qs4SFd/9uj9sBkwaEji9+UrV03L
1m3MlKnTpD+FELHJR/3Zs2cXU7tuHfPblS9uOPfe8tfNU0/1Sfhnjn+xyTz0
UEfrH61eq6bp06ebOffVjsT13bt3srp13NghplnzpvaaJ598xPzjl6Nm+9bl
tr/99szuQnEMGtTXPNihnf376qXPzMABj5lKVauaCpUrmwc6tLV+EXdtly4P
2vB79Oxs7djM6c+b28qUtX8zj3n62NbQZzz6+QZ7L9eQpr59e1qfF+fuf6CN
GTqkX6Hr0eSkdde2Ffb3h6sXWH1e5s5ypkHDBmb888PM33/+0p7bv2uVvXbD
h4ttvkx+YYQpW76CWbHs1UJh4ue6o1x585efDofUm9NmxrRxpm6DeqZCpUpm
+ND+5vVXJpkmTRsnrvnjn8uY5e/Mscc6d24fqzza3d/GTBg/vFBc5Kk79vJL
Y8397dtYndKi5d02DHTY91/vCc3HKG03dPgzZuCgoWn5c9CflF9R/ULPjBxl
Hu//ZNr6M1kd+uiDN02rNi1M+YLyqN+wvhkzepD565UjSdvR1ye3m969u9q6
W65iJdP+wfvMof1rQ6/d+ckKWxeoN9QV2gjp6NipvXlp6hhbz/DLRdU9WLVy
rml+TzMbHvWgX7+HzZWLn9pzlGvTZnfZeQzu5RrKP0zzOsqUvdOG+cgj3Uzj
uxqbWnVrmzkzJyTO//dfT9i0Ug/Jr+Z3NzWLFrxs6zDnX5k10bZn6ip1qmad
WjZO8idZnN26dbR5wdxLvYK8jmMLwvLLxT3/jak2T7iPMGjP2CbaV6Mmjcye
He8lwvHn31PZL3f9J5uXmvvatrLPTn4/8URv8+OFA4nz6erPE6dOm/KVq9ox
FL+nzZhpmt3Twvz40+W09Oe811+05UX5Yc8nTngmock/27vWPif+Zdo79Zlr
P960NHH/6aNbbJ3luTi3ef1btl2k0opReREVJrawf/9HTMUqVawPZNaM8dae
SX8KkT7Z1p/Y3HtbtbC2BZuCzkrn/l9+OGR1Df6fONdiJ8Y/N9T8dvmw+fnS
IatNsXX//PWaPqX/5Rpn1y6e22t/L1443dpC+iJ0lQsTXYveWvb2HPu7V6+u
Ngxs2O+/HTdvL55p7anTrE4rv//uXHP5u2tzZmi1VL4rNAP9yLSCfop+G5uH
3qR/Ik1L3pxu0+j7FOnH6tSva/7376fM5wc+tGnY9NES2/fSl7W+r6UZOWKA
vZbz5H+/fr3tOeIbMviJhKZ2oA3pC8PS+NaiGTaOHR+/a9NBflStXt2m0V2D
dqCs8U3/+uPnscojSn9i7+m70b7oB8oD/wOaPCydqXTdkaNHC/qZSub4iZM5
0Z9fnTlr4z/46aG0/Z/BOkS7ol24uXG0ExqQcUuyekbZ9OnT3Wo/xnL0odS7
ZH65k0e2FPJ/vlbQLuiDnxs39Fr9L4g3qu7RLkjnxnWLbTzcx9hs+LD+9jz6
s3K1arY+cu7iN3tsnaKuJnsOpynPnb6WLtoy6cRfy2/GLGhS0kZd3b19pdXo
b86floiT3y9OGWXrFNegQdAmqewLflrf/xllC8Lyy8Xt0uJ8zOhgnp1jo0cO
NC3vvScRj68/U9kvfmNz0MjocWwJ54PPlsn8+9x5Cwrsd2Ozd99+W4d37Nqd
Vv2l/ImX8TJ5dfTQBlvuLt1ffPqRfU7q79+uXhtDvTDxWVOtRnVbRoA+fPzx
XtY+/vTtAfPYYz1t3UqmP6PyIk6YtDvGMYyZSRdzbYzdpD+FSJ9s60/sKHbF
QR+Yzv1HPl1v7/P9AcnAx4FW9Neq4Sfjfsa1/MZ+42f072M8O2rkNXuC76ZN
23sT5/AZOp8gfTxhuX7P0ap1C+vrcOGjqfzzUfpz6VuzTZ16dQodQ79hB/Fd
4mdhncHWje8kztNf0X/yN3tDgrpx8/ol1vbS5zvbvm3LssR55284c+KTRHxc
nyyf8f9gm/1j5KOvP9EF+FbTKY9Y+rOgT3d6FdavXWTDCFsTl6oPfWnadNPl
oW5p68bi0p/Q8+E+5vmJLxRZf9JnBusUYx7qTJj/GqhHvn/02OGNofXZEdSf
aCfqoT8PEVX3XPt1vlJgzOT+JkyudZoDaEv49pK1F+qZa2+AjiBd+GH5jZ8r
OE8+rCD/8BW7OBnT/O6N52YX1LNUcYKvP+PYgrD8cvrTzwPGAH67QfuQPvc7
qD9T2S/CResyFnDnGbv79iUT/Xn1519M+w6dTNnyFc2o0WPTrr/kte93BNYz
uLrjbBT2zp0/uGeNPYaOPHxwnf2bOuvOM7eSam9WVF7ECZO65vs+CAtNLP0p
RPpkW3/62tORzv3OHuB3i7oWP4PvN3Bgy5nv4m/sN32Rf55jgwc/bv9mXE58
+HH4jR8Gnx1/b9nwdujzAP4bF1awP47Sn2itZOGuXPaavQbfJOsA+Jv5V187
4m9Kdj++GGfbg33lPS2bm0nX+z3mItnb5eYog+ADwB/hH5syeeQN+pNw0imP
OPqT+Uj/vHueLz+70Zeeql/s3qu3mfziSxnpT+IrU6CTfD7ZtiPtsGbOnmMe
7Ni5yPqTfCV//WuYSyedyeYY8D2hXfCbV6tZw/qvuR6dGXZ9mP4MjpOi6h7X
4P9mTpNxHXPHaFJ3P2Ey7+6HyTE3xx0G9QytHTzGehK0N3Hjb/PPvzrnBTvX
7cKnrieLE+3hP4fTIr7+jGMLwvKLY/6aFSBe5w/1w3a/g/ozlf2CJYum23LB
94q2ZQyIJnfnM91/NPvV12xaPt62Pe36y7iH+XY0PnWPdGEHGEf5bdpfV+OO
XTi7y6414W9fyzOujXo3QKq8iAqT8Zo/VnYw9yL9KUT6ZFt/Ylt92xymR1LB
vC0+hFTr/t28NP1xmH8V/5kbw2Krh0fYbzQV/RU2k7Vv26/7Dd08H/PKydIS
Fn6U/kTX4c9MlQ/YQ/pP/AjM07NGyp1jfRPrwZLd6+y4m99z0Odhl/FTMaeN
DyhZGMxTTfJ8NID/Nag//T3accojTH9i3339WT+gRZjf53nC1tKm6hdbtWlr
5i1YmFP/59tLl5m7mt1dLPrz+XHDCl3jfNq+P8dB2ePHRwO4tZmsfUtXfwb3
CkXVPcel8/vs2ITxnG3PBe0rWZhx9GfwXQBB/cl6AP8861WYp44TJzaHZ3fw
m+O+/oxjC5LFc1ezJoWOES9zBe53lP5MZb/QVNf05YLEugrW7xRVf7J2pEq1
GmboMwW26t425qfLV9Kqv6xNZtzjjxmpC0H96dsoX3+uXvnGNa14+T++fepx
Kv0ZlRdRYVJnr+nPwnWJOi/9KUT65GL9p5uDr5fB+k9gTRA2I2y+FdvCWi/6
Aca6wflet0+Hdej8jqM/6WOwMey1J2xnu9ycG+vJ/PuJw/kNM9GfzL+jc/1x
OOE5HyzwTG7dF/0X6zHdOeZAO3S8v1CYzKez3pK/k+lPrkGTsIcLTRA878O7
rliH7x9jTj6V/oxTHuxT4r1afrisD/X1J/Oz/rxxot8I2Y8WpT/nL3wz5/qz
afN7iqw/2cPDXhT/mneXvmLTGZYv+APJM8rcHUOvFVV/RtU92k6w3bIPhXaV
LMyi6E/+xr+G3vTPM3fQtl3rjOOEsPn3VLYgF/ozbM6Bc0XVn4/2fdzun2Me
/r527e0epHTqb9Bfzzw2eRNXf7o9lP7Yyq1rT6Y/o/IiKkzSiO3x59+dHZb+
FCJ98nH/O+NQuy+0wF7Rx9Av4gPDH4dueuO1KfY6fB/YFufjoQ/EvnGf85HG
0Z/MAWGjO3d54AafH/uLWONFn0zfyvpQ5pHwPSULH32FTiM9/j5VB3qBPpM+
kmtIO3tmmR/1dRd7NvBT4j/0/S5u3pWxPeskWfPE3gj2eXA+mf4E4sSvynOl
KgP2ZLHunv2p2GW0Dhoilf6MUx7Ycebk3PpOfLJoVl9/Ei/+E9YIshaMedyH
H34oNJ2p+lDeI5PsnTHZ0p92/r1Tl7T1Z7AOUQ7Ot0N5nD2xze4jHziwb+j9
bl0J2gZ9xLsemIsPrgv2iaM/o+oe60fwsdM+aC/UWzSrez9CSehP/PiMYRjr
EidrdxjfLV86J+M4gfUqtEHKgLWFUbYgF/pz/twX7X58bBhzJcSH7kZHOT9f
uvpz9Zq1pmaduubCt9/Z3/sPHDTlK1U2h7/4Mnb9Zf0Q4xTqrqsDrMd18zhR
+pNnce8FYf8cx6hnqfa/R+VFnDBZo8p6CdY6MR/PnIP0pxCZkY/6E7D5zFNj
C7Dx6Br8QdsDfSfjV/Z109/Q7+GzY9+jOx9HfwLaE9vn9tQ68OUMuP7OFXyH
jK99+xcWPn00acFuufclBWFeijhJN/sT0JmsffWv4d0upClsny6+WvsOnAJt
im51WpZzqfQnOoZzzFWlyn9sNRqQtffkPWv62GdMn+yuCdMFUeXB3zwr5+y6
h9kT7T4n5ytBf/Jc9M/M36FN6SOCexkS9SSFrsNn07Vb94z0J3kUfP9ng0ZN
0g6r18OPmgmTJqetP8PqEH5rNCf1kPWM7GHx92kFmT5tnK0b1F3KgfpBXpKn
YRo0jv6MqntoXfbjkD53njGIe7dYSehP9Dh5wbssOE4d9d81lqn+RGMTHuXA
mDHKFuRCfzJGI3+xIYwP2a/NdwRIB1oLDZWO/kRz1q5b3yxfsbLQ8THjnjcP
dOxk/aFx6u9Xxz+22o/8w4bzvi3qMfWZ9h+lP/nNGIr1OuQ1a8JZl8keet4B
ERZnnLyIChNdij1ijI7toy6jV5995qmUdUUIcSP5qj9FycB7FLHNcd4X7+9R
hhHPPm31S0mmD/3p+1ijSKXrjh4/bt8dw/sMi8OXmS5nzn5tylWsnNH7l4Qo
aYqrnuf6OYQQNyfSnwJYx8T7R/Dl8N7CqOt5tw1+53073rf+Jd6Ngk/AvRe1
pChO/Qn2/fOD03v/fHHx7KjR5vF+/dV/i5sS6U8hREki/SmAdwYyLzU5sL41
GcyjogWZK2QelTks9nj47zEsCYpbf2by/c3iYOPmzUX6/qYQJY30pxCiJJH+
FKWZXPg1i5tc56G4NVH9FUKUJNKfojSTa+2o/lvkK6q/QoiSRPpTCCGEEEJk
E+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEII
kU3yTX/m+l04QgghhBAiNdKfQgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0
pxBCCCGEyCbSn0IIIYQQIptIfwohhBBCiGxyK+jPnbv3mDsrVDKfHz6SOLZq
9RpTtXpN8/W58yWex127/f/tnfefFMXWh/+Ze6+K5CwscREUEBBBgqAkc0JA
MSAgCEjOQZEMigiKiGQTIEgQRZRoAlRQAbNeb3jr3aek5ta0M9M9u2zPzuz3
h+ezs9WpuvrUOd86VT3Tx/z98irmH1dcmcTR4ydy/vyFEEIIIeKmMuhPGD5y
lOnavae58P0P5tTp06Zh4yKzctXqWNoY/TlpyrScP2shhBBCiIpAZdGfX585
a5q1KDbPLlxsBg4aYvr0HxBbG0t/CiGEEEL8j8qiP2HTlq2mao1apmbtuubo
seOR26h3n76mRp16f2Hs+AnRjpf+FEIIIYRIUJn059lvvjUNGhWZnr1ujrWN
0Z+XValqqlStnuDmPv1y/uyFEEIIIXJBZdKfo8eOM7f07W+aNi82a15eG1sb
K/8phBBCCPE/Kov+3Ltvv6lZp745cvSYWb9ho33/iPeQorSR5t+FEEIIIS4d
lUF/njt/wXTo1NnMmDU7UXbHXXebwUOGxtLGUfXnjT16mkcfH55zmxBCCCGE
KE8qg/6cNWeuadOuvfnu3PlE2bETn9gc5pZt28q9jdN9/+fyFc8n7Vfcuo25
5/6BObcJIYQQQojypDLoTyGEEEIIUXGQ/hRCCCGEEHEi/SmEEEIIIeJE+lMI
IYQQQsSJ9KcQQgghhIgT6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8K
IYQQQog4kf4UQgghhBBxUmj6UwghhBBC5DfSn0IIIYQQIk6kP4UQQgghRJxI
fwohhBBCiDiR/hRCCCGEEHEi/SmEEEIIIeJE+lMIIYQQQsSJ9KcQQgghhIgT
6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8KIYQQQog4kf4U2TJrxhhz
Tds2Oa9Hrul5U1czYvjglNs+fG+j+dtlV5gzX+y+ZNfbt+sVe87zZ97L+b2X
tl3Km969u1/Saw8Y0Ns8MvS+cqvv9Kmj1JcCVBT/Ut79LZf9JBve3fFyxnYo
ax8pD18p8oN805/Xd+5g7r67/1/Kb7mlh2nYuFHJ/ZxIKp85/UlTq25d8+9f
jua87oVCRYkPuebjDzabz49tT/z/0qpnEj40Dv25Z+daW5brdvjqs11m7epn
0rZLnOSb/jz92Tvm4P4NOX+GFYmK4l8utf4M9tdc9pNs+PHbD6wG/dfPR1Le
R2n6SHn7SpEf5Jv+xDfVrF070Rfg1wuHTJWq1UyNkvKPDmxO2r/LjZ3MwIG3
57zehURFiQ8VCcY9dRvUN+/vWW//j0N/3nFHXzNv9rhS1/c/vx67JPVatGCy
6du3Z86fAeSb/qxM+D47E5fSv5TFzi+1/ixLf61IBO8j2z4Sh68U+UG+6c8j
H261trp7x0uJsm2bVpiWxS3MnXf2s77LlV84e8D8/fIq5tWXFyb+HzzoTlO7
Xj1Ts04dc2P3znYsl+l6a1542hRfXWz1bZtrWifOBYxd6Xucr3qt2qZrt+vN
+3vXJ7b36dPTTBw/zIx64iF7bINGV5n777/N/P7Dx2mvx5i4V69uplrNWnb/
u+7qZ/NLbENLD33o3qT9T32607bHO2+vtv+/9soic227NqZKteqmeYvmZsyT
D5vfvv8osT/3sXbNfHPbbbfY+2rUpLGZM3NsBvs4YaZNecIUNS2y+v6BB+6w
9+THB57JzTf3sD6FOt9++y3m5Cc70p6T+gx77AFzVVEjW8/Wba6242H/fj49
+lZi/3vvHWD3++ePhxNlHTq1S9R7wTOTEs+ocZMiM27sozbm/PTdQVO1Rk2z
+oV5Sddf99ICc2X1Gna7X/7iyrm2Tn5Z/asamptu6pr4n2Owqfd2v5qYP+Na
XId6c15szPnUHW++aHP21J86vrl1ZanaBfx4SL6fz1dUrW6atmhmt1MP5nOL
mjWx9eEZPb98VuJ45gJ69Oxqpkweac9PTmPurHGmW/cbzKrn55h27a+116Zf
+HmZt7attPeATfKM77lngPn29L7EOS+rUtX844or7fYTh99ItMvP5w7a6/j3
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
mNFDTa9e3exntOblV1YzP5//MLHd6c///nY8UUYO0/+dRrQh+VL3f1B/uvM7
+K3H4SWalc+cF63771+OJrYvWjDZFDUtSvwv/SmEEEKIyki+689fzh+yujAV
zS7Oz6M1fd3nylq1Lk4qYz7f5UPh9c3P2fO4/4P68+Gh9yUdT9mDD96d+H/5
0umm4/Xtbe4VbVuzRO8yD++2S38KIYQQojKS7/rz1wt/6s/Nry1Luz9ak2OC
ZVe3aZVUhv5cumha4v8w/flIBv258dUlF/XlosT7TsuXTJf+FEIIIUSlJ9/1
JzD/PnXyyKR9WG/JOk8+50J/stbUXzsKbJP+FEIIIURlJx/1Z9v215hHHr7P
fH/2fbvOkveLaterZ3ZtX2NzjUc+3Gqat2hu5s15yu6fC/25cP4kW6evP99t
/vj5iL1e5xs62neSfj530O7j688D7643wx57IKGZhRBCCCEKlXzUn8xj851G
rKvknSI0J/lPvn+pStVqVkfOmDY68W5RLvQn6wLuvru/fceJ/OzkSSPMN6f2
2nqwFvTC2QNJ+nP1C/Ps+VnPmuv2FUIIIYQoT/JRfwohhBBCiPxF+lMIIYQQ
QsSJ9KcQQgghhIgT6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8KIYQQ
Qog4kf4UQgghhBBxIv0phBBCCCHiRPpTCCGEEELEifSnEEIIIYSIE+lPIYQQ
QggRJ9KfQgghhBAiTqQ/hRBCCCFEnEh/CiGEEEKIOJH+FEIIIYQQcSL9KYQQ
Qggh4kT6UwghhBBCxIn0pxBCCCGEiBPpTyGEEEIIESfSn0IIIYQQIk6kP4UQ
QgghRJzkm/78/ocfRQ7J9fOviOT6mQjZuxBC5BvSn6Ks8fgfV1xpNqxbnHPb
kE2KOOxdCCFE2ZH+FGWNx9KfuX8uIj57F0IIUXYKQX/u3LXbVKtZ23xw8FCi
bO0r60y9BleZz0+eKvcY1fuWPubvl1exOszn6PETWZ2nqHlLs2//gayOmTp9
pvnbZVf85drPrVyVtN/oJ8eYNm3blUs8lv4sXJtMRd8Bt5pBQx5K/H/u/AXT
vmMnM3Hy1HK/r+073klp7w8OfThpv9c2brL7lbWtc21bQghRqBSC/oThI0eZ
rt17mgvf/2BOnT5tGjYuMitXrS73eOhi/aQp08p8ntLqzx433Ry+34yZpku3
HmWuY6pnQvxftni66dOnp7myeg3TomULs3zp9MT2//x6zEyfOsoUNWtiqtao
aa5p28Y8v3xW0jne37vedLmxk6lStZpp1KSxmTJ5pPnvb8fttn//ctTMnP6k
adW6uETT1TLXXNvaLF00rcR2T9jtc2eNM92632AWPjvZnrtmnTpm8KA7zalP
d9o6NWne1LRs1dLs3vFS4noXzh6w+9SuV8/uf2P3zmbPzrWJ7R++t9H06NnV
1Kxd21SvVdt079HFllU2m0wFGrZGnXpm89atCdtibPPtd+fK/b7Qn9hb6H47
/9SpaONLbe9CCCHKTqHoz6/PnDXNWhSbZxcuNgMHDTF9+g+IJc5fylhfnvpz
waLFpt+tt5W5jqmeCXqgeYvmZvvrL5gfvnnfrFg6w8Z+p/eemTvetCxuYQ4f
3GK16P7d66zmW792kd3+87mDpm6D+mbSxOHm3Ff7rc5r2LiR1ZVsnzblCatJ
P9j3mvnXz0fMru1rTI0SXbhk4VS7ff68CUn/H//oDXv9du2vNWe+2G3LRjw+
2LS/rm2izv379zYDBvQ2357eZ/4oOedzy2Za7fvlp7vsdur71LjHzO8/fGx+
vXDITJ40whRfXZzQvJXFJtMxf8Eie2/v7tlr87w73tkVy31F1Z/knWvWrlsu
9i6EEKLsFIr+hE1btpqqNWrZuHP02PHosbpPX5vPCTJ2/IRYY3156s9Vq9eY
+x4YVC7xGD0wdswjSWXkKkeOGGI/ox1XPT8nafuY0UNNr17d7Ge0H3lI8pxu
+54dL5sdb75oP6NN580el3T8w0PvMx06tbOfnf50+VJo0OgqM+GpYYn/WR9Q
pVp1+/nzY9utPj15YnvSOTt0bGfzrHwm50nO9n/95ERK7VnoNpkOcrrkdrm3
4SOeiHwc+chU9wUbNm4OPT6q/vz0s89N42YtysXehRBClJ1C0p9nv/m2RHcU
mZ69wvXYpYRYf1mVqqZK1eoJbu7TL+vzlFZ/ss7Pvzb5qOB+3507b86c/aZc
4jF64MWVc5PK+va7ydx++y3ml/OHrNZLRbMWzey+aFe0X6pz//TdQbvvlg3L
ksrnzXnK5lD5jP5E7/rbm5ac2+VD4fXNz9nz+J9T8dCD99h91r20wGpQ8rqP
PTrQbNu0olT6M99tMhOz5z1t2+zNt7fHdl9u/ad/X/DW2zv+su/pr74uF3sX
QghRdgpJf44eO87c0re/adq82Kx5eW2ssb6i5z8vFameCfrzpVXPJJX169fL
3HvvrXbuGr2w+bVlaZ8p+tOfG/dx+nPrxuVJ5czN16pb135Gf17dplXSdvQn
a0Td/77+fHPrSvuZtQKZbA3tvGn9UjP88cE2P8t8fTbz74Vgk+n45NPPTN36
Dc3QRx8z7a7rZMc3cdxX1Pxnedq7EEKIslMo+nPvvv2mZp365sjRY2b9ho32
XQ/e+YgUqyvIXGc+60/WR/pl6EE3J8/8+9TJI5O2nzn5rvnjp8P2M/PvzJ+z
1tJtZ+599Qvz7Of6VzVMrAV1DBlyl+l8Q0f7OVv96ebfWUfqH8P7Sk5fsi7U
3/bRgc1/vk99bPtf7r+QbTIdd9x1t3n08eF2Hv76G7rad5CiHBfX/Ht52rsQ
QoiyUwj6k5jWoVNnM2PW7KT4OHjI0FhiVCHozxt79LR6ojTxGD3A+zq8N8T7
RS+/ON9qNfe++NNzx9v8IXqP7Uc+3GrntZlDZzs5zjr169t3hNB9h97bZIqa
FplZM8bY7bNL/jZuUmQ+/mCzPR5tynv0q1b+uaY0W/0J5GeZ8//i+HZ7TvKz
rA898O56c/KTHXbumvv454+HLYsWTLbv3pPPLSSbjPrcfV5Zt95cVdTEnP7y
K/s/OrtG7Trm4Icflft9XSr9+cq6V02joqbm4yNHsrZ3IYQQZacQ9OesOXNN
m3btk+YAj534xOZUtmzbFkusT/Vdi8tXPJ/VeS7l93/6388YheLWbcw99w8M
3S/4PHjnh+vzfhHvE6HR+P6llStmJ/ZB35H/5PuXeMccbThj2uik94XQfV26
/u/7lyaOH2aPYxvvJfEu0VVFjez527a/JpEbhdLoz/Nf7zeDLn7/Et8Zxfy/
/x2mG19dYvUp1+M7mPh+J96JKjSbjPrcHWjOxk2a2ffZ/PKRo560WpZ8aHne
V7rv/2zeslVW5+F7sOwY6VBmzZxrfyeEEIVKIejPQqE0+jNucv38KyK5fiZC
9i6EEPmG9GfFQfozP8n1MxGydyGEyDekPysO0p/5Sa6fiZC9CyFEviH9KRSP
ZZNC9i6EEHEi/SkUj2WTQvYuhBBxkm/6UwghhBBC5DfSn0IIIYQQIk6kP4UQ
QgghRJxIfwohhBBCiDiR/hRCCCGEEHEi/SmEEEIIIeJE+lMIIYQQQsSJ9KcQ
QgghhIgTpz//79spf/L7J0IIIYQQQpQr/w+3UXDf
    "], {{0, 363}, {672, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{672, 363},
  PlotRange->{{0, 672}, {0, 363}}]], "Input",ExpressionUUID->"4b33cae6-5740-\
4d9f-ad8e-7d83116b3730"],

Cell[BoxData[
 RowBox[{
  RowBox[{"grammar", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<Program\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Dot\>\""}], "|>"}], 
           "]"}]}], "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Const\>\""}], "|>"}], 
           "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Identifier\>\""}], "|>"}],
            "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Equal\>\""}], "|>"}], 
           "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Semicolon\>\""}], "|>"}], 
           "]"}]}], "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Var\>\""}], "|>"}], "]"}],
           ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Identifier\>\""}], "|>"}],
            "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Semicolon\>\""}], "|>"}], 
           "]"}]}], "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Procedure\>\""}], "|>"}], 
           "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Identifier\>\""}], "|>"}],
            "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Semicolon\>\""}], "|>"}], 
           "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", 
           RowBox[{"<|", 
            RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Semicolon\>\""}], "|>"}], 
           "]"}], ",", " ", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}]}], 
      "|>"}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.757708463418523*^9, {3.758397084945386*^9, 3.7583971201135187`*^9}, {
   3.758397259771913*^9, 3.758397262037738*^9}, {3.758397357164755*^9, 
   3.7583973926301126`*^9}, {3.758397428460285*^9, 3.758397549530447*^9}, {
   3.758397602835465*^9, 
   3.758397620280055*^9}},ExpressionUUID->"2acc6ca5-763c-47d1-84db-\
b9bd9d839b1a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseTree", "[", 
   RowBox[{"tokens", ",", "grammar"}], "]"}], " "}]], "Input",
 CellChangeTimes->{3.757712085869459*^9},
 CellLabel->
  "(Debug) In[100]:=",ExpressionUUID->"81e6ce23-a996-4ea6-b3c8-e42aa594bd86"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQbfN5Je+P9X/sjz//JZGqIeGwY6FlfJ3RO/tzXbdL
I5RFHSA0qwOMzwAFV3X3XPKWE4Kq/2cP48Pkd4LF+Rwg5r6wR+X/QONzOKCr
h4nD1MP4EHuY4Pog9t+zvwYVn7BZ2Fc0icXhGoq6HfYnoObsd5HaU6j7Gs5H
lX+BJv/C3nlaV9brVT/h6oVZW3733WdygPH/ST96suUdN5xvGnByA8vW/3D9
PEmL581+wuoA48PkYeEEk4fxUc1DDwcOeHzAwhsAeJPJdA==
    "], {
     {RGBColor[0.5, 0., 0.], 
      LineBox[{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 28}, {4, 6}, {5, 7}, {5, 
       8}, {5, 9}, {8, 10}, {8, 11}, {8, 12}, {9, 27}, {11, 13}, {11, 14}, {
       13, 15}, {13, 16}, {14, 19}, {14, 20}, {14, 21}, {15, 17}, {16, 18}, {
       20, 22}, {20, 23}, {21, 26}, {22, 24}, {23, 25}}]}, {InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"E\"\>", ")"}], ",", "1"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 1], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T\"\>", ")"}], ",", "2"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 2], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"E'\"\>", ")"}], ",", "3"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 3], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"F\"\>", ")"}], ",", "4"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 4], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T'\"\>", ")"}], ",", "5"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 5], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"id\"\>", ")"}], ",", "6", 
          ",", "\<\"56\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 6], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"*\"\>", ")"}], ",", "7"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 7], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"F\"\>", ")"}], ",", "8"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 8], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T'\"\>", ")"}], ",", "9"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 9], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"(\"\>", ")"}], ",", "10"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 10], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"E\"\>", ")"}], ",", "11"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 11], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\")\"\>", ")"}], ",", "12"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 12], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T\"\>", ")"}], ",", "13"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 13], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"E'\"\>", ")"}], ",", "14"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 14], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"F\"\>", ")"}], ",", "15"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 15], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T'\"\>", ")"}], ",", "16"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 16], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"id\"\>", ")"}], ",", "17", 
          ",", "\<\"23\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 17], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{"EmptyString", ",", "18"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 18], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"+\"\>", ")"}], ",", "19"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 19], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T\"\>", ")"}], ",", "20"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 20], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"E'\"\>", ")"}], ",", "21"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 21], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"F\"\>", ")"}], ",", "22"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 22], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "(", "\<\"T'\"\>", ")"}], ",", "23"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 23], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "(", "\<\"id\"\>", ")"}], ",", "24", 
          ",", "\<\"1\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 24], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{"EmptyString", ",", "25"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 25], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{"EmptyString", ",", "26"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 26], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{"EmptyString", ",", "27"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 27], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{"EmptyString", ",", "28"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 28]}}],
   Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxTTMoPSmViYGCQAWIQbfN5Je+P9X/sjz//JZGqIeGwY6FlfJ3RO/tzXbdL
I5RFHSA0qwOMzwAFV3X3XPKWE4Kq/2cP48Pkd4LF+Rwg5r6wR+X/QONzOKCr
h4nD1MP4EHuY4Pog9t+zvwYVn7BZ2Fc0icXhGoq6HfYnoObsd5HaU6j7Gs5H
lX+BJv/C3nlaV9brVT/h6oVZW3733WdygPH/ST96suUdN5xvGnByA8vW/3D9
PEmL581+wuoA48PkYeEEk4fxUc1DDwcOeHzAwhsAeJPJdA==
     "]]& ],
  AspectRatio->1.3151918984428583`,
  FrameTicks->None,
  ImageSize->{750., Automatic},
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.757710038292047*^9, 3.757710907530957*^9, {3.7577120867196627`*^9, 
   3.7577121028074093`*^9}, 3.757712237941064*^9, 3.758052509885632*^9},
 CellLabel->
  "(Debug) Out[100]=",ExpressionUUID->"d31588c8-4c72-456c-a544-795cc5d23154"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ast", " ", "=", " ", 
   RowBox[{"Parse", "[", 
    RowBox[{"tokens", ",", "grammar"}], "]"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.757712288753446*^9, 3.757712295372877*^9}},
 CellLabel->
  "(Debug) In[101]:=",ExpressionUUID->"d9e19462-2ed4-4cdd-82fa-98a46a304918"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"depthFirstScan", " ", "=", " ", 
  RowBox[{"First", "[", 
   RowBox[{"Last", "[", "\[IndentingNewLine]", 
    RowBox[{"Reap", "[", "\[IndentingNewLine]", 
     RowBox[{"DepthFirstScan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Graph", "[", "ast", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NonTerm", "[", "\"\<E\>\"", "]"}], ",", "1"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<PostvisitVertex\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Sow", "[", "#", "]"}], "&"}], ")"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
    "\[IndentingNewLine]", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.757712303406907*^9, 3.757712319271488*^9}, {
   3.757712402690097*^9, 3.757712436090761*^9}, {3.757712495451662*^9, 
   3.757712497135003*^9}, {3.757712535617786*^9, 3.757712535792206*^9}, {
   3.758052523270585*^9, 3.758052550159257*^9}, {3.758052734115679*^9, 
   3.758052747866054*^9}, 3.758052780479733*^9, {3.7580533796730623`*^9, 
   3.758053410769062*^9}, {3.758053509413167*^9, 3.7580535287621*^9}, {
   3.758053657413247*^9, 3.758053661751783*^9}, {3.758053722375634*^9, 
   3.7580537338191547`*^9}, 3.7580540929088087`*^9, 3.758054980613995*^9},
 CellLabel->
  "(Debug) In[119]:=",ExpressionUUID->"78da905f-707e-4314-8181-223aaf07b161"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", "6", ",", "\<\"56\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"F\"\>", "]"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"*\"\>", "]"}], ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"(\"\>", "]"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", "17", ",", "\<\"23\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"F\"\>", "]"}], ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"EmptyString", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T'\"\>", "]"}], ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T\"\>", "]"}], ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"+\"\>", "]"}], ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", "24", ",", "\<\"1\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"F\"\>", "]"}], ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"EmptyString", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T'\"\>", "]"}], ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T\"\>", "]"}], ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"EmptyString", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Term", "[", "\<\")\"\>", "]"}], ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"F\"\>", "]"}], ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"EmptyString", ",", "27"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T'\"\>", "]"}], ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T'\"\>", "]"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"T\"\>", "]"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"EmptyString", ",", "28"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.758053411184317*^9, 3.758053514369686*^9, {3.758053647977211*^9, 
   3.758053661961804*^9}, 3.7580537368101482`*^9, 3.7580549813213663`*^9},
 CellLabel->
  "(Debug) Out[119]=",ExpressionUUID->"de6bb23c-4900-48bb-a109-2c987704d878"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"depthFirstScan", ",", 
   RowBox[{"x_", "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NonTerm", "[", "\"\<F\>\"", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\"\<T'\>\"", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\"\<T\>\"", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\"\<E\>\"", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}], ",", "EmptyString"}], 
       "}"}], ",", "x"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7580537587272243`*^9, 3.758053760960915*^9}, {
  3.758053848814808*^9, 3.758053895348702*^9}, {3.7580539334309607`*^9, 
  3.758053945987487*^9}},
 CellLabel->
  "(Debug) In[116]:=",ExpressionUUID->"29b857ec-ce69-4da9-bfb0-0435e3d6724b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\"*\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\"(\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\"+\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\"id\"\>", "]"}], ",", 
   RowBox[{"Term", "[", "\<\")\"\>", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.75805389589156*^9, {3.758053937335103*^9, 3.758053946584972*^9}},
 CellLabel->
  "(Debug) Out[116]=",ExpressionUUID->"b345fbb0-2c60-4059-a341-0ec7f6baa213"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1023},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 125, "Title",ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-6160422fec5d"],
Cell[CellGroupData[{
Cell[765, 29, 159, 3, 89, "Chapter",ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-ceba4ac659e9"],
Cell[CellGroupData[{
Cell[949, 36, 217, 4, 81, "Subchapter",ExpressionUUID->"21a9500e-0fd4-4842-9564-1968489f3e69"],
Cell[1169, 42, 2000, 49, 393, "Input",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0",
 InitializationCell->True],
Cell[3172, 93, 6837, 154, 2075, "Input",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce",
 InitializationCell->True],
Cell[10012, 249, 8247, 178, 2981, "Input",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d",
 InitializationCell->True],
Cell[18262, 429, 16630, 355, 3821, "Input",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8",
 InitializationCell->True],
Cell[34895, 786, 2441, 62, 586, "Input",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef",
 InitializationCell->True],
Cell[37339, 850, 10862, 243, 2981, "Input",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48",
 InitializationCell->True],
Cell[48204, 1095, 5568, 121, 1363, "Input",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288",
 InitializationCell->True],
Cell[53775, 1218, 4797, 108, 1363, "Input",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa",
 InitializationCell->True],
Cell[58575, 1328, 3751, 81, 1121, "Input",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df",
 InitializationCell->True],
Cell[62329, 1411, 20594, 443, 7121, "Input",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[82960, 1859, 169, 3, 60, "Subchapter",ExpressionUUID->"3b519190-0088-4cf5-bc8c-eba64cf01b88"],
Cell[83132, 1864, 2107, 47, 457, "Input",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230",
 InitializationCell->True],
Cell[85242, 1913, 3659, 93, 975, "Input",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26",
 InitializationCell->True],
Cell[88904, 2008, 6289, 135, 1569, "Input",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf",
 InitializationCell->True],
Cell[95196, 2145, 3947, 92, 1363, "Input",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[99180, 2242, 155, 3, 60, "Subchapter",ExpressionUUID->"d07c23e9-1d59-4e51-ac14-31d0660d35e2"],
Cell[99338, 2247, 548, 14, 58, "Input",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8",
 InitializationCell->True],
Cell[99889, 2263, 562, 14, 58, "Input",ExpressionUUID->"dd1a2e4b-3d9f-46b9-b5c8-8985b121e954",
 InitializationCell->True],
Cell[100454, 2279, 14526, 341, 2388, "Input",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[115017, 2625, 156, 3, 60, "Subchapter",ExpressionUUID->"491b6222-dc01-403a-a304-3cbf3275f40d"],
Cell[115176, 2630, 2803, 62, 232, "Input",ExpressionUUID->"28264908-7582-4bf1-ace5-cd2120689b6b",
 InitializationCell->True],
Cell[117982, 2694, 11013, 259, 1267, "Input",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448",
 InitializationCell->True],
Cell[128998, 2955, 8953, 185, 1210, "Input",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138000, 3146, 161, 3, 89, "Chapter",ExpressionUUID->"9764d62a-13d8-4273-861c-c2aab0ea6f24"],
Cell[CellGroupData[{
Cell[138186, 3153, 153, 3, 81, "Subchapter",ExpressionUUID->"bab3d486-94e8-495d-b547-0903f2fcb95e"],
Cell[138342, 3158, 6160, 152, 1481, "Input",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86",
 InitializationCell->True],
Cell[144505, 3312, 2275, 61, 290, "Input",ExpressionUUID->"5f478895-e67f-4842-8936-a7f82f98e1dd",
 InitializationCell->True],
Cell[146783, 3375, 796, 21, 88, "Input",ExpressionUUID->"27ceeb91-84ca-4f8f-b889-0991a3c2b621",
 InitializationCell->True],
Cell[147582, 3398, 653, 13, 347, "Input",ExpressionUUID->"755fc599-1137-4d38-b150-c3b15f38e174",
 InitializationCell->True],
Cell[148238, 3413, 542, 11, 38, "Input",ExpressionUUID->"3a4b5cb8-85ab-443d-8f69-d704df1dd23a"],
Cell[CellGroupData[{
Cell[148805, 3428, 224, 4, 39, "Input",ExpressionUUID->"a3da1426-9fa3-4da2-8d95-09fc4f17fd8d"],
Cell[149032, 3434, 50634, 986, 705, "Output",ExpressionUUID->"44c5155c-f78c-419f-bef9-7a25b9931815"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[199715, 4426, 157, 3, 81, "Subchapter",ExpressionUUID->"eaca36e0-bc36-4820-9969-a42cd00fd781"],
Cell[199875, 4431, 43550, 719, 434, "Input",ExpressionUUID->"149dc345-7f1a-4ff6-bc22-f3a417052e81"],
Cell[243428, 5152, 48048, 793, 470, "Input",ExpressionUUID->"4b33cae6-5740-4d9f-ad8e-7d83116b3730"],
Cell[291479, 5947, 3708, 92, 243, "Input",ExpressionUUID->"2acc6ca5-763c-47d1-84db-b9bd9d839b1a"],
Cell[CellGroupData[{
Cell[295212, 6043, 248, 6, 39, "Input",ExpressionUUID->"81e6ce23-a996-4ea6-b3c8-e42aa594bd86"],
Cell[295463, 6051, 8756, 224, 1254, "Output",ExpressionUUID->"d31588c8-4c72-456c-a544-795cc5d23154"]
}, Open  ]],
Cell[304234, 6278, 310, 7, 88, "Input",ExpressionUUID->"d9e19462-2ed4-4cdd-82fa-98a46a304918"],
Cell[CellGroupData[{
Cell[304569, 6289, 1448, 28, 652, "Input",ExpressionUUID->"78da905f-707e-4314-8181-223aaf07b161"],
Cell[306020, 6319, 3128, 90, 292, "Output",ExpressionUUID->"de6bb23c-4900-48bb-a109-2c987704d878"]
}, Open  ]],
Cell[CellGroupData[{
Cell[309185, 6414, 802, 18, 95, "Input",ExpressionUUID->"29b857ec-ce69-4da9-bfb0-0435e3d6724b"],
Cell[309990, 6434, 587, 13, 161, "Output",ExpressionUUID->"b345fbb0-2c60-4059-a341-0ec7f6baa213"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

