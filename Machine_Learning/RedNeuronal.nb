(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    180278,       3527]
NotebookOptionsPosition[    177728,       3447]
NotebookOutlinePosition[    178063,       3462]
CellTagsIndexPosition[    178020,       3459]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Red neuronal artificial", "Title",
 CellChangeTimes->{{3.6599193963849*^9, 3.6599194044085608`*^9}}],

Cell[CellGroupData[{

Cell["Introducci\[OAcute]n", "Chapter",
 CellChangeTimes->{{3.6599194103045053`*^9, 3.659919413016464*^9}}],

Cell[TextData[{
 "Una red neuronal artificial es un modelo de ajuste basado en el sistema \
nervioso donde la entrada es un vector ",
 StyleBox["x",
  FontWeight->"Bold"],
 " \[Element] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "N"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", y se desea mapear a f(",
 StyleBox["x",
  FontWeight->"Bold"],
 ") \[Element] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "M"], TraditionalForm]]],
 ", donde N y M son enteros arbitrariamente grandes. ",
 StyleBox["x",
  FontWeight->"Bold"],
 " es el est\[IAcute]mulo de entrada que recibe la red, y f(",
 StyleBox["x",
  FontWeight->"Bold"],
 ") es el est\[IAcute]mulo de salida. Este modelo est\[AAcute] basado en una \
estructura de capas, donde el est\[IAcute]mulo se recibe en la capa de \
entrada, y el resultado se obtiene en la capa de salida. Cada neurona est\
\[AAcute] interconectada con las dem\[AAcute]s de la siguiente capa. \n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQl8VNeZJS68pJ1Jd+L+z0w63Zmk/e+ennZ3phNP93TiNsaQjhfsuN3E
S4wdE+MNDMQgA2YH2ZgdWQjQLrSABNr3vbSvJZXQviEhJIEAsYhVBGwD0pz7
TtXVU20q7RJ+51cUr0rvvXrv3XvP/e53v3u+///dZS8vuM/JyWnFQ3h7+Z3V
v1y+/J21rzyAD/++duUH796Pjf82zcnpCv6J7T4NGjRo0KBBgwYNGjRo0KBB
gwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBB
gwYNGjRo0KBBgwYNGjRo0KBBg4bRRb2/Uz/86yf6cjRo0DAmmIiWrvzmct2F
cfmxbzYu6JbLcu3tvZDhjE/L0s/dUePu3bu9vb0TfaUaNGgYPiaqpUsy71Vw
1wR+HN3f+mZDedL+9XzIKM2vv/761q1bf1QBH/GlRukTNX7RDBsNo4EJa+mm
CtyLM9++ffsrE7CNb77RlDK6UB60X32vLNwbN25cuXLl8uXLl4CWmMX99LUU
nbh48sYOXqf8N5BnLpi+c7rX+GcCxy+aYaNhFDDeLd1k+izX6cSWM84JAr95
s2K/PM6rAt9ofD5aYJn41d5F+aJrvnr16sWLF8+ePXv69OnOzqxd+JtrHr65
erXUUxRy8ll03OfSlzlJKqvx7Wc1Zdu35s4ds+/vAXfNRI5fNMNGw8gxvi39
nGLt+IkG01vvp5wkufPW9etl7thcGNnQ1XWuIVJ0H/vL0HBYk6cyP0wKsIhR
LDdv3kQ33dXV1dHR0dLS0qzg+PHjHR2VYR/IrnSvoafnRkfiR9j0KEfPjlpR
7oEPHyV29BA3bnQkfST39zx6b7hrJmD8YtWwqfKSx+03oMg0w0aDgxjXlt6Z
vBTf+dTQ/KjyFgfGHr/cleeKrflBpceOHcNP63aILqTk8uXr16+TH1ifpx4/
TBIonOFd9RWe57lz59ra2hobG2sVNDQkblHK6YPD1WfO5IhicPqi4Pz5842R
C5V+HPUBhzRELDB9yvtC2X9hVFN3d5Hogp32FF4QwEHo9EF9qAPsiFFeE33n
Q8C4j1/O65yd6NRRGTaVYny6KKbh3LmuhghRBO7FKDVp2GhNQIM9jGdLPx67
BPSddAodB9pLewI+LQqrPV0WPN/JHPNDq07ijN3d3eQHHEKTT6vMQ0e94BOv
ShiYJ0+eRPlWVlYePXq0pqamKWkz/rIz69SZM2dOn87ZiQ/vhZafONHCItmc
1NTUhB42+XN2ts3NyaJGbE093tra2taWvh0f3j1oOH68RQG+xPlR1mBC8M/U
KqzxHr+cTV3WT/h3jIZNrLtSApX4RTx55WFvzz17FgXHLlKzajTYxTi29KpQ
GhuXFRS4iTMG6o9VRm3E1qu747KysnJycoqLi8vLy9GboEqfOHECV4UuA+0L
rQB8PrXsvUkCmpBuBefxPKur8/a/gU9v+ObVsMjYE1cfJlV9GllRUZax/3Wx
/bpbUkFRUchqsemeWlJSemSd+Hp9BAooy/NNZf/1YWVlegUsNfwEygu2AZhn
KhXWOI9flI5gaeoZZcLoZkeiMGx27ervLUyYh5bFJqBZNRoGxTi29HylG9iZ
c+YMhq7blbrqoSvPzw8WI845nx+Kj09I2C9cMa/uTMzPLy0tRc9SX1+PloVr
mIr23iQBHtoNxXA0Yc0RvR79NQzOnF3yy+1+fvNQ9F8k5GVG75wjTMXNn73E
P33knZKSlpaWmZkZsELuv2LXrldRVNsjM9IVZGdnoyMG+8GmBfOwsCb61h3H
+I5fGjk3BAO/BxW7kIZN4OdsTHiSOp0Otk1BQYHBYMAjxYGaVaNhUIxnS6+q
iv7cuMMWFxfRa7jG5eKv4PCF8tAXNgTHxCQlJaE+5+fnl5WV1dXVgR9g0mA8
e/v2bY3MhwpRxDduoEMEJ4CgSkpK9KYiPn36NL7v7OzEOKiiogIPPDU1NS74
0xeEJbozJCQkNDT0yJEjkZGRsbGxiYmJycnJKJpEBQkJCXFxcfg+JiYmOjo6
Pj4edQDlhV+BCQrOmVJkPs7jl3LFkHcv6u6GJb/DaNhEfIL/X94ekpAQG+u+
WLFwonS6wsJCHKVZNRoGxXi2dJy8uroa1RL1GfUThkdGRgYOwW7h4eE44cGD
Bw8dOnT48GGcE2cAz+fl5WFPXMDZs2dRjafY4H1yAEUMagXBKjRVXaYARYyn
il7y1KlT7e3tDQ0NGArBGkTZRQVsnC3MzK0BCoKDg1E0KCAUU5yCGAUoVhRT
uAn4BtUDXTbMVNiQqFRTi8zHefwCo323cZ8dn30mDRvfJf1WzTp/5Znjqebm
5mpWjYZBMZ4tHeyNTgE1mT8EokblxzlJ5uBwMDn5nCdMSUlB5ceeGMlikIsx
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
JQXnVygcKkEbBRlfDwj3VfbyeOxg+63kXUUTpdglJPPZfrpDH6IdXhegIKxg
vF115mCLOOr42cus3KB8ipB/FyUonbNy8Bat12+SyRHO3fjiKzHPiz0Br1qt
1uzsbAxV+IKgggWbQ+757WKfsQvueWrZxtBMJ43bEgSf70koYgLnnt8t12TV
x/o+//Fe6hWwv8mgSIPhDLEi5zq7z2zCXpVk6/iS/zS8NMAQkl7FqWScx4Ka
Jrltlvc7OM61tbWi2QpDM10j8/PzEfMoDQQFp7g9INxXqa/loYOt/UKfYWrB
IIX7fdBsykp90YubI9PTEeogMscFgjsCEBEoyEjmzhxs6bbwwBt+CwLSSutP
U9qCYSpLUJxaOXR7fhhMTrEO/EuHI94s0JoQ1IoBEYNUvg48ASGk51gembqD
tegTfENOnG4WYryO4wu2OWlFFAfcR2cGVtc37I7KHP74Jz5jFjw7exfOTnl5
OW7zKysrwSpUjQbziBQZJ7K7adgSJaYp5zW6O5c0g+c1qeVWi2mG/Ry7kAPt
8qf3CBASdNg2y9pONlvRI5I2ZAjUccxZlIhfmgrLFQy4PSDcV1tbvWn/FD1D
MxLP6vN0BZv49ys7Mul+Tr9LhD00WKFbVtul4czBFvfCsmrWv/5p/bQNcYn5
tZzE7IqVg+cAFQgmB6szP8YcPpX52SJK3RV8tTo7EOb57oxjDpxu0U5DdESJ
97+2lXOdWw4X4LBgpAO37DyU+t1HFwx7eO7vpm/CicNxw2kCpdfrsjCc6xR1
490XLopROalZ0xJpintf/3NabOO1xhh6E0+LabSL9suTEf0zUV936qI4vH4x
RYbUiuNUssE4jKWeNHNUYbmCI3ozMm/oivuqVw62F1JmOrbzvxGcV1sLFsJ9
q8lkApnn5ORQuI8KIbbL37WDLbg0Mrv2teWRP3xujWD1e3634tVlhyMyqz+7
8UWPxoT49CfmBvPevLGl1SBnynAOx5bNQadOnRIOiay3wfIEs+WB121NrI4h
+vLgbL6EkaL25AUOEwz4MTRs3Bv9t+Pm3v3QzKemrsEBxOnDScRm8RHC0qLb
KdSgEsBifqc5QFYK0ZKv+/I83QmwN4MB8DnbZlm44moqmQqcLGGlg5hscdLf
vp1Cf0Bv5szPdsV91RsHW50EKvwkIn8rrAafi2AVH4EhI0kHnmA3sLxdQYtb
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
PFz3F3Q7qJDjeYe+04Gy1/ZWQUGhN+HGbAJhbYNuAFetA084g9asg1Ik7EWq
qTvy/Lwg8swj03bmWMoYeFPkMN9Ssmp39JPvb/rbsR9olTAPzbj7oRk/etb3
zU/3R6YXCS0X91wq96QjyGQLjFBrXB6YKMaRTWFZ2Cbo68y5S//6p/Vcbnj8
24sbqFSDjbC3iPvgcgc6nAfp4RmQlsvX3XfoC/FDg9iX6tBXUBgM8NA2iA6b
rEymtiQgepEScip+/NJG5jrmbImhVm1VVRXieQTzBQUF2dnZmZmZZh0rd4a9
MGfbD5+cz77OoWPmj3hq6WvLIsIzKj0Rb5QrqA0hOkYQjCMiRK85duqlJYek
bE/7xzjfyKRsZooadNtuCgXclt20CcTe7OcSj5EjNVYXD7aMiQf+bG/A3XV4
3qEvl5GrDn0FhcGDTtgGfaVDdJgu2ZvBmoqfvLwp3VLDknW8hcrteXl5IPDk
5GS646WkpIDVQe/g+aiUvD8vDfnJS+uHjF3EbiDhdnfp6mduWN0QorOU2mmI
LofiPmMXSo9FPuN8X1sUiH2jhShiWgS34MZ2crVlZVoRKSl6xIgOegfYNUBh
ZAbqJlPXTxBG25lbk9x06BtSK5zrVB36CgqDCp22DeLbmy9d++2c/eSZKWti
Ll3RNGlJraAUknlubm5GRgbJnGUwOTk5FosF/MmQGBs3W6ocxRvdu93JipGG
EB2EJofo4vFfr2/53Qc7v/vogqG4HRg732fsgn95bnl0dLTJZMIu4T7i9OnT
2P82N236j5DG8dxzgNUpv4YH6N21AluH8KRD35BaYYe+KiNXUBg86KJtkMly
jDf++Dex8OhtycOONnzCU4keHPhXWKqVl5eDPGtra/kRQryxrOaYU/FGV253
TkN0poaemh04xCFPHhChlccv3rT/1++s/bvHFviMWbB2+56IiAiMMlarFftM
c5Dbn31m8+ympHzn2nLB/+wLe/DBzs2Q7jGV8Qh72KGPM6U69BUUBhu6Yhsk
S/MZ+jrZP85ScObMS3RQaAX0LooYhcOdbNAjWJ3ijRMXh8rijXS7SytuuC25
3clWdILltoSZHZlcSwS9uA43CJGRkQcPHtyzZ897vpvnr9oeEhISFxcHksfg
gvdev3jx1rhx31DxzM+vS0e5oMCWdbn3Xq/aClqv3xSds44d+rL4oaFDH2dK
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
+g69GZk36IXZtbW1CL/z8vJSUlIQJyMsB5OD1ePj48G9JSUlWKdF9uWku5Cv
r4ffCMwMfj6rkzkYG7zNVLlJB58nJSU5IXMK4XpcBqmgoKDQf9CbOXOgqakJ
gwVib73OJCc5ORnUilAZUbrZbEbEDqo/deoUbhPadpGl5h73DWF4wo1Gs54z
z83NFWl52RcVT/ASVmiXZmHC3MXsp4KCgkJ/Rm9Ws1zRnZXOnTsHuj5y5Aji
8/z8fLqXFhQUlJeX05n04sWLGFnadvHmTZvzcplHoi74Ovgi5/RqFovFggg8
XUeWDvEcL2EFrGabAMW9AHMsDubOCgoKCgMCooKalkM3ddzoGXz++ecganbE
NzQ0IA4XLmwnT54EtbIuEbvRbhfp/vngg558HXwXfMpFvc4cA4TVas3XYdUh
nuMlrIDVbKWJ7P0cP75HDrGCgoJCb0F2Heo58C4A/Hn16tULFy6A0s+cOdPc
3Hz+/HlB40a9lG+l4NwD7cTbdvtObPzo0aMYKejFXKNDPMdLWAGrYeU2g1HP
gn8FBQUFBZGlZ1YHrI5YnbakpHHn3Tfs6x8xosM0iBBR4ZRuU1PTKR1NOsRz
vIQVsJo2UlBlt4cMRhUUFBTuRDCrwxCd/tRCj6WDJsrx420zoW5LB7l9luhg
sHCVvaduAFazKSXee6+qSFRQUFDwCoaUjqe98CBbMDm7+93Km4tZXU4BMF0v
zwUINRVb//7w4SrBoqCgoNB7qKvTMi1s8Jdr0R0gBovbLqANB4zJXQiYKygo
KCj0IBBCsyd05MjO9903Ntry5IjJFZMrKCgo9AlaW20iKiwm9CpDgnieVYjM
k6vsioKCgkLfwtfX1uaDx8SJWoDtfgYzKkpTBhBvmTxZzXgqKCgo9AvIYTYf
iNhB8njs2aPRO58/8UQbh3cimFdQUFBQ6AU0NmotoiLx4uoxapRG7HV1fb27
CgoKCgpu0dqqTYmC2EHakydruRc8WbFCW6gUVxQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ6wv8Him7oyA==
     "], {{0, 276}, {
     495, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSizeRaw->{495, 276},
   PlotRange->{{0, 495}, {0, 276}}]], "Input"],
 "\nLa ",
 StyleBox["fuerza",
  FontSlant->"Italic"],
 " de la conexi\[OAcute]n entre neuronas est\[AAcute] dada por el ",
 StyleBox["peso w",
  FontSlant->"Italic"],
 " de la conexi\[OAcute]n y el ",
 StyleBox["bias b.",
  FontSlant->"Italic"],
 " De manera que el resultado de una neurona al procesar la se\[NTilde]al es ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Sum]", "i"], " ", 
      RowBox[{
       SubscriptBox["w", "ij"], " ", 
       SubscriptBox["x", "i"]}]}], " ", "+", " ", 
     SubscriptBox["b", "i"]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", donde ",
 StyleBox["f",
  FontSlant->"Italic"],
 " es una funci\[OAcute]n de activaci\[OAcute]n, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "ij"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " es el peso de la conexi\[OAcute]n de la neurona ",
 StyleBox["i",
  FontSlant->"Italic"],
 " con la neurona ",
 StyleBox["j,",
  FontSlant->"Italic"],
 " donde ",
 StyleBox["i",
  FontSlant->"Italic"],
 " y ",
 StyleBox["j",
  FontSlant->"Italic"],
 " est\[AAcute]n en diferentes capas, y ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " es el ",
 StyleBox["bias",
  FontSlant->"Italic"],
 " de la neurona ",
 StyleBox["i",
  FontSlant->"Italic"],
 ". Una manera de realizar el conteo de todas las capas que existen en la red \
neuronal es agregando un tercer \[IAcute]ndice ",
 StyleBox["k,",
  FontSlant->"Italic"],
 " que indique entre qu\[EAcute] capas est\[AAcute],  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Sum]", "i"], " ", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["w", "ij"], "k"], " ", 
       SuperscriptBox[
        SubscriptBox["x", "i"], "k"]}]}], " ", "+", " ", 
     SuperscriptBox[
      SubscriptBox["b", "i"], "k"]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ".\nUn tipo muy usado de neuronas artficiciales es la neurona sigmoide, \
donde la se\[NTilde]al de salida de una neurona en funci\[OAcute]n de su \
entrada se calcula a trav\[EAcute]s de la funci\[OAcute]n sigmoide.\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
AAAAgHHwHy6PWME=
     "], {{0, 138}, {280, 0}}, {0, 255},
     ColorFunction->GrayLevel],
    BoxForm`ImageTag["Byte", ColorSpace -> "Grayscale", Interleaving -> True],
    
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSizeRaw->{280, 138},
   PlotRange->{{0, 280}, {0, 138}}]], "Input"],
 "\nLa funci\[OAcute]n sigmoide tiene la particularidad de que devuelve \
siempre un valor entre 0 y 1."
}], "Text",
 CellChangeTimes->{{3.659919421391006*^9, 3.659919685149439*^9}, {
  3.659919743156139*^9, 3.659919892162366*^9}, {3.659919997825447*^9, 
  3.65992013844009*^9}, {3.65992090687052*^9, 3.6599209442703114`*^9}, {
  3.659920978917962*^9, 3.659921197716276*^9}, {3.65992240325947*^9, 
  3.6599224089524803`*^9}, {3.659922489624625*^9, 3.659922585855557*^9}, {
  3.659922646912006*^9, 3.659922650294767*^9}, {3.659922681766717*^9, 
  3.6599227069578533`*^9}, {3.6599228086534224`*^9, 3.659922809613098*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"LogisticSigmoid", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", " ", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<\[Sigma](x)\>\""}], "}"}]}], ",", 
   RowBox[{"PlotTheme", "->", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.659920142227826*^9, 3.659920179611471*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], CapForm[
    "Butt"], LineBox[CompressedData["
1:eJwt1H0w1HkcB/Alj6v2N3dCzW1HqEMxJi1Lms/3SkV5bk+ytdg6RCoVV6qz
Lpq60ZXdEtamWvLM5raczfb7YYpKrbFatnAieVi7vxwRPd3ezP3xnve85v3/
eyX3cPjPhhQKJUif/9oNrCe+fsUI0ZHnIQuJfGAl/nB+fgEjvLbIqVFpfEi/
ylw9/R4jVrs0VBKZfGjTRHHfajBibexQxa18PsTkF7/s6NHv2S7Wskd8yJ1y
elpQhxH0TKanj6MAZsQbqj2iMSKZdiWr6I0AZGaxh+If0IiRG4EuvaeuQsYz
laY5dgmhnZr1QtEFMF663MaLvpiQqMIMdCIRuPztb471U4lv6mbtWpg3ocRS
PKP+zZx40dmXWuBXAq3sJxdxMCNSzrjnpfHLgF5Mt8t/bUK4B/muuCurgh2b
2SeVF4yJi/ke28d8JWD7MY7nHGBEDL1zDWh/XA+utSLeUa0hESVRVByduwuD
x2+6qcoNiBvm3Zb5exvhQFGuuCiRQjAFps+0jnKI/HW3Q7X9F7x3uNZk2QgB
ThpnNuv6R1zxuOHBtYhWSAoOzR4a/oBf4fe7FwY/gqhjIRs9PWdxXRLL4NCl
xyDAx0Lxe9N4JGeexR3tADDsjXAzmMKvRbTdMjvcCYm9LUdKpydxh/OUjJeH
u8C3IHOZ7MQoftzn3kBqazck9E+92m0zhCf7WvTYuPdAyODamnbHl3h8/KJk
yUU1eOLCnoms57h0tiTmk0cfeL/bu29gnxSX+Td66xoHYM1Zkkqk/gmVz0K7
CoWDUNemq8iIVICEd8KZOv0a5AFPmD4tahgfGFnFch0GTeWtA8GRQ5AV1dU8
lfYGRDVuwpm7o3DdvsCwumoEmmLPWbk3TIIRNe5y2f23kL604EXIt1MgXNj1
apFiFDo6u/26Cqfhe67RquimMUh56rX6kvUsrInLyaLwx6FE4WcV1/4Byu67
jSbtn4Cc6oZy08CPUDiqaLWx0oCBoDug1fgLzAgZLVaEBmwqqtpK/CkIdkyK
84ImQVXGczA+b4DCbBO0me2TwK5yOXd0yBAZpu2nF23Ugq/QdMPDVUao4t02
x6UiLQxfapx1zDJGStX7CbM5LUgdMjQr+0zQl626HsZmHQyKf1lntMIMGX1m
nq7n6aDLaQtv+oQ5UqY7266X6cC2cItdu5yKEvJiOOwxHeRV7p73/mSBQtWn
m1MwEpT4JvVfPy1BVjfr97zyICGpmWOxIp+GfL7WFc+EksAtVuc1iWjofT1j
8GAYCVFnWPZ7xDQ0z5pQvNHb33u7t7CWhqxr6+TKcBIc7zDilz+koWBGSG8N
i4S+G4tbrf6hoSBmiefOSBICebJ0WiCGIh9J5/ZFk7CZwzCpDcPQk7PhvC69
fXwluUG7MCQ9FfsAxZDg9KG0PIeLoVyVgE2PJcHoSK6KehJDgWsu2HZySZBH
J6wzvY2hY7Vhc85xJEg3DstvV2FooIOjFehd/R0nYOsdDEnYSuFnvQt7dsZk
N2Ho9u/V9p3xJKSFwB+LlBgyPejan3KAhGRX2XJxL4aYS7KFar33WzBKNw1g
yE0ltfwxkYTwNpemzHEM1azfuQ5LIiGgtHTbShJDlnfo6lS90Vk7JTGDoaUO
x3369PaKFXJiFjB0WXYuYtNBEv7/L5Sek+larve/c+dd5A==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"\[Sigma](x)\"", TraditionalForm], None}, {
     FormBox["\"x\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-4, 4}, {0., 0.982013787154201}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.659920132383233*^9, 3.659920179878311*^9}}]
}, Open  ]],

Cell[TextData[{
 "La activaci\[OAcute]n de la neurona est\[AAcute] dada por\n\[Sigma](z) = ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"1", "+", 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SubscriptBox["\[Sum]", "j"], 
         RowBox[{
          SubscriptBox["w", "ji"], 
          SubscriptBox["x", "j"]}]}]}], "-", "b"}], ")"}]}]], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". \n\nPor la estructura matem\[AAcute]tica de este modelo conviene \
representar todo en forma matricial, de manera que la notaci\[OAcute]n se \
reduce a\n\[Sigma](z) = \[Sigma](w\[CenterDot]x + b).\n\nLa \
propagaci\[OAcute]n hacia delante (",
 StyleBox["feedforward",
  FontSlant->"Italic"],
 ") consiste entonces en aplicar sucesivamente esta funci\[OAcute]n,\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", "1"], "\[CenterDot]", 
       SuperscriptBox["x", "1"]}], "+", 
      SuperscriptBox["b", "1"]}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ",\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", "2"], "\[CenterDot]", 
       SuperscriptBox["x", "2"]}], "+", 
      SuperscriptBox["b", "2"]}], ")"}]}], TraditionalForm]]],
 ",\n\[VerticalEllipsis]\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "N"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", 
        RowBox[{"N", "-", "1"}]], "\[CenterDot]", 
       SuperscriptBox["x", 
        RowBox[{"N", "-", "1"}]]}], "+", 
      SuperscriptBox["b", 
       RowBox[{"N", "-", "1"}]]}], ")"}]}], TraditionalForm]]],
 ".\n\nLa red neuronal trabaja propagando hacia delante la se\[NTilde]al \
inicial mediante la funci\[OAcute]n de activaci\[OAcute]n hasta que se llega \
a la capa de salida. Si se inicia con una matriz de pesos y bias aleatorios \
la red neuronal inicialmente no producir\[AAcute] los resultados deseados. La \
manera en la que podemos determinar qu\[EAcute] tan lejos estamos de los \
resultados es mediante una funci\[OAcute]n de costo\nC(w, b) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "n"}]], 
    RowBox[{
     UnderscriptBox["\[Sum]", "x"], 
     SuperscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{
        RowBox[{"y", "(", "x", ")"}], "-", "a"}], "\[RightBracketingBar]"}], 
      "2"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", \n\ndonde w y b son los pesos y los biases.\nCon esto se puede conocer cu\
\[AAcute]nto se deben cambiar w y b para que el costo sea menor, es decir, \
estar m\[AAcute]s cerca del resultado correcto.\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["w", "k"], "\[Rule]", " ", 
      SubscriptBox[
       RowBox[{"w", "'"}], "k"]}], "=", " ", 
     RowBox[{
      SubscriptBox["w", "k"], "-", " ", 
      RowBox[{"\[Eta]", " ", 
       FractionBox[
        RowBox[{"\[PartialD]", "C"}], 
        RowBox[{"\[PartialD]", " ", 
         SubscriptBox["w", "k"]}]]}]}]}], ","}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["b", "l"], "\[Rule]", " ", 
     SubscriptBox[
      RowBox[{"b", "'"}], "l"]}], "=", " ", 
    RowBox[{
     SubscriptBox["b", "l"], "-", " ", 
     RowBox[{"\[Eta]", " ", 
      FractionBox[
       RowBox[{"\[PartialD]", "C"}], 
       RowBox[{"\[PartialD]", " ", 
        SubscriptBox["b", "l"]}]]}]}]}], TraditionalForm]]],
 ".\n\nAl aplicar sucesivamente este procedimiento se espera llegar a un \
resultado cada vez m\[AAcute]s cercano al correcto. El algoritmo para \
calcular las derivadas parciales ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "C"}], 
    RowBox[{"\[PartialD]", " ", 
     SubscriptBox["w", "k"]}]], TraditionalForm]]],
 " y  ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "C"}], 
    RowBox[{"\[PartialD]", " ", 
     SubscriptBox["b", "l"]}]], TraditionalForm]]],
 " secomoce como el algoritmo de retropropagaci\[OAcute]n. Este consiste en:"
}], "Text",
 CellChangeTimes->{{3.659920463462933*^9, 3.659920513591063*^9}, {
  3.6599212111867456`*^9, 3.659921324689685*^9}, {3.6599213885932703`*^9, 
  3.659921626510948*^9}, {3.659921739014242*^9, 3.6599219418752003`*^9}, {
  3.659922824005316*^9, 3.6599229385405407`*^9}, {3.659923721650215*^9, 
  3.65992382718782*^9}, {3.659923884979227*^9, 3.65992388920325*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Entrada: Establecer la activaci\[OAcute]n ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["a", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " correspondiente para la capa de entrada."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659923874826771*^9}}],

Cell[TextData[{
 "Feedforward: Para cada l = 2,3,\[Ellipsis],L se calcula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["z", "l"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SuperscriptBox["w", "l"], " ", 
      SuperscriptBox["a", 
       RowBox[{"l", "-", "1"}]]}], "+", 
     SuperscriptBox["b", "l"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " y ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", "l"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     SuperscriptBox["z", "l"], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659923974675457*^9}}],

Cell[TextData[{
 "Error de salida ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Delta]", "L"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ": Se calcula el vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Delta]", "L"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[Del]", "a"], "C"}], " ", "\[CircleDot]", " ", 
      RowBox[{"\[Sigma]", "'"}]}], 
     RowBox[{"(", 
      SuperscriptBox["z", "L"], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.659924078130061*^9}}],

Cell[TextData[{
 "Retropropagar el error: Para cada l=L-1, L-2,\[Ellipsis],2 calcular ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Delta]", "l"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["w", 
           RowBox[{"l", "+", "1"}]], ")"}], "T"], 
        SuperscriptBox["\[Delta]", 
         RowBox[{"l", "+", "1"}]]}], ")"}], "\[CircleDot]", 
      RowBox[{"\[Sigma]", "'"}]}], 
     RowBox[{"(", 
      SuperscriptBox["z", "l"], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.659924164761177*^9}}],

Cell[TextData[{
 "Resultado: La derivada parcial de la funci\[OAcute]n de costo es ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "C"}], 
     RowBox[{"\[PartialD]", " ", 
      SubscriptBox[
       SuperscriptBox["w", "l"], "jk"]}]], " ", "=", " ", 
    RowBox[{
     SubsuperscriptBox["a", "k", 
      RowBox[{"l", "-", "1"}]], 
     SubsuperscriptBox["\[Delta]", "j", "l"]}]}], TraditionalForm]]],
 " y ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "C"}], 
     RowBox[{"\[PartialD]", " ", 
      SubsuperscriptBox["b", "j", "l"]}]], " ", "=", " ", 
    SubsuperscriptBox["\[Delta]", "j", "l"]}], TraditionalForm]]],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.6599242796130037`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementaci\[OAcute]n", "Chapter",
 CellChangeTimes->{{3.659919417216414*^9, 3.65991941912045*^9}}],

Cell["\<\
Esta implementaci\[OAcute]n se basa en la que se ofrece en el libro: \
http://neuralnetworksanddeeplearning.com.\
\>", "Text",
 CellChangeTimes->{{3.659925355568756*^9, 3.659925396488452*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Se", " ", "inician", " ", "las", " ", "matrices", " ", "con", " ", 
    "valores", " ", 
    RowBox[{"aleatorios", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Initialize", "[", "asizes_", "]"}], " ", ":=", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"layers", " ", "=", " ", 
        RowBox[{"Length", "[", "asizes", "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"sizes", " ", "=", " ", "asizes"}], ";", "\[IndentingNewLine]", 
       RowBox[{"bshape", " ", "=", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Length", "[", "sizes", "]"}], "-", "1"}], "}"}]}], 
            "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"wshape", " ", "=", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{";;", 
              RowBox[{"-", "2"}]}], "]"}], "]"}]}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"biases", " ", "=", "  ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"weights", " ", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";"}], 
      "\[IndentingNewLine]", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Cost", "[", 
      RowBox[{"y_", ",", "a_"}], "]"}], ":=", " ", 
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"y", "-", "a"}], ")"}], "2"]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CostPrime", "[", 
      RowBox[{"y_", ",", "a_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"Cost", "[", 
         RowBox[{"yt", ",", "at"}], "]"}], ",", "at"}], "]"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"yt", "\[Rule]", "y"}], ",", 
        RowBox[{"at", "\[Rule]", "a"}]}], "}"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Sigmoid", "[", "x_", "]"}], ":=", 
     RowBox[{"LogisticSigmoid", "[", "x", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SigmoidPrime", "[", "x_", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"LogisticSigmoid", "[", "xt", "]"}], ",", "xt"}], "]"}], " ", 
      "/.", " ", 
      RowBox[{"xt", " ", "\[Rule]", " ", "x"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Para", " ", "formatear", " ", "el", " ", "vector", " ", "de", " ", 
     "entrada", " ", "al", " ", "estilo", " ", "de", " ", "matriz", " ", "de",
      " ", 
     RowBox[{"Mathematica", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FormatA", "[", "array_", "]"}], " ", ":=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", "i", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "array"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"FeedForward", "[", "alist_", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bwlength", ",", " ", "a", ",", "w", ",", " ", "b"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"bwlength", " ", "=", " ", 
         RowBox[{"Length", "[", "weights", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"a", " ", "=", " ", "alist"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"w", " ", "=", " ", 
            RowBox[{"weights", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"biases", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"LogisticSigmoid", "[", 
             RowBox[{
              RowBox[{"w", ".", "a"}], " ", "+", " ", "b"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "bwlength"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "a", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Backprop", "[", 
      RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "nablaB", ",", " ", "nablaW", ",", " ", "activation", ",", 
         "activations", ",", "z", ",", "zs", ",", "bwlength", ",", "w", ",", 
         "b", ",", "delta"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nablaB", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nablaW", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"activation", " ", "=", 
         RowBox[{"FormatA", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"activations", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"FormatA", "[", "x", "]"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"zs", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bwlength", " ", "=", " ", 
         RowBox[{"Length", "[", "weights", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Calcula", " ", "todos", " ", "los", " ", 
          RowBox[{"feedforwards", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"w", " ", "=", " ", 
            RowBox[{"weights", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"biases", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"z", " ", "=", " ", 
            RowBox[{
             RowBox[{"w", ".", "activation"}], " ", "+", " ", "b"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"activation", " ", "=", 
            RowBox[{"Sigmoid", "[", "z", "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"AppendTo", "[", 
            RowBox[{"zs", ",", "z"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"activations", ",", " ", "activation"}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "bwlength"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Calcula", " ", "los", " ", "errores", " ", "de", " ", "salida", " ",
           "y", " ", 
          RowBox[{"retropropaga", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"delta", " ", "=", " ", 
         RowBox[{
          RowBox[{"CostPrime", "[", 
           RowBox[{"y", ",", 
            RowBox[{"activations", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], " ", "*", " ", 
          RowBox[{"SigmoidPrime", "[", 
           RowBox[{"zs", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"nablaB", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], " ", "=", " ", "delta"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"nablaW", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], " ", "=", " ", 
         RowBox[{"delta", ".", 
          RowBox[{"Transpose", "[", 
           RowBox[{"activations", "[", 
            RowBox[{"[", 
             RowBox[{"-", "2"}], "]"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"z", " ", "=", " ", 
            RowBox[{"zs", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"delta", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"weights", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"-", "l"}], "+", "1"}], "]"}], "]"}], "]"}], ".", 
              "delta"}], " ", "*", " ", 
             RowBox[{"SigmoidPrime", "[", "z", "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nablaB", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}], " ", "=", " ", "delta"}], ";",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nablaW", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}], " ", "=", " ", 
            RowBox[{"delta", ".", 
             RowBox[{"Transpose", "[", 
              RowBox[{"activations", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"-", "l"}], "-", "1"}], "]"}], "]"}], "]"}]}]}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"l", ",", "2", ",", 
            RowBox[{"layers", "-", "1"}]}], "}"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"nablaB", ",", "nablaW"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Calcula", " ", "los", " ", "valores", " ", "de", " ", "las", " ", 
     "derivadas", " ", "parciales", " ", "del", " ", "costo", " ", "y", " ", 
     "con", " ", "esto", " ", "actualiza", " ", "los", " ", "pesos", " ", "y",
      " ", 
     RowBox[{"biases", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"UpdateMiniBatch", "[", 
      RowBox[{"minibatch_", ",", "eta_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "nablaB", ",", " ", "nablaW", ",", "deltaNablaB", ",", "deltaNablaW", 
         ",", "x", ",", "y"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nablaB", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nablaW", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", " ", "=", " ", 
            RowBox[{"mb", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"mb", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"deltaNablaB", ",", " ", "deltaNablaW"}], "}"}], " ", 
            "=", " ", 
            RowBox[{"Backprop", "[", 
             RowBox[{"x", ",", "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"nablaB", " ", "+=", " ", "deltaNablaB"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"nablaW", " ", "+=", " ", "deltaNablaW"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"mb", ",", "minibatch"}], "}"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"weights", " ", "-=", " ", 
         RowBox[{
          FractionBox["eta", 
           RowBox[{"Length", "[", "minibatch", "]"}]], "nablaW"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"biases", " ", "-=", "  ", 
         RowBox[{
          FractionBox["eta", 
           RowBox[{"Length", "[", "minibatch", "]"}]], " ", "nablaB"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Realiza", " ", "el", " ", "entrenamiento", " ", "de", " ", "la", " ", 
     "red", " ", 
     RowBox[{"neuronal", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SGD", "[", 
      RowBox[{
      "trainingdata_", ",", " ", "epochs_", ",", "minibatchsize_", ",", 
       "eta_"}], "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "minibatches", ",", "c"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"costs", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"c", "=", 
            RowBox[{"Mean", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"EvalCost", "[", "ex", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ex", ",", "trainingdata"}], "}"}]}], "]"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"costs", ",", "c"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"minibatches", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"RandomSample", "[", "trainingdata", "]"}], ",", 
              "minibatchsize"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"UpdateMiniBatch", "[", 
              RowBox[{"mb", ",", "eta"}], "]"}], " ", ",", 
             RowBox[{"{", 
              RowBox[{"mb", ",", "minibatches"}], " ", "}"}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "1", ",", "epochs"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "Utilidades", " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ViewTensor", "[", "t_", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"MatrixForm", "[", "i", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "t"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"EvalCost", "[", "ex_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "a"}], "}"}], ",", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"ex", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"a", "=", 
         RowBox[{"ex", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"y", "=", 
         RowBox[{"FeedForward", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Norm", "[", 
          RowBox[{"Cost", "[", 
           RowBox[{"y", ",", "a"}], "]"}], "]"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ShowInfo", "[", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "Print", "[", "\"\<Informaci\[OAcute]n del resultado:\>\"", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"costs", ",", 
         RowBox[{"PlotRange", "\[Rule]", "Full"}], ",", " ", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<iteraci\[OAcute]n\>\"", ",", "\"\<Costo\>\""}], 
           "}"}]}], ",", 
         RowBox[{"PlotTheme", "->", "\"\<Scientific\>\""}], ",", " ", 
         RowBox[{
         "PlotLabel", "\[Rule]", 
          "\"\<Valores de la funci\[OAcute]n de costo\>\""}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ShowResults", "[", "feed_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "i", "]"}], " ", "<>", " ", 
           "\"\< \[Rule] \>\"", " ", "<>", " ", 
           RowBox[{"ToString", "[", 
            RowBox[{"FeedForward", "[", "i", "]"}], "]"}]}], "]"}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "feed"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.659896383927318*^9, 3.6598964350328608`*^9}, {
   3.659896653045203*^9, 3.659896658836915*^9}, 3.659896786427917*^9, {
   3.659897001808999*^9, 3.659897002907425*^9}, {3.6598971970661163`*^9, 
   3.659897221896283*^9}, {3.659897308467721*^9, 3.659897309842939*^9}, {
   3.659897340626255*^9, 3.659897454831624*^9}, {3.659897503919601*^9, 
   3.659897507299178*^9}, {3.6598978486615973`*^9, 3.6598978487581367`*^9}, {
   3.659897900010503*^9, 3.6598980112333603`*^9}, {3.6598982094841213`*^9, 
   3.659898216486753*^9}, {3.659898278913622*^9, 3.659898298710095*^9}, {
   3.6598985013931723`*^9, 3.659898545359284*^9}, {3.659898583277692*^9, 
   3.659898935398712*^9}, {3.659899609459655*^9, 3.659899695686791*^9}, {
   3.659899794978739*^9, 3.659899983395425*^9}, {3.659900169813932*^9, 
   3.6599002988903513`*^9}, {3.659901429526387*^9, 3.659901476906479*^9}, {
   3.659901545093731*^9, 3.6599015756441317`*^9}, {3.659901646627964*^9, 
   3.659901650307665*^9}, {3.659901685549156*^9, 3.6599016890398293`*^9}, {
   3.659901720456584*^9, 3.659902008478837*^9}, {3.6599020480517197`*^9, 
   3.659902104653366*^9}, {3.6599021464018993`*^9, 3.659902225750671*^9}, {
   3.659902269756583*^9, 3.659902270383298*^9}, {3.659902350444652*^9, 
   3.6599023653334713`*^9}, {3.659902430493525*^9, 3.659902480914654*^9}, {
   3.659902554762782*^9, 3.659902656074977*^9}, {3.659902726462132*^9, 
   3.659902861889139*^9}, {3.6599032148691673`*^9, 3.6599033472344513`*^9}, {
   3.6599033943287477`*^9, 3.659903439688114*^9}, {3.659903476900391*^9, 
   3.659903525542548*^9}, {3.659903568841693*^9, 3.659903577427335*^9}, {
   3.6599040603422422`*^9, 3.659904060905425*^9}, {3.659904111088489*^9, 
   3.6599043351764803`*^9}, {3.65990437742314*^9, 3.659904408068619*^9}, {
   3.659904443856544*^9, 3.6599044822504387`*^9}, {3.6599045163256407`*^9, 
   3.659904689585359*^9}, {3.659904766503957*^9, 3.6599048731255903`*^9}, {
   3.659904906227068*^9, 3.659904906468987*^9}, {3.6599050003970823`*^9, 
   3.659905000762969*^9}, {3.659905074168062*^9, 3.659905131737034*^9}, {
   3.659905309729014*^9, 3.659905339073715*^9}, {3.659905383706476*^9, 
   3.659905449012731*^9}, {3.659905486207942*^9, 3.659905489242876*^9}, {
   3.659905551597575*^9, 3.659905554783411*^9}, {3.659905976981668*^9, 
   3.659906061306367*^9}, {3.6599061693358307`*^9, 3.659906198538073*^9}, {
   3.65990623616013*^9, 3.659906236343533*^9}, {3.659906390915649*^9, 
   3.659906392706629*^9}, {3.6599064314377537`*^9, 3.659906432387175*^9}, {
   3.6599064675452757`*^9, 3.6599064714685287`*^9}, {3.659906565298855*^9, 
   3.6599066492552958`*^9}, {3.659906724465962*^9, 3.6599067954374037`*^9}, {
   3.659906920417573*^9, 3.659907025893556*^9}, {3.659907065582921*^9, 
   3.659907183319625*^9}, {3.659907222172114*^9, 3.659907236944751*^9}, {
   3.659907306103894*^9, 3.65990730625091*^9}, {3.659907355171426*^9, 
   3.659907383625987*^9}, {3.6599074254920473`*^9, 3.659907621882299*^9}, {
   3.6599076725526333`*^9, 3.6599076926082687`*^9}, {3.659907725400155*^9, 
   3.659907878724433*^9}, {3.6599079842758827`*^9, 3.6599079844739313`*^9}, {
   3.659908089852613*^9, 3.659908128732725*^9}, {3.659908162891986*^9, 
   3.6599082078697863`*^9}, {3.659908242632257*^9, 3.659908244222211*^9}, {
   3.659908274392631*^9, 3.65990836416031*^9}, {3.65990859003843*^9, 
   3.6599085906408*^9}, {3.659909193575098*^9, 3.65990920462528*^9}, {
   3.659909257659595*^9, 3.6599092984763727`*^9}, {3.659909641606558*^9, 
   3.659909714694977*^9}, {3.659909783295433*^9, 3.659909802664422*^9}, {
   3.6599098534047813`*^9, 3.659909860837956*^9}, {3.659910070424122*^9, 
   3.659910146436648*^9}, {3.659910256486308*^9, 3.659910306685073*^9}, {
   3.6599104082628736`*^9, 3.659910504454897*^9}, {3.659910681230981*^9, 
   3.659910686688281*^9}, {3.659910788704866*^9, 3.6599108012551517`*^9}, {
   3.659911832391803*^9, 3.6599118324868727`*^9}, {3.659911891051299*^9, 
   3.659911891298026*^9}, {3.659917587890646*^9, 3.659917593461431*^9}, {
   3.659917735271576*^9, 3.6599177804535646`*^9}, {3.659917820933105*^9, 
   3.6599178561825247`*^9}, {3.659917887584189*^9, 3.659918098912581*^9}, {
   3.659919131790474*^9, 3.659919141022876*^9}, {3.659922026656192*^9, 
   3.659922110885497*^9}, {3.659925170054744*^9, 3.659925313744814*^9}, {
   3.659926189600053*^9, 3.659926216272781*^9}}],

Cell[CellGroupData[{

Cell["Aplicaci\[OAcute]n: Compuertas l\[OAcute]gicas", "Subchapter",
 CellChangeTimes->{{3.6599255653106203`*^9, 3.659925573814535*^9}}],

Cell["\<\
La aplicaci\[OAcute]n m\[AAcute]s trivial de una red neuronal artificial es \
que aprenda a calcular las salidas de una compuerta l\[OAcute]gica. Primero \
se calcular\[AAcute] la compuerta AND.\
\>", "Text",
 CellChangeTimes->{{3.65992557757438*^9, 3.659925634581852*^9}, {
  3.659925987481975*^9, 3.6599259931860027`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"td", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "1", "}"}]}], "}"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Datos", " ", "de", " ", 
    RowBox[{"entrenamiento", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Datos de entrenamiento.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"td", ",", " ", 
   RowBox[{"Frame", "\[Rule]", " ", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"feed", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "td"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Initialize", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Se", " ", "inicia", " ", "una", " ", "red", " ", "neuronal", " ", "de", 
    " ", "2", " ", "neuronas", " ", "en", " ", "la", " ", "capa", " ", "de", 
    " ", "entrada", " ", "y", " ", "1", " ", "en", " ", "la", " ", "de", " ", 
    
    RowBox[{"salida", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red sin entrenar son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGD", "[", 
   RowBox[{"td", ",", "2000", ",", "4", ",", "3"}], "]"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "entrena", " ", "la", " ", "red", " ", "con", " ", "2000", " ",
      "iteraciones"}], ",", " ", 
    RowBox[{
     RowBox[{
     "sets", " ", "de", " ", "4", " ", "elementos", " ", "y", " ", "\[Eta]"}],
      " ", "=", " ", "3."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red entrenada son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ShowInfo", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.659908408434352*^9, 3.659908683248211*^9}, {
   3.6599087876316853`*^9, 3.659908857974122*^9}, 3.6599090510580463`*^9, {
   3.659909138929482*^9, 3.659909150116515*^9}, {3.65990986787351*^9, 
   3.6599098821626587`*^9}, {3.6599101346673317`*^9, 3.659910176662353*^9}, {
   3.659910373839717*^9, 3.6599103874460173`*^9}, {3.6599118508919086`*^9, 
   3.659911851017771*^9}, {3.659917607222137*^9, 3.6599176148370247`*^9}, {
   3.659917797277699*^9, 3.659917804499463*^9}, {3.6599181067940483`*^9, 
   3.659918208054164*^9}, {3.6599256424173813`*^9, 3.659925692705991*^9}, {
   3.65992593698785*^9, 3.6599259495604362`*^9}, {3.659926009221183*^9, 
   3.659926177405992*^9}, {3.659926505514627*^9, 3.6599265060724688`*^9}}],

Cell[BoxData["\<\"Datos de entrenamiento.\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], 
     RowBox[{"{", "1", "}"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.659918194218508*^9, 3.6599182093146963`*^9}, 
   3.6599191447572308`*^9, 3.659925317748679*^9, {3.6599256585634336`*^9, 
   3.6599256935722446`*^9}, {3.659925937483941*^9, 3.659925949689774*^9}, 
   3.659926026443894*^9, 3.659926180015134*^9, 3.659926219371542*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Los resultados de la red sin entrenar son:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219372712*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.589825}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219373402*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.727211}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.6599262193740883`*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.677332}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219374908*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.795567}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219375515*^9}],

Cell[BoxData["\<\"Los resultados de la red entrenada son:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220716734*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.000121753}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220718254*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.044573}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220719492*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.044573}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220720139*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.947016}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220720641*^9}],

Cell[BoxData["\<\"Informaci\[OAcute]n del resultado:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926220721147*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.9, 0.36, 0.054], PointSize[0.0055000000000000005`], 
     AbsoluteThickness[1.6], CapForm["Butt"], PointBox[CompressedData["
1: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
U6B59cUY3Raq/FNg/3HCjujmlcw/BfPrBsff+UBbp0BudU5z+EvaPgXnXSeO
in9EC1Ng+Ojim/qbtGsKTm7dPcG6gvZKQVGr3tqnz9BBKei7xy1k1DFalAJf
p5cue/bR4hTcWvTwpv52WpKC0xXbTuyR0/IUuJnLdYzS6PwUtFvX7+3pWLog
BaMFW4YuDKWLU5BZH3HrjQ9dmoKO2uNr49fRihQcjBg/f7iQrkhBtxG/e9yx
o6tSoNe7zcSoeXR1ClzNaorGWdC1KciNaOX5YRJdnwKPws4bi0bTjSkY4y2r
9DSgm1NQJxy80qQfLUjF8Brnka270xqpaK39edwDTVorFa9a+HsfaknrpKJB
mFOT+tOR+adi7p5Ovt6faINUHBCkGC2tp41SkT7zqtbMp7RJKpx/iTuZ3KOR
Cl3zBINR12jLVMQ8zlgyvJy2TsUAPX+54SnaPhUFH/+8GnOYFqbC9GRLs6l7
addUtPcW5s3Pp71SkRX1+efqbDooFW538uzCU2lRKoxOz9y3OZYWp0Lz36Om
c6G0JBXTz1mNeudLy1PxMDHFrqcbnZ+KRabZa6yc6IJU9G+3dnnMUro4FW0D
/xqds6ZLU6Exf/ULNUtakYqmvK0es83oilTcO3Duumw8XZUKg9Y1/+pG0NWp
8FzS6u/EQXRtKqyj7S9k6NL1qTgpbVr4uSvdmIq3+35vXdyebk5FRXf5vtNq
tCAN1iM/ew37uYL5p2HZykkNmz7RWml4OWBnzy5vaJ00TGle8zW5ltZLQ0fh
mY2a1bRBGnrdf1MguUEbpWHiTcPgnpdokzS4H7lev/sMjTQcuNGryeQ4bZkG
/ZXC7Bv7aes0WIZ9vr5+F22fhs8DDLLbbaaFaRjZ36HhgIx2TcMA3fdXliTT
XmlIiJsyqlUMHZSGmXlHupVspEVpyF5xImSDLy1Ow/bEsmUGbrQkDU2bRx5+
7UTL06BVERO2bxmdn4a3byec8F1EF6TBV1a+CnPo4jS4/iz07TydLk1D7leP
d68m0oo0vPqdfUExmq5Iw0O9Q3+3DKWr0qDXZnZGZH+6Og1bXn6KcO1J1yrz
Cp92zqYzXZ+Ghb1u2pi3pRvTsD92ivGEFnRzGg63G7Jy1A8H5i+BeMPom8M/
0eoSPH/dMt7wDa0hwVL92WGjn9GaEnhNOlg86QGtJUHx3td9LG/S2hK8Xrzn
3NLLtI4E1lG75Z7naF0JLlzL35pwgtaTYMzIxbf3HKL1JZA1xBpd2UsbSOCa
33ykcRttKMHP4QHLeufSRhIISq/ozUmnjSXwOXihZVgibSLBpFMTBUejaFMJ
rpz53eVjCA0Jgm6/NhnpS1so78Pivoe3G20pgV9S4aHS1bSVBNK5Fn9bOtDW
EqTNT1xoY0vbSvAtwqVgtxVtL8HRN+f+/bGgHSQYVJxqu3QKLZTgSYczO0rH
0c4SWFnPeNt7JO0qwf7buoOiB9PuEnT5Z7bwQ1/aS4Im7Hdb0YP2k0C3/Rrv
qk50kPJ+b3isnKVBh0pw7uf1MecFtEiCi18k9fix/H+OUVr7fNh/n2ixBIv2
+nyc/ZZOlsD97bFJd57TEglKf25zcHpEyyTo+2LBoqbbtFyC1mmPdBIr6TwJ
el5evX/gBTpfgtET2nU4d5reKUHcki/GTsfpAgn2hs4c0OYgXSSB6ZURtw7u
oYsliBp9b5pDPn1UgnYenh6aOXSpBM0tDBcrpHSZBBpjp30JTKQVEtxp/XrG
2Gi6XIJyM/s5nzfSFRI4LL3156gfXan8HmMzV2zcQFdJsL6gbs2MNfQdCbTs
WvXoupKuliD9uplb3RK6RoIPP58IT1jTtRI0rjP6Kp1N10nwySpmkMd0ul4C
X78RH+dNphskCJkXuWC0Md0owa3H9811RtBNEkw5l3RZbTDdLIHL4J+PG/vS
vyVIvhoV/rwHLZAi7ld8wX0tWl2K64keS6va0hpSLLqzObVSjdaUQno8Ykbl
r2WcfymcJKKNN5pobSkwtdPIe+9pHSkau29eVvuK1pXiZf3mv++f0npSWH6P
7/GvmtaXIvrb7e1db9EGUti0+7N5+FXaUIqac6LWs8ppIynsuz194HKaNpbC
eXVuN/Fx2kQKrw0TSvYfpE2leLB4Stm9AhpS9MgbN6DldtpCihu9il6N2URb
SrFPfVSbNTLaSor1z+ZH5qXQ1lKsSdqy6F4cbStFleGRoK4i2l6KElP9TzbB
tIMUlaFJJ7J9aKEUv7/G3HjiRjtLEfrtgNFQF9pVit0dCx8GONLuUoR07Hn1
0hLaS4p+Lbf9672Q9pPi+dg3/r5z6CApfvTbNPy6OR0qxcONTn0Np9AiKRaP
fD83ZTwdI0Xq/HeHPo2ixVK07N9p/tKhdLIU6t069C0fQEukyDm/qd8YXVqm
/B5e+1rv6EbLpShwtj7QoxOdJ0WQ6YfxaRp0vhQOaZr1bdXonVJ8yXE/G/9r
KedfCvfDN09qfKWLpGia0aI6+QNdLMXWe+e1tevpo1KkNz/12PKMLpXCwFq/
bvgjukyZd9oKn7I7tEKKMT7Le1hfp8ulmHT2Y9WrS3SFFOLpH/JE5+hK5Xkr
DYP7nKKrpLg2Mnr16aP0HSmeTr66VHiArpbC+nzt0tYFdI0UY5O3rTq4ja6V
opfDe4/lm+g6KTq+2xXRLpOul8Lv1QFpWSrdIEXU+/fbvcV0oxQ6aXMODY2i
m6T4MOvAybqNdLPye4tQP73dn/4txdn4ScdXe9KCdNRlm+0cso5WT0e7a+qx
H5xojXRcHxxmV+pAa6bDJnZz91g7WisdWnsc/rO1prXT8WTwkWVD5tA66SgK
3vTwtzmtm47Khs7T7k6h9dKxYod2cvEEWj8djrIdJ1JH0wbpaBQrLnkOpw3T
UdHT86jNINooHYf2Hw2b1I82TkeXQHl//Z60STpa+QzcotWVNk1HkpPw0z9N
GukQ3lre83Nr2iIdtzrqa78W0JbpWDbk8tMnP+05/+l4+NYh5EETbZ0O11ef
n937QNum46pTvvb9eto+Ha1Xh2o9fE47pKNp29bbT2toYTo2SfQd6u/RzumI
sx1S8KWKdk3HhAsXjrW4Sruno3p9v+guF2ivdFiGLu44+Cztp8zvceJi0xN0
UDrG9K6zW3yEDk2Hg0e8lvd+WpSOjsfyRGl76Jh0GPnO21W8jRYr16vKQ+9s
opPT0StzVKtfmbQkHSbDy0z1JbQsHWdycvtbJ9LydEyL+X0oPIbOS8d3g24N
B8Pp/HQ8dex5/UUQvTMdvWVmdr186QLl91V5NspmA12UjsLNtxemraWL0/Fs
9PFz11bRR9NRMG1nVUcHujQdzto1oYvs6LJ0zA3fXC63phXpSHkydPezOXR5
Osr6lPcbMYOuSMe3fcWjNprRlenKf2+Pu3N1Il2VDrOuue37GdN3lOd1HnLH
byRdrfz+G4cYXjOga5T1jr/ubDCQrk1H+Oij0bF96Lp0YGlNxMsedL3yvvOL
1S270A3pCPkUpbVfk25U5lO8e5t2G7opHXOOeh0Pb0E3p0Nz7oR5734t4fyn
Y/fYRc7LvtGCDMi29Pp5tZFWz8DL4e808Y7WyMDON/02HX9Ja2bAdFH3HaNq
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
4PPN2qgO16ZN+B/H+BMh
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Costo\"", TraditionalForm], None}, {
     FormBox["\"iteraci\[OAcute]n\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{},
  PlotLabel->FormBox[
   "\"Valores de la funci\[OAcute]n de costo\"", TraditionalForm],
  PlotRange->{{0, 2000.}, {0, 0.17216269597458053`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.659918194218508*^9, 3.6599182093146963`*^9}, 
   3.6599191447572308`*^9, 3.659925317748679*^9, {3.6599256585634336`*^9, 
   3.6599256935722446`*^9}, {3.659925937483941*^9, 3.659925949689774*^9}, 
   3.659926026443894*^9, 3.659926180015134*^9, 3.659926220772767*^9}]
}, Open  ]],

Cell["\<\
La compuerta XOR es un poco m\[AAcute]s complicada, y necesita una red con \
una capa oculta. Si no se agrega esta capa oculta la red converge a dar 0.5 \
como resultado en todas las entradas.\
\>", "Text",
 CellChangeTimes->{{3.65992643309614*^9, 3.659926486361459*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"td", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", "0", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", "0", "}"}]}], "}"}]}], "}"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Datos", " ", "de", " ", 
    RowBox[{"entrenamiento", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Print", "[", "\"\<Datos de entrenamiento.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"td", ",", " ", 
   RowBox[{"Frame", "\[Rule]", " ", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"feed", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "td"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Initialize", "[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1"}], "}"}], "]"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "inicia", " ", "una", " ", "red", " ", "neuronal", " ", "de", 
     " ", "2", " ", "neuronas", " ", "en", " ", "la", " ", "capa", " ", "de", 
     " ", "entrada"}], ",", " ", 
    RowBox[{
    "2", " ", "en", " ", "la", " ", "capa", " ", "oculta", " ", "y", " ", "1",
      " ", "en", " ", "la", " ", "de", " ", 
     RowBox[{"salida", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red sin entrenar son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGD", "[", 
   RowBox[{"td", ",", "2000", ",", "4", ",", "3"}], "]"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "entrena", " ", "la", " ", "red", " ", "con", " ", "2000", " ",
      "iteraciones"}], ",", " ", 
    RowBox[{
     RowBox[{
     "sets", " ", "de", " ", "4", " ", "elementos", " ", "y", " ", "\[Eta]"}],
      " ", "=", " ", "3."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red entrenada son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ShowInfo", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.659926458268635*^9, 3.659926462420582*^9}, {
  3.659926494755622*^9, 3.65992651798256*^9}}],

Cell[BoxData["\<\"Datos de entrenamiento.\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], 
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], 
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], 
     RowBox[{"{", "0", "}"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.659926523336327*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Los resultados de la red sin entrenar son:\"\>"], "Print",
 CellChangeTimes->{3.6599265233377647`*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.606069}}\"\>"], "Print",
 CellChangeTimes->{3.659926523338441*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.611204}}\"\>"], "Print",
 CellChangeTimes->{3.659926523339341*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.622565}}\"\>"], "Print",
 CellChangeTimes->{3.65992652333985*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.626581}}\"\>"], "Print",
 CellChangeTimes->{3.659926523340332*^9}],

Cell[BoxData["\<\"Los resultados de la red entrenada son:\"\>"], "Print",
 CellChangeTimes->{3.659926525086308*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.0429615}}\"\>"], "Print",
 CellChangeTimes->{3.65992652508762*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.961397}}\"\>"], "Print",
 CellChangeTimes->{3.659926525088567*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.961442}}\"\>"], "Print",
 CellChangeTimes->{3.659926525089507*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.0410223}}\"\>"], "Print",
 CellChangeTimes->{3.659926525089929*^9}],

Cell[BoxData["\<\"Informaci\[OAcute]n del resultado:\"\>"], "Print",
 CellChangeTimes->{3.6599265250903473`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.9, 0.36, 0.054], PointSize[0.0055000000000000005`], 
     AbsoluteThickness[1.6], CapForm["Butt"], PointBox[CompressedData["
1:eJw813tYTN37BvAk5BxCCCEkISQhulVIQghRklRSqel8ruk81VRznikhCSGE
EMIg9CZJQhFCiEKRCuE33+v37N5/3utjtfaz7n3v1cUEJ+/1LspKSkqVfZSU
/vf///+vxeRv3MBxa5/LTegP8PepseqGbYxVUVO+O3HPZMZqiDx4fnb6IMbq
8Hqzv298L8YaCH383u1XD8aayH0Y/VCoxFgL6if13ip1eyJ8omd9jPx3nawN
l4xF1xd2ewoWTHx0blC3dfDmUV1r01/GuvBfyL9d3m09zIzy+XOq2zPROGHG
DX639fF1xIir/t2ejSqLgMrN3Z4DjvW0Lwu7PRcTHkrVxnXbAP+59J/Xo9vz
oF/WtKXhD2NDzJQOirzb7fl48dAv+3i3jaD0ebo8tdsLUH15dR2r2wvhEv3t
+4ZuL4Ktp0Hv+d02hlfjjKGju70YZ7f8HPGni/ESaP8oGFbfbROMzPPqc6vb
gHkvq9bDjNmAkoFTJad7fSnc6/875NG9vhS/pu91X9O9bgqz/Z8nze5eN0X+
8JqKYd3rZlhdxHJv/82smyG3ofxHDWMlczhN7MG60r1ujmHDJtTs615fhjIn
kxns7vVlKCza4+XUvb4c/KPFmebd68uxcP+iM1O611fg09POAtXu9RVIs+qR
8ekXs26BL9mObuWM2RYoHTFh3Knu9ZW4Gb7qUnr3+krYjPtg5NO9bonIcz/3
ru9et4S7deLrud3rq9BlI1Ad3r2+Cpr2Y9TafzLrVvinO6HjCWO2FeZnZxdf
7F5fjSM5ou2y7vXVMFNrfxncvb4GhflXFmzpXl8D+eBnXgu619dir9AsYlT3
+lq0mzbu/NnJrFvj2Z3zE2oZwxp+NtLzRYzZ1gjODBgnYyy3RvIpQ7ug7v3r
YPTrqvum7v3rUD+1edW87v3rYDP4wJ9h3fsVP59zJvJbB7N/PWbW/L5fyRjr
Ic9c/+kUY/Z6/ClIrOIylq/H++O74927928At/xWD4vu/RvwpnPb8snd+zdg
TVbXOuXu/RvwXeI46VU7s98GJ6asuHSFMWxwtHL3UBljtg0qLSNn+DOW2+CJ
s2Ff6+79G1HTYpI7vXv/RpSdMP/Tu3v/RkRM/jT0zQ9m/0Yg7+HbYsZKm2Cq
JfOSMsYmeCk/OePDmL0JQ+aOz1/VvX8TfjUp20/u3r8Z5jn95X/bmP2bUd50
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
NLgfovt95JBbohG/qeTa6HByZzRObXk9aqY3WSkGhkqPJk50IqvGICxI6cUP
G7JaDLIMV1nkrSBrxEAwd/wOo4VkrRh0bE/QOqxH1onBnZMm4Z/HkfVj0Ptl
ravaELJRDObYVz0Y0JOMGIzwKDr0uq2Q+o+B7web8tT3ZOsYsN490VerIdvG
wGBPrwu7/iM7xkCUEbhEeJnsFgPu1vLj/BNkVgz0R3fU7sgiB8cgOCrymHIq
ma3In1D5wzeCzInBwnHSzDN7yLwY+Eeo+13dRpbF4M/KhK3i1eTsGMXfP9P1
jBaT82LQfOb47Vw9ckEMnPtn93w2hlwUgxn3et950o8sj0Gkd9mXjJ/nqP8Y
VIwqcprYSK6MgUrg0H7eT8g1MRBO1nsYWUKuj8HoXarHrM+SG2Ngl9uD8/YA
uSUGXlEB7oap5M4Y+H0M2GARSlaKhWdx5GqNXWTVWLibzfI4vIGsFosFA/uU
fjEha8Qi23Zy0vfpZK1Y7Lfv9/LsSLJOLFbkbumh15OsH4vc/KwFDl/OUv+x
uNuk8syiloxYNDvpmTXdIlvEwvfZo7fmp8jWsej/ft+CjTKybSx6Pbz9cEwM
2TEWLyUPV8o8yG6xeDZ0iXWZDZkVi5YM7cNnFpODY+GzuHb0milkdixYPaIl
BwaROYrzbD+gdqT9DPUfi74xmeIdL8myWPw9Om951W1ydiwcLHvYduaT82Ih
S5cPrxaSCxT5b9x65RJKLorFMPZ8vVOOZHksvgS7JZ5cTi6NxZro30JnPXJl
LOpbR/WvHkKuicXZeYLirvYC6j8WP6Ob0149JzfGQvmcX1SEnNwSi+Nr5uQ8
zSV3xiLg1NsJXzlkpThUbKg1ue1JVo3DX9fqDXbWZLU4SLc/und2LlkjDqcr
H02/P4KsFQfDbLUxtt9PU/9x0H6qgpwisn4cbA0PrgmPIBvF4ckirc6PS8mI
g77tu+Ffe5Et4tD+2Dsv/b9T1H8czo2f9+QBl2wbB3VLp0/n1pId49CvOm4D
hpLd4sA7NDonpPok9R8HI7u+ic4ScnAcZpn/edjLlsyOg93UAm+nUWROHNxl
Gm5Rz/Kp/zhs2hZTt2MvWRaHy2W8XoPtydlxCByjN5urSc6Lw4FfW+Uv605Q
/3HYfrTv5AH7yEVxGGApfzVqG1keh4SllhEDx5JL46BpZy1qrjtO/cfBcUjj
zeIsck0cJg4bnR9rT66PQ5ef04/lmuTGOJT1nGE+oO4Y9R8Hpe3Wi2r3kjvj
0GabHHzOjqwUj1h3JUH2GLJqPFwr7ww78jyP+o9HhZJPxH97yRrxOD7slIma
PVkrHl553y9FaZJ14lF2ZYHR2BdHqf94mN78r+XzPrJRPCwXTVLucCAjHnfu
drAWa5Et4iHPxZQ7r49Q//EINvb+LD5Eto2Hw+rLvmdcyI7xWNzGWTpWh+wW
j4QzXTdffDpM/cfjluVe446T5GDFfoNRD/b4kNmK8/40D1g2j8xRnLdhWM+Y
n7nUfzxmfn2gPfUaWRaP0e9cHYxiydnxWLHhWb9LFuS8eKhXP7DLH0QuiEdo
n6Vbhj8+RP3HQ+Zu+bp9L1kej5djNPI27CSXxkMt7Ov8mdPJlfHICbJp5XzP
of7joWWxsr9rMbk+HiGzjwrvxpMb45H9Pc379FpySzwW7PxqN340uTMeQae1
vmi8O0j9J2DDPYFoXwFZNQGzvFKlp8LJagmIGa80evVKskYCzG86jg4dQdZK
wPnRUj/DhmzqPwF/739/EXOWrJ8AN5fZLdujyUYJONAYoVVhTYZi/VTK7fta
ZIsEBE+0nnXtzQHqX+GEkztV4sm2CXio8Xqylw7ZMQH1WZzFv8v3U/8JuOnv
u+SEL5mVgLzdb5IjRpGDEyD6Ur3R58Y+6l9xfk2Tw/HuZE4C3MtX2lxSJ/MS
ULk6YXh/eRb1n4CXbmMCQjzJ2QmQu398pjyanJeA/jq53MOle6n/BCT/fH16
ezC5KAFWT8dZzZpGlifAtOqs1dDnmdR/As4tvxLTO41cmYCqxe1H+pqSaxJw
JyndblRHBvWfAMelr2bMPUluTFD8Ph8ls3EmtyQgqscX5TBNcmcCuKPG3D30
WEb9J6K86fPM8nSyaiJ8vp4ParUkqyVil57OI7U+ZI1EqMScc5taIqX+E9He
envTnBiyTiI0tXoWzlxK1k/El6WevFE9yEaJyLoe0v71hoT6T0RZ5ZTmU7Fk
i0Sou3z127CcbJ2IyHx56rO+ZNtErNhbN39phZj6T8SBkgLvOCHZLRFKX7Ln
HNxCZinOc/V2pEiLHJyI8w0HNtg1iqj/RBgZys9+KyBzEpH/xzl7cyiZl4jA
QQO1E83JskTUvVdaGTmYnJ2I5Wurxi18LqT+E/G0turSxaPkgkTIDkfPbfMn
FyWi/nbL8WZTsjwRtacmLts/hFyaiN4qjjN6vxZQ/4lQnpwgnnCGXJOIow/X
XPgcTa5PxENj/oNdG8iNidB9E66TOpnckghLn4rBdp186j8RUWP/Pa+4R1bi
oNcBr6Z3B8iqHGjqc3L3+ZPVOFh+/03A95VkDQ6O/rF/0jCerMXBUxeDZd7t
POqfg/3Ooyx598n6HJS1LwlYdphsxIGF5q7t3AgyOFDvaDrmtIlswUFdze2/
t2eRrTk445umVtiXbMtBjwLleRtL06l/DuQqbfI1kWQ3Dsz6vNpmPY/M4sBz
XN35jZ/TqH+O4vfx2LitR8hsDn4a1Ii2OpI5HNTf0L+9bgyZx0Gy8Ziexk9T
qX8ObLkmq4eLyNkcGM2oOVu7jpzHwZKutA3xauQCDkTlm7erV3Kpfw6a2y1G
xPLIcg4OjvAtvb+OXMrBQq0zj1uGkSsV5/0bf7LxSQr1z8G1Fw0VZzLJ9Ry4
WfUptdhObuTA1cbY8Lg2uYWDTacv3q76lEz9K54/z3H29TNkpSSYH9pn6hlC
Vk1C4JPJD58sJaslYajov5u/+5E1kjCxE/1rqpOo/yQMyO444XaArJOEhKM1
5467k/WTcCpptMleQ7JREnR/9Qua35OMJFTdfsYPr+RQ/0mwvLe7atd+snUS
HEYN47R7km2TYLQ0ZNAUY7JjEvw+rL//vT/ZLQmfsucbbatLpP6ToKy9p2L7
SXKwIk9t4eifkWR2ElSqRp2bso7MScID/etG7yeReYrzqZzePK8jgfpPgmvu
sTtD7pGzk7As6cfykAPkvCRkF87K3e1PLkiC9IBmYf1KclESFhaHbKobT5Yn
wTP5gf/W9njqPwk55ubKW+6TK5PweLL378e55JokOFrpuT4IJ9cn4flCn3Vm
G8mNSfjaOeHxrJnkliS0V78fIuxD7kyCXqnybI/XcdR/MvQjdJ0vXCGrJqPH
L7t3vhKyWjJ0P19o3+9D1kjGkv0b3xitJmslgx095deSaWSdZBh73ZGe7kXW
T0ZHoJ1m0ptY6j8ZX5xYLf9dJyMZ9XcrY1n7yBbJwC2X1WFhZOtkeK4bdq9x
C9k2GeKlkuiLRmTHZAy/7dT1biTZLRnvZbH3fTtiqP9kTL8bkmr/lBysOO8/
zecHL5LZyfCJC7dbKiNzktF+Qn5pQQiZp5jfOuBo0layLBmjpU7PZhmTs5Ox
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
l6WSjYRQjo/3TY4lGwsRFlW8zyaEDCHOxrcsn+ZNNlfknSt0UHUhWwhRM9jg
cetWspUQg1ax976zJlsL4eFvmvN2OdlGiP/mOz1rMibbCnFDo8Hg7xyyveL9
zPqYM3oa2VEI7rtTw5eOJzsL4VmYFukznOwmhGrDn4oT/cmeQvS2TO382oPM
Urz/fh+bF3fuoPsvROammn3iL+RgIZbMWfynvYEcLoTSHPU/O56T2QrDP/3J
Q3KcEE8d0o7YlJI5QrTsOWlQd43MFeLX53l6e86TeUK43jkc1SefLBJCu79o
wokcskyIY7cKVGwzyFlCJJ8pGTOIR84WYq/GmS33E8i5Qpgkep8RR5DzFM8/
MGTELn9yvhAFr+ShSz3IBUL09LpWpe1ELlSc77XTkCFbyEVCvBg8Tre3NblY
0U91oJrKCrJciMI3/Yr6LSGXCGGdmqY+eh65VPG9S8tHzdEjlwtxROnIlfWT
yJVCzKwe8iVsNLlaCIsOzcMnh5BrhPjU+bH6gyq5TtH36wIfXSVyvRBZPa97
B3Q40v0XYmt54K3SL+RGITTEa3dovyc3C2EY8Hgx5wW5RfG9qB9b3VZNbhPC
KyIq3q2c3CmETeuEZw23yF1CqFzZg91XyEoiSHranPxxlqwiwuMjtcOTj5NV
RdBVHek9JYc8QISRjfNPlWWQ1URQXxhWGsgnq4vQ9GvOOd0ksoYI6/uU7HzP
JmuKoPb98INjwWQtEcT1Ts3+LLK2Yr6t9PQKN7KOCPmTvg2a6EjWEyFOy0BJ
xZasLwJnvH7I57VkAxEmXinzfrmCbCRCyexftU9MyMYiTMKdk0/mkyHClK4V
r1/MIpuLkHz6mHvzVLKFCKxzU6CsRbYSQcmqv+14DbK1CKFxhXlmamQbEcr6
83S8Vcm2IsweollxUIlsL0KkacX4i63b6f6LsLyP1n9Gb8jOItjPTokvrSK7
iTDAO9XU9RbZU4SFo0o+Dykks0QY2trkfy+X7K8438v62wIxOViEl/n7KnYl
kMNFGPdgUYRlEJmtWB/9/fpCN3KcCB9SRsUbbSFzRGhVmXTFzJLMFaH3kIPW
9ovIPBH+HjE1iNEji0TY3/TI5vxYskyEzh+LD/4YRM5SvA9hgqqZEjlbhDv9
K0P2tTrQ/Rchu9G2QeUtOU8E7Uth80OqyfkiZNaecvp1m1wggsfCuI2ci+RC
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
Np78qHiR+/8BH44ewg==
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Costo\"", TraditionalForm], None}, {
     FormBox["\"iteraci\[OAcute]n\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{},
  PlotLabel->FormBox[
   "\"Valores de la funci\[OAcute]n de costo\"", TraditionalForm],
  PlotRange->{{0, 2000.}, {0, 0.13169278113767996`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.659926525144351*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1016},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 106, 1, 102, "Title"],
Cell[CellGroupData[{
Cell[711, 27, 107, 1, 73, "Chapter"],
Cell[821, 30, 66708, 1152, 599, "Text"],
Cell[CellGroupData[{
Cell[67554, 1186, 460, 11, 35, "Input"],
Cell[68017, 1199, 2819, 59, 250, "Output"]
}, Open  ]],
Cell[70851, 1261, 4722, 134, 656, "Text"],
Cell[CellGroupData[{
Cell[75598, 1399, 301, 8, 35, "ItemNumbered"],
Cell[75902, 1409, 687, 23, 37, "ItemNumbered"],
Cell[76592, 1434, 675, 22, 37, "ItemNumbered"],
Cell[77270, 1458, 761, 23, 41, "ItemNumbered"],
Cell[78034, 1483, 842, 26, 51, "ItemNumbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78925, 1515, 106, 1, 73, "Chapter"],
Cell[79034, 1518, 202, 4, 35, "Text"],
Cell[79239, 1524, 23309, 537, 2831, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[102573, 2065, 136, 1, 69, "Subchapter"],
Cell[102712, 2068, 334, 6, 35, "Text"],
Cell[CellGroupData[{
Cell[103071, 2078, 3474, 89, 286, "Input"],
Cell[106548, 2169, 886, 12, 25, "Print"],
Cell[107437, 2183, 886, 26, 92, "Output"],
Cell[CellGroupData[{
Cell[108348, 2213, 905, 12, 25, "Print"],
Cell[109256, 2227, 890, 12, 25, "Print"],
Cell[110149, 2241, 892, 12, 25, "Print"],
Cell[111044, 2255, 890, 12, 25, "Print"],
Cell[111937, 2269, 890, 12, 25, "Print"],
Cell[112830, 2283, 902, 12, 25, "Print"],
Cell[113735, 2297, 893, 12, 25, "Print"],
Cell[114631, 2311, 890, 12, 25, "Print"],
Cell[115524, 2325, 890, 12, 25, "Print"],
Cell[116417, 2339, 890, 12, 25, "Print"],
Cell[117310, 2353, 897, 12, 25, "Print"]
}, Open  ]],
Cell[118222, 2368, 27315, 460, 258, "Output"]
}, Open  ]],
Cell[145552, 2831, 281, 5, 35, "Text"],
Cell[CellGroupData[{
Cell[145858, 2840, 2885, 80, 286, "Input"],
Cell[148746, 2922, 99, 1, 25, "Print"],
Cell[148848, 2925, 640, 23, 92, "Output"],
Cell[CellGroupData[{
Cell[149513, 2952, 120, 1, 25, "Print"],
Cell[149636, 2955, 103, 1, 25, "Print"],
Cell[149742, 2958, 103, 1, 25, "Print"],
Cell[149848, 2961, 102, 1, 25, "Print"],
Cell[149953, 2964, 103, 1, 25, "Print"],
Cell[150059, 2967, 115, 1, 25, "Print"],
Cell[150177, 2970, 103, 1, 25, "Print"],
Cell[150283, 2973, 103, 1, 25, "Print"],
Cell[150389, 2976, 103, 1, 25, "Print"],
Cell[150495, 2979, 104, 1, 25, "Print"],
Cell[150602, 2982, 112, 1, 25, "Print"]
}, Open  ]],
Cell[150729, 2986, 26947, 455, 291, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
