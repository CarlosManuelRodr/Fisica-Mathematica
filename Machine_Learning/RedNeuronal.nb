(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    228110,       4611]
NotebookOptionsPosition[    224701,       4506]
NotebookOutlinePosition[    225036,       4521]
CellTagsIndexPosition[    224993,       4518]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Red neuronal artificial", "Title",
 CellChangeTimes->{{3.6599193963849*^9, 3.6599194044085608`*^9}}],

Cell[CellGroupData[{

Cell["Introducci\[OAcute]n", "Chapter",
 CellChangeTimes->{{3.6599194103045053`*^9, 3.659919413016464*^9}}],

Cell[TextData[{
 "Una red neuronal artificial es un modelo de ajuste basado en el sistema \
nervioso donde la entrada es un vector ",
 StyleBox["x",
  FontWeight->"Bold"],
 " \[Element] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "N"], TraditionalForm]]],
 ", y se desea mapear a f(",
 StyleBox["x",
  FontWeight->"Bold"],
 ") \[Element] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "M"], TraditionalForm]]],
 ", donde N y M son enteros arbitrariamente grandes. ",
 StyleBox["x",
  FontWeight->"Bold"],
 " es el est\[IAcute]mulo de entrada que recibe la red, y f(",
 StyleBox["x",
  FontWeight->"Bold"],
 ") es el est\[IAcute]mulo de salida. Este modelo est\[AAcute] basado en una \
estructura de capas, donde el est\[IAcute]mulo se recibe en la capa de \
entrada, y el resultado se obtiene en la capa de salida. Cada neurona est\
\[AAcute] interconectada con las dem\[AAcute]s de la siguiente capa. \n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQl8VNeZJS68pJ1Jd+L+z0w63Zmk/e+ennZ3phNP93TiNsaQjhfsuN3E
S4wdE+MNDMQgA2YH2ZgdWQjQLrSABNr3vbSvJZXQviEhJIEAsYhVBGwD0pz7
TtXVU20q7RJ+51cUr0rvvXrv3XvP/e53v3u+///dZS8vuM/JyWnFQ3h7+Z3V
v1y+/J21rzyAD/++duUH796Pjf82zcnpCv6J7T4NGjRo0KBBgwYNGjRo0KBB
gwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBBgwYNGjRo0KBB
gwYNGjRo0KBBgwYNGjRo0KBBg4bRRb2/Uz/86yf6cjRo0DAmmIiWrvzmct2F
cfmxbzYu6JbLcu3tvZDhjE/L0s/dUePu3bu9vb0TfaUaNGgYPiaqpUsy71Vw
1wR+HN3f+mZDedL+9XzIKM2vv/761q1bf1QBH/GlRukTNX7RDBsNo4EJa+mm
CtyLM9++ffsrE7CNb77RlDK6UB60X32vLNwbN25cuXLl8uXLl4CWmMX99LUU
nbh48sYOXqf8N5BnLpi+c7rX+GcCxy+aYaNhFDDeLd1k+izX6cSWM84JAr95
s2K/PM6rAt9ofD5aYJn41d5F+aJrvnr16sWLF8+ePXv69OnOzqxd+JtrHr65
erXUUxRy8ll03OfSlzlJKqvx7Wc1Zdu35s4ds+/vAXfNRI5fNMNGw8gxvi39
nGLt+IkG01vvp5wkufPW9etl7thcGNnQ1XWuIVJ0H/vL0HBYk6cyP0wKsIhR
LDdv3kQ33dXV1dHR0dLS0qzg+PHjHR2VYR/IrnSvoafnRkfiR9j0KEfPjlpR
7oEPHyV29BA3bnQkfST39zx6b7hrJmD8YtWwqfKSx+03oMg0w0aDgxjXlt6Z
vBTf+dTQ/KjyFgfGHr/cleeKrflBpceOHcNP63aILqTk8uXr16+TH1ifpx4/
TBIonOFd9RWe57lz59ra2hobG2sVNDQkblHK6YPD1WfO5IhicPqi4Pz5842R
C5V+HPUBhzRELDB9yvtC2X9hVFN3d5Hogp32FF4QwEHo9EF9qAPsiFFeE33n
Q8C4j1/O65yd6NRRGTaVYny6KKbh3LmuhghRBO7FKDVp2GhNQIM9jGdLPx67
BPSddAodB9pLewI+LQqrPV0WPN/JHPNDq07ijN3d3eQHHEKTT6vMQ0e94BOv
ShiYJ0+eRPlWVlYePXq0pqamKWkz/rIz69SZM2dOn87ZiQ/vhZafONHCItmc
1NTUhB42+XN2ts3NyaJGbE093tra2taWvh0f3j1oOH68RQG+xPlR1mBC8M/U
KqzxHr+cTV3WT/h3jIZNrLtSApX4RTx55WFvzz17FgXHLlKzajTYxTi29KpQ
GhuXFRS4iTMG6o9VRm3E1qu747KysnJycoqLi8vLy9GboEqfOHECV4UuA+0L
rQB8PrXsvUkCmpBuBefxPKur8/a/gU9v+ObVsMjYE1cfJlV9GllRUZax/3Wx
/bpbUkFRUchqsemeWlJSemSd+Hp9BAooy/NNZf/1YWVlegUsNfwEygu2AZhn
KhXWOI9flI5gaeoZZcLoZkeiMGx27ervLUyYh5bFJqBZNRoGxTi29HylG9iZ
c+YMhq7blbrqoSvPzw8WI845nx+Kj09I2C9cMa/uTMzPLy0tRc9SX1+PloVr
mIr23iQBHtoNxXA0Yc0RvR79NQzOnF3yy+1+fvNQ9F8k5GVG75wjTMXNn73E
P33knZKSlpaWmZkZsELuv2LXrldRVNsjM9IVZGdnoyMG+8GmBfOwsCb61h3H
+I5fGjk3BAO/BxW7kIZN4OdsTHiSOp0Otk1BQYHBYMAjxYGaVaNhUIxnS6+q
iv7cuMMWFxfRa7jG5eKv4PCF8tAXNgTHxCQlJaE+5+fnl5WV1dXVgR9g0mA8
e/v2bY3MhwpRxDduoEMEJ4CgSkpK9KYiPn36NL7v7OzEOKiiogIPPDU1NS74
0xeEJbozJCQkNDT0yJEjkZGRsbGxiYmJycnJKJpEBQkJCXFxcfg+JiYmOjo6
Pj4edQDlhV+BCQrOmVJkPs7jl3LFkHcv6u6GJb/DaNhEfIL/X94ekpAQG+u+
WLFwonS6wsJCHKVZNRoGxXi2dJy8uroa1RL1GfUThkdGRgYOwW7h4eE44cGD
Bw8dOnT48GGcE2cAz+fl5WFPXMDZs2dRjafY4H1yAEUMagXBKjRVXaYARYyn
il7y1KlT7e3tDQ0NGArBGkTZRQVsnC3MzK0BCoKDg1E0KCAUU5yCGAUoVhRT
uAn4BtUDXTbMVNiQqFRTi8zHefwCo323cZ8dn30mDRvfJf1WzTp/5Znjqebm
5mpWjYZBMZ4tHeyNTgE1mT8EokblxzlJ5uBwMDn5nCdMSUlB5ceeGMlikIsx
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
JQXnVygcKkEbBRlfDwj3VfbyeOxg+63kXUUTpdglJPPZfrpDH6IdXhegIKxg
vF115mCLOOr42cus3KB8ipB/FyUonbNy8Bat12+SyRHO3fjiKzHPiz0Br1qt
1uzsbAxV+IKgggWbQ+757WKfsQvueWrZxtBMJ43bEgSf70koYgLnnt8t12TV
x/o+//Fe6hWwv8mgSIPhDLEi5zq7z2zCXpVk6/iS/zS8NMAQkl7FqWScx4Ka
Jrltlvc7OM61tbWi2QpDM10j8/PzEfMoDQQFp7g9INxXqa/loYOt/UKfYWrB
IIX7fdBsykp90YubI9PTEeogMscFgjsCEBEoyEjmzhxs6bbwwBt+CwLSSutP
U9qCYSpLUJxaOXR7fhhMTrEO/EuHI94s0JoQ1IoBEYNUvg48ASGk51gembqD
tegTfENOnG4WYryO4wu2OWlFFAfcR2cGVtc37I7KHP74Jz5jFjw7exfOTnl5
OW7zKysrwSpUjQbziBQZJ7K7adgSJaYp5zW6O5c0g+c1qeVWi2mG/Ry7kAPt
8qf3CBASdNg2y9pONlvRI5I2ZAjUccxZlIhfmgrLFQy4PSDcV1tbvWn/FD1D
MxLP6vN0BZv49ys7Mul+Tr9LhD00WKFbVtul4czBFvfCsmrWv/5p/bQNcYn5
tZzE7IqVg+cAFQgmB6szP8YcPpX52SJK3RV8tTo7EOb57oxjDpxu0U5DdESJ
97+2lXOdWw4X4LBgpAO37DyU+t1HFwx7eO7vpm/CicNxw2kCpdfrsjCc6xR1
490XLopROalZ0xJpintf/3NabOO1xhh6E0+LabSL9suTEf0zUV936qI4vH4x
RYbUiuNUssE4jKWeNHNUYbmCI3ozMm/oivuqVw62F1JmOrbzvxGcV1sLFsJ9
q8lkApnn5ORQuI8KIbbL37WDLbg0Mrv2teWRP3xujWD1e3634tVlhyMyqz+7
8UWPxoT49CfmBvPevLGl1SBnynAOx5bNQadOnRIOiay3wfIEs+WB121NrI4h
+vLgbL6EkaL25AUOEwz4MTRs3Bv9t+Pm3v3QzKemrsEBxOnDScRm8RHC0qLb
KdSgEsBifqc5QFYK0ZKv+/I83QmwN4MB8DnbZlm44moqmQqcLGGlg5hscdLf
vp1Cf0Bv5szPdsV91RsHW50EKvwkIn8rrAafi2AVH4EhI0kHnmA3sLxdQYtb
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
PFz3F3Q7qJDjeYe+04Gy1/ZWQUGhN+HGbAJhbYNuAFetA084g9asg1Ik7EWq
qTvy/Lwg8swj03bmWMoYeFPkMN9Ssmp39JPvb/rbsR9olTAPzbj7oRk/etb3
zU/3R6YXCS0X91wq96QjyGQLjFBrXB6YKMaRTWFZ2Cbo68y5S//6p/Vcbnj8
24sbqFSDjbC3iPvgcgc6nAfp4RmQlsvX3XfoC/FDg9iX6tBXUBgM8NA2iA6b
rEymtiQgepEScip+/NJG5jrmbImhVm1VVRXieQTzBQUF2dnZmZmZZh0rd4a9
MGfbD5+cz77OoWPmj3hq6WvLIsIzKj0Rb5QrqA0hOkYQjCMiRK85duqlJYek
bE/7xzjfyKRsZooadNtuCgXclt20CcTe7OcSj5EjNVYXD7aMiQf+bG/A3XV4
3qEvl5GrDn0FhcGDTtgGfaVDdJgu2ZvBmoqfvLwp3VLDknW8hcrteXl5IPDk
5GS646WkpIDVQe/g+aiUvD8vDfnJS+uHjF3EbiDhdnfp6mduWN0QorOU2mmI
LofiPmMXSo9FPuN8X1sUiH2jhShiWgS34MZ2crVlZVoRKSl6xIgOegfYNUBh
ZAbqJlPXTxBG25lbk9x06BtSK5zrVB36CgqDCp22DeLbmy9d++2c/eSZKWti
Ll3RNGlJraAUknlubm5GRgbJnGUwOTk5FosF/MmQGBs3W6ocxRvdu93JipGG
EB2EJofo4vFfr2/53Qc7v/vogqG4HRg732fsgn95bnl0dLTJZMIu4T7i9OnT
2P82N236j5DG8dxzgNUpv4YH6N21AluH8KRD35BaYYe+KiNXUBg86KJtkMly
jDf++Dex8OhtycOONnzCU4keHPhXWKqVl5eDPGtra/kRQryxrOaYU/FGV253
TkN0poaemh04xCFPHhChlccv3rT/1++s/bvHFviMWbB2+56IiAiMMlarFftM
c5Dbn31m8+ympHzn2nLB/+wLe/DBzs2Q7jGV8Qh72KGPM6U69BUUBhu6Yhsk
S/MZ+jrZP85ScObMS3RQaAX0LooYhcOdbNAjWJ3ijRMXh8rijXS7SytuuC25
3clWdILltoSZHZlcSwS9uA43CJGRkQcPHtyzZ897vpvnr9oeEhISFxcHksfg
gvdev3jx1rhx31DxzM+vS0e5oMCWdbn3Xq/aClqv3xSds44d+rL4oaFDH2dK
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
+g69GZk36IXZtbW1CL/z8vJSUlIQJyMsB5OD1ePj48G9JSUlWKdF9uWku5Cv
r4ffCMwMfj6rkzkYG7zNVLlJB58nJSU5IXMK4XpcBqmgoKDQf9CbOXOgqakJ
gwVib73OJCc5ORnUilAZUbrZbEbEDqo/deoUbhPadpGl5h73DWF4wo1Gs54z
z83NFWl52RcVT/ASVmiXZmHC3MXsp4KCgkJ/Rm9Ws1zRnZXOnTsHuj5y5Aji
8/z8fLqXFhQUlJeX05n04sWLGFnadvHmTZvzcplHoi74Ovgi5/RqFovFggg8
XUeWDvEcL2EFrGabAMW9AHMsDubOCgoKCgMCooKalkM3ddzoGXz++ecganbE
NzQ0IA4XLmwnT54EtbIuEbvRbhfp/vngg558HXwXfMpFvc4cA4TVas3XYdUh
nuMlrIDVbKWJ7P0cP75HDrGCgoJCb0F2Heo58C4A/Hn16tULFy6A0s+cOdPc
3Hz+/HlB40a9lG+l4NwD7cTbdvtObPzo0aMYKejFXKNDPMdLWAGrYeU2g1HP
gn8FBQUFBZGlZ1YHrI5YnbakpHHn3Tfs6x8xosM0iBBR4ZRuU1PTKR1NOsRz
vIQVsJo2UlBlt4cMRhUUFBTuRDCrwxCd/tRCj6WDJsrx420zoW5LB7l9luhg
sHCVvaduAFazKSXee6+qSFRQUFDwCoaUjqe98CBbMDm7+93Km4tZXU4BMF0v
zwUINRVb//7w4SrBoqCgoNB7qKvTMi1s8Jdr0R0gBovbLqANB4zJXQiYKygo
KCj0IBBCsyd05MjO9903Ntry5IjJFZMrKCgo9AlaW20iKiwm9CpDgnieVYjM
k6vsioKCgkLfwtfX1uaDx8SJWoDtfgYzKkpTBhBvmTxZzXgqKCgo9AvIYTYf
iNhB8njs2aPRO58/8UQbh3cimFdQUFBQ6AU0NmotoiLx4uoxapRG7HV1fb27
CgoKCgpu0dqqTYmC2EHakydruRc8WbFCW6gUVxQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ6wv8Him7oyA==
     "], {{0, 276}, {
     495, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSizeRaw->{495, 276},
   PlotRange->{{0, 495}, {0, 276}}]], "Input"],
 "\nLa ",
 StyleBox["fuerza",
  FontSlant->"Italic"],
 " de la conexi\[OAcute]n entre neuronas est\[AAcute] dada por el ",
 StyleBox["peso w",
  FontSlant->"Italic"],
 " de la conexi\[OAcute]n y el ",
 StyleBox["bias b.",
  FontSlant->"Italic"],
 " De manera que el resultado de una neurona al procesar la se\[NTilde]al es ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Sum]", "i"], " ", 
      RowBox[{
       SubscriptBox["w", "ij"], " ", 
       SubscriptBox["x", "i"]}]}], " ", "+", " ", 
     SubscriptBox["b", "i"]}], ")"}], TraditionalForm]]],
 ", donde ",
 StyleBox["f",
  FontSlant->"Italic"],
 " es una funci\[OAcute]n de activaci\[OAcute]n, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "ij"], TraditionalForm]]],
 " es el peso de la conexi\[OAcute]n de la neurona ",
 StyleBox["i",
  FontSlant->"Italic"],
 " con la neurona ",
 StyleBox["j,",
  FontSlant->"Italic"],
 " donde ",
 StyleBox["i",
  FontSlant->"Italic"],
 " y ",
 StyleBox["j",
  FontSlant->"Italic"],
 " est\[AAcute]n en diferentes capas, y ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "i"], TraditionalForm]]],
 " es el ",
 StyleBox["bias",
  FontSlant->"Italic"],
 " de la neurona ",
 StyleBox["i",
  FontSlant->"Italic"],
 ". Una manera de realizar el conteo de todas las capas que existen en la red \
neuronal es agregando un tercer \[IAcute]ndice ",
 StyleBox["k,",
  FontSlant->"Italic"],
 " que indique entre qu\[EAcute] capas est\[AAcute],  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Sum]", "i"], " ", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["w", "ij"], "k"], " ", 
       SuperscriptBox[
        SubscriptBox["x", "i"], "k"]}]}], " ", "+", " ", 
     SuperscriptBox[
      SubscriptBox["b", "i"], "k"]}], ")"}], TraditionalForm]]],
 ".\nUn tipo muy usado de neuronas artficiciales es la neurona sigmoide, \
donde la se\[NTilde]al de salida de una neurona en funci\[OAcute]n de su \
entrada se calcula a trav\[EAcute]s de la funci\[OAcute]n sigmoide.\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
AAAAgHHwHy6PWME=
     "], {{0, 138}, {280, 0}}, {0, 255},
     ColorFunction->GrayLevel],
    BoxForm`ImageTag["Byte", ColorSpace -> "Grayscale", Interleaving -> True],
    
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSizeRaw->{280, 138},
   PlotRange->{{0, 280}, {0, 138}}]], "Input"],
 "\nLa funci\[OAcute]n sigmoide tiene la particularidad de que devuelve \
siempre un valor entre 0 y 1."
}], "Text",
 CellChangeTimes->{{3.659919421391006*^9, 3.659919685149439*^9}, {
  3.659919743156139*^9, 3.659919892162366*^9}, {3.659919997825447*^9, 
  3.65992013844009*^9}, {3.65992090687052*^9, 3.6599209442703114`*^9}, {
  3.659920978917962*^9, 3.659921197716276*^9}, {3.65992240325947*^9, 
  3.6599224089524803`*^9}, {3.659922489624625*^9, 3.659922585855557*^9}, {
  3.659922646912006*^9, 3.659922650294767*^9}, {3.659922681766717*^9, 
  3.6599227069578533`*^9}, {3.6599228086534224`*^9, 3.659922809613098*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"LogisticSigmoid", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", " ", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<\[Sigma](x)\>\""}], "}"}]}], ",", 
   RowBox[{"PlotTheme", "->", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.659920142227826*^9, 3.659920179611471*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], CapForm[
    "Butt"], LineBox[CompressedData["
1:eJwt1H0w1HkcB/Alj6v2N3dCzW1HqEMxJi1Lms/3SkV5bk+ytdg6RCoVV6qz
Lpq60ZXdEtamWvLM5raczfb7YYpKrbFatnAieVi7vxwRPd3ezP3xnve85v3/
eyX3cPjPhhQKJUif/9oNrCe+fsUI0ZHnIQuJfGAl/nB+fgEjvLbIqVFpfEi/
ylw9/R4jVrs0VBKZfGjTRHHfajBibexQxa18PsTkF7/s6NHv2S7Wskd8yJ1y
elpQhxH0TKanj6MAZsQbqj2iMSKZdiWr6I0AZGaxh+If0IiRG4EuvaeuQsYz
laY5dgmhnZr1QtEFMF663MaLvpiQqMIMdCIRuPztb471U4lv6mbtWpg3ocRS
PKP+zZx40dmXWuBXAq3sJxdxMCNSzrjnpfHLgF5Mt8t/bUK4B/muuCurgh2b
2SeVF4yJi/ke28d8JWD7MY7nHGBEDL1zDWh/XA+utSLeUa0hESVRVByduwuD
x2+6qcoNiBvm3Zb5exvhQFGuuCiRQjAFps+0jnKI/HW3Q7X9F7x3uNZk2QgB
ThpnNuv6R1zxuOHBtYhWSAoOzR4a/oBf4fe7FwY/gqhjIRs9PWdxXRLL4NCl
xyDAx0Lxe9N4JGeexR3tADDsjXAzmMKvRbTdMjvcCYm9LUdKpydxh/OUjJeH
u8C3IHOZ7MQoftzn3kBqazck9E+92m0zhCf7WvTYuPdAyODamnbHl3h8/KJk
yUU1eOLCnoms57h0tiTmk0cfeL/bu29gnxSX+Td66xoHYM1Zkkqk/gmVz0K7
CoWDUNemq8iIVICEd8KZOv0a5AFPmD4tahgfGFnFch0GTeWtA8GRQ5AV1dU8
lfYGRDVuwpm7o3DdvsCwumoEmmLPWbk3TIIRNe5y2f23kL604EXIt1MgXNj1
apFiFDo6u/26Cqfhe67RquimMUh56rX6kvUsrInLyaLwx6FE4WcV1/4Byu67
jSbtn4Cc6oZy08CPUDiqaLWx0oCBoDug1fgLzAgZLVaEBmwqqtpK/CkIdkyK
84ImQVXGczA+b4DCbBO0me2TwK5yOXd0yBAZpu2nF23Ugq/QdMPDVUao4t02
x6UiLQxfapx1zDJGStX7CbM5LUgdMjQr+0zQl626HsZmHQyKf1lntMIMGX1m
nq7n6aDLaQtv+oQ5UqY7266X6cC2cItdu5yKEvJiOOwxHeRV7p73/mSBQtWn
m1MwEpT4JvVfPy1BVjfr97zyICGpmWOxIp+GfL7WFc+EksAtVuc1iWjofT1j
8GAYCVFnWPZ7xDQ0z5pQvNHb33u7t7CWhqxr6+TKcBIc7zDilz+koWBGSG8N
i4S+G4tbrf6hoSBmiefOSBICebJ0WiCGIh9J5/ZFk7CZwzCpDcPQk7PhvC69
fXwluUG7MCQ9FfsAxZDg9KG0PIeLoVyVgE2PJcHoSK6KehJDgWsu2HZySZBH
J6wzvY2hY7Vhc85xJEg3DstvV2FooIOjFehd/R0nYOsdDEnYSuFnvQt7dsZk
N2Ho9u/V9p3xJKSFwB+LlBgyPejan3KAhGRX2XJxL4aYS7KFar33WzBKNw1g
yE0ltfwxkYTwNpemzHEM1azfuQ5LIiGgtHTbShJDlnfo6lS90Vk7JTGDoaUO
x3369PaKFXJiFjB0WXYuYtNBEv7/L5Sek+larve/c+dd5A==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"\[Sigma](x)\"", TraditionalForm], None}, {
     FormBox["\"x\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-4, 4}, {0., 0.982013787154201}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.659920132383233*^9, 3.659920179878311*^9}}]
}, Open  ]],

Cell[TextData[{
 "La activaci\[OAcute]n de la neurona est\[AAcute] dada por\n\[Sigma](z) = ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"1", "+", 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SubscriptBox["\[Sum]", "j"], 
         RowBox[{
          SubscriptBox["w", "ji"], 
          SubscriptBox["x", "j"]}]}]}], "-", "b"}], ")"}]}]], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". \n\nPor la estructura matem\[AAcute]tica de este modelo conviene \
representar todo en forma matricial, de manera que la notaci\[OAcute]n se \
reduce a\n\[Sigma](z) = \[Sigma](w\[CenterDot]x + b).\n\nLa \
propagaci\[OAcute]n hacia delante (",
 StyleBox["feedforward",
  FontSlant->"Italic"],
 ") consiste entonces en aplicar sucesivamente esta funci\[OAcute]n,\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", "1"], "\[CenterDot]", 
       SuperscriptBox["x", "1"]}], "+", 
      SuperscriptBox["b", "1"]}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ",\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", "2"], "\[CenterDot]", 
       SuperscriptBox["x", "2"]}], "+", 
      SuperscriptBox["b", "2"]}], ")"}]}], TraditionalForm]]],
 ",\n\[VerticalEllipsis]\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "N"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["w", 
        RowBox[{"N", "-", "1"}]], "\[CenterDot]", 
       SuperscriptBox["x", 
        RowBox[{"N", "-", "1"}]]}], "+", 
      SuperscriptBox["b", 
       RowBox[{"N", "-", "1"}]]}], ")"}]}], TraditionalForm]]],
 ".\n\nLa red neuronal trabaja propagando hacia delante la se\[NTilde]al \
inicial mediante la funci\[OAcute]n de activaci\[OAcute]n hasta que se llega \
a la capa de salida. Si se inicia con una matriz de pesos y bias aleatorios \
la red neuronal inicialmente no producir\[AAcute] los resultados deseados. La \
manera en la que podemos determinar qu\[EAcute] tan lejos estamos de los \
resultados es mediante una funci\[OAcute]n de costo\nC(w, b) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"2", "n"}]], 
    RowBox[{
     UnderscriptBox["\[Sum]", "x"], 
     SuperscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{
        RowBox[{"y", "(", "x", ")"}], "-", "a"}], "\[RightBracketingBar]"}], 
      "2"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", \n\ndonde w y b son los pesos y los biases.\nCon esto se puede conocer cu\
\[AAcute]nto se deben cambiar w y b para que el costo sea menor, es decir, \
estar m\[AAcute]s cerca del resultado correcto.\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["w", "k"], "\[Rule]", " ", 
      SubscriptBox[
       RowBox[{"w", "'"}], "k"]}], "=", " ", 
     RowBox[{
      SubscriptBox["w", "k"], "-", " ", 
      RowBox[{"\[Eta]", " ", 
       FractionBox[
        RowBox[{"\[PartialD]", "C"}], 
        RowBox[{"\[PartialD]", " ", 
         SubscriptBox["w", "k"]}]]}]}]}], ","}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["b", "l"], "\[Rule]", " ", 
     SubscriptBox[
      RowBox[{"b", "'"}], "l"]}], "=", " ", 
    RowBox[{
     SubscriptBox["b", "l"], "-", " ", 
     RowBox[{"\[Eta]", " ", 
      FractionBox[
       RowBox[{"\[PartialD]", "C"}], 
       RowBox[{"\[PartialD]", " ", 
        SubscriptBox["b", "l"]}]]}]}]}], TraditionalForm]]],
 ".\n\nAl aplicar sucesivamente este procedimiento se espera llegar a un \
resultado cada vez m\[AAcute]s cercano al correcto. El algoritmo para \
calcular las derivadas parciales ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "C"}], 
    RowBox[{"\[PartialD]", " ", 
     SubscriptBox["w", "k"]}]], TraditionalForm]]],
 " y  ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "C"}], 
    RowBox[{"\[PartialD]", " ", 
     SubscriptBox["b", "l"]}]], TraditionalForm]]],
 " secomoce como el algoritmo de retropropagaci\[OAcute]n. Este consiste en:"
}], "Text",
 CellChangeTimes->{{3.659920463462933*^9, 3.659920513591063*^9}, {
  3.6599212111867456`*^9, 3.659921324689685*^9}, {3.6599213885932703`*^9, 
  3.659921626510948*^9}, {3.659921739014242*^9, 3.6599219418752003`*^9}, {
  3.659922824005316*^9, 3.6599229385405407`*^9}, {3.659923721650215*^9, 
  3.65992382718782*^9}, {3.659923884979227*^9, 3.65992388920325*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Entrada: Establecer la activaci\[OAcute]n ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["a", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " correspondiente para la capa de entrada."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659923874826771*^9}}],

Cell[TextData[{
 "Feedforward: Para cada l = 2,3,\[Ellipsis],L se calcula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["z", "l"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SuperscriptBox["w", "l"], " ", 
      SuperscriptBox["a", 
       RowBox[{"l", "-", "1"}]]}], "+", 
     SuperscriptBox["b", "l"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " y ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", "l"], " ", "=", " ", 
    RowBox[{"\[Sigma]", "(", 
     SuperscriptBox["z", "l"], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659923974675457*^9}}],

Cell[TextData[{
 "Error de salida ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Delta]", "L"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ": Se calcula el vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Delta]", "L"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[Del]", "a"], "C"}], " ", "\[CircleDot]", " ", 
      RowBox[{"\[Sigma]", "'"}]}], 
     RowBox[{"(", 
      SuperscriptBox["z", "L"], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.659924078130061*^9}}],

Cell[TextData[{
 "Retropropagar el error: Para cada l=L-1, L-2,\[Ellipsis],2 calcular ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Delta]", "l"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["w", 
           RowBox[{"l", "+", "1"}]], ")"}], "T"], 
        SuperscriptBox["\[Delta]", 
         RowBox[{"l", "+", "1"}]]}], ")"}], "\[CircleDot]", 
      RowBox[{"\[Sigma]", "'"}]}], 
     RowBox[{"(", 
      SuperscriptBox["z", "l"], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.659924164761177*^9}}],

Cell[TextData[{
 "Resultado: La derivada parcial de la funci\[OAcute]n de costo es ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "C"}], 
     RowBox[{"\[PartialD]", " ", 
      SubscriptBox[
       SuperscriptBox["w", "l"], "jk"]}]], " ", "=", " ", 
    RowBox[{
     SubsuperscriptBox["a", "k", 
      RowBox[{"l", "-", "1"}]], 
     SubsuperscriptBox["\[Delta]", "j", "l"]}]}], TraditionalForm]]],
 " y ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "C"}], 
     RowBox[{"\[PartialD]", " ", 
      SubsuperscriptBox["b", "j", "l"]}]], " ", "=", " ", 
    SubsuperscriptBox["\[Delta]", "j", "l"]}], TraditionalForm]]],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.659923843433752*^9, 3.659924017491897*^9}, {
  3.6599240598313713`*^9, 3.6599242796130037`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementaci\[OAcute]n", "Chapter",
 CellChangeTimes->{{3.659919417216414*^9, 3.65991941912045*^9}}],

Cell["\<\
Esta implementaci\[OAcute]n se basa en la que se ofrece en el libro: \
http://neuralnetworksanddeeplearning.com.\
\>", "Text",
 CellChangeTimes->{{3.659925355568756*^9, 3.659925396488452*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Se", " ", "inician", " ", "las", " ", "matrices", " ", "con", " ", 
    "valores", " ", 
    RowBox[{"aleatorios", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Initialize", "[", "asizes_", "]"}], " ", ":=", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"layers", " ", "=", " ", 
        RowBox[{"Length", "[", "asizes", "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"sizes", " ", "=", " ", "asizes"}], ";", "\[IndentingNewLine]", 
       RowBox[{"bshape", " ", "=", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Length", "[", "sizes", "]"}], "-", "1"}], "}"}]}], 
            "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"wshape", " ", "=", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
           RowBox[{"sizes", "[", 
            RowBox[{"[", 
             RowBox[{";;", 
              RowBox[{"-", "2"}]}], "]"}], "]"}]}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"biases", " ", "=", "  ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"weights", " ", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "i"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";"}], 
      "\[IndentingNewLine]", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Cost", "[", 
      RowBox[{"y_", ",", "a_"}], "]"}], ":=", " ", 
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"y", "-", "a"}], ")"}], "2"]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CostPrime", "[", 
      RowBox[{"y_", ",", "a_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"Cost", "[", 
         RowBox[{"yt", ",", "at"}], "]"}], ",", "at"}], "]"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"yt", "\[Rule]", "y"}], ",", 
        RowBox[{"at", "\[Rule]", "a"}]}], "}"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Sigmoid", "[", "x_", "]"}], ":=", 
     RowBox[{"LogisticSigmoid", "[", "x", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SigmoidPrime", "[", "x_", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"LogisticSigmoid", "[", "xt", "]"}], ",", "xt"}], "]"}], " ", 
      "/.", " ", 
      RowBox[{"xt", " ", "\[Rule]", " ", "x"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Para", " ", "formatear", " ", "el", " ", "vector", " ", "de", " ", 
     "entrada", " ", "al", " ", "estilo", " ", "de", " ", "matriz", " ", "de",
      " ", 
     RowBox[{"Mathematica", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FormatA", "[", "array_", "]"}], " ", ":=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", "i", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "array"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"FeedForward", "[", "alist_", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bwlength", ",", " ", "a", ",", "w", ",", " ", "b"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"bwlength", " ", "=", " ", 
         RowBox[{"Length", "[", "weights", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"a", " ", "=", " ", "alist"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"w", " ", "=", " ", 
            RowBox[{"weights", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"biases", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"LogisticSigmoid", "[", 
             RowBox[{
              RowBox[{"w", ".", "a"}], " ", "+", " ", "b"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "bwlength"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "a", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Backprop", "[", 
      RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "nablaB", ",", " ", "nablaW", ",", " ", "activation", ",", 
         "activations", ",", "z", ",", "zs", ",", "bwlength", ",", "w", ",", 
         "b", ",", "delta"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nablaB", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nablaW", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"activation", " ", "=", 
         RowBox[{"FormatA", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"activations", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"FormatA", "[", "x", "]"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"zs", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bwlength", " ", "=", " ", 
         RowBox[{"Length", "[", "weights", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Calcula", " ", "todos", " ", "los", " ", 
          RowBox[{"feedforwards", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"w", " ", "=", " ", 
            RowBox[{"weights", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"biases", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"z", " ", "=", " ", 
            RowBox[{
             RowBox[{"w", ".", "activation"}], " ", "+", " ", "b"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"activation", " ", "=", 
            RowBox[{"Sigmoid", "[", "z", "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"AppendTo", "[", 
            RowBox[{"zs", ",", "z"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"activations", ",", " ", "activation"}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "bwlength"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Calcula", " ", "los", " ", "errores", " ", "de", " ", "salida", " ",
           "y", " ", 
          RowBox[{"retropropaga", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"delta", " ", "=", " ", 
         RowBox[{
          RowBox[{"CostPrime", "[", 
           RowBox[{"y", ",", 
            RowBox[{"activations", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], " ", "*", " ", 
          RowBox[{"SigmoidPrime", "[", 
           RowBox[{"zs", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"nablaB", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], " ", "=", " ", "delta"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"nablaW", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], " ", "=", " ", 
         RowBox[{"delta", ".", 
          RowBox[{"Transpose", "[", 
           RowBox[{"activations", "[", 
            RowBox[{"[", 
             RowBox[{"-", "2"}], "]"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"z", " ", "=", " ", 
            RowBox[{"zs", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"delta", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"weights", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"-", "l"}], "+", "1"}], "]"}], "]"}], "]"}], ".", 
              "delta"}], " ", "*", " ", 
             RowBox[{"SigmoidPrime", "[", "z", "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nablaB", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}], " ", "=", " ", "delta"}], ";",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nablaW", "[", 
             RowBox[{"[", 
              RowBox[{"-", "l"}], "]"}], "]"}], " ", "=", " ", 
            RowBox[{"delta", ".", 
             RowBox[{"Transpose", "[", 
              RowBox[{"activations", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"-", "l"}], "-", "1"}], "]"}], "]"}], "]"}]}]}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"l", ",", "2", ",", 
            RowBox[{"layers", "-", "1"}]}], "}"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"nablaB", ",", "nablaW"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Calcula", " ", "los", " ", "valores", " ", "de", " ", "las", " ", 
     "derivadas", " ", "parciales", " ", "del", " ", "costo", " ", "y", " ", 
     "con", " ", "esto", " ", "actualiza", " ", "los", " ", "pesos", " ", "y",
      " ", 
     RowBox[{"biases", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"UpdateMiniBatch", "[", 
      RowBox[{"minibatch_", ",", "eta_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "nablaB", ",", " ", "nablaW", ",", "deltaNablaB", ",", "deltaNablaW", 
         ",", "x", ",", "y"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nablaB", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "bshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nablaW", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"0", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "wshape"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", " ", "=", " ", 
            RowBox[{"mb", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"mb", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"deltaNablaB", ",", " ", "deltaNablaW"}], "}"}], " ", 
            "=", " ", 
            RowBox[{"Backprop", "[", 
             RowBox[{"x", ",", "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"nablaB", " ", "+=", " ", "deltaNablaB"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"nablaW", " ", "+=", " ", "deltaNablaW"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"mb", ",", "minibatch"}], "}"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"weights", " ", "-=", " ", 
         RowBox[{
          FractionBox["eta", 
           RowBox[{"Length", "[", "minibatch", "]"}]], "nablaW"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"biases", " ", "-=", "  ", 
         RowBox[{
          FractionBox["eta", 
           RowBox[{"Length", "[", "minibatch", "]"}]], " ", "nablaB"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Realiza", " ", "el", " ", "entrenamiento", " ", "de", " ", "la", " ", 
     "red", " ", 
     RowBox[{"neuronal", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SGD", "[", 
      RowBox[{
      "trainingdata_", ",", " ", "epochs_", ",", "minibatchsize_", ",", 
       "eta_"}], "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "minibatches", ",", "c"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"costs", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"c", "=", 
            RowBox[{"Mean", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"EvalCost", "[", "ex", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ex", ",", "trainingdata"}], "}"}]}], "]"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"costs", ",", "c"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"minibatches", " ", "=", " ", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"RandomSample", "[", "trainingdata", "]"}], ",", 
              "minibatchsize"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"UpdateMiniBatch", "[", 
              RowBox[{"mb", ",", "eta"}], "]"}], " ", ",", 
             RowBox[{"{", 
              RowBox[{"mb", ",", "minibatches"}], " ", "}"}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "1", ",", "epochs"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "Utilidades", " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ViewTensor", "[", "t_", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"MatrixForm", "[", "i", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "t"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"EvalCost", "[", "ex_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "a"}], "}"}], ",", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"ex", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"a", "=", 
         RowBox[{"ex", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"y", "=", 
         RowBox[{"FeedForward", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Norm", "[", 
          RowBox[{"Cost", "[", 
           RowBox[{"y", ",", "a"}], "]"}], "]"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ShowInfo", "[", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "Print", "[", "\"\<Informaci\[OAcute]n del resultado:\>\"", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"costs", ",", 
         RowBox[{"PlotRange", "\[Rule]", "Full"}], ",", " ", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Iteraci\[OAcute]n\>\"", ",", "\"\<Costo\>\""}], 
           "}"}]}], ",", 
         RowBox[{"PlotTheme", "->", "\"\<Scientific\>\""}], ",", " ", 
         RowBox[{
         "PlotLabel", "\[Rule]", 
          "\"\<Valores de la funci\[OAcute]n de costo\>\""}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ShowResults", "[", "feed_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "i", "]"}], " ", "<>", " ", 
           "\"\< \[Rule] \>\"", " ", "<>", " ", 
           RowBox[{"ToString", "[", 
            RowBox[{"FeedForward", "[", "i", "]"}], "]"}]}], "]"}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "feed"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.659896383927318*^9, 3.6598964350328608`*^9}, {
   3.659896653045203*^9, 3.659896658836915*^9}, 3.659896786427917*^9, {
   3.659897001808999*^9, 3.659897002907425*^9}, {3.6598971970661163`*^9, 
   3.659897221896283*^9}, {3.659897308467721*^9, 3.659897309842939*^9}, {
   3.659897340626255*^9, 3.659897454831624*^9}, {3.659897503919601*^9, 
   3.659897507299178*^9}, {3.6598978486615973`*^9, 3.6598978487581367`*^9}, {
   3.659897900010503*^9, 3.6598980112333603`*^9}, {3.6598982094841213`*^9, 
   3.659898216486753*^9}, {3.659898278913622*^9, 3.659898298710095*^9}, {
   3.6598985013931723`*^9, 3.659898545359284*^9}, {3.659898583277692*^9, 
   3.659898935398712*^9}, {3.659899609459655*^9, 3.659899695686791*^9}, {
   3.659899794978739*^9, 3.659899983395425*^9}, {3.659900169813932*^9, 
   3.6599002988903513`*^9}, {3.659901429526387*^9, 3.659901476906479*^9}, {
   3.659901545093731*^9, 3.6599015756441317`*^9}, {3.659901646627964*^9, 
   3.659901650307665*^9}, {3.659901685549156*^9, 3.6599016890398293`*^9}, {
   3.659901720456584*^9, 3.659902008478837*^9}, {3.6599020480517197`*^9, 
   3.659902104653366*^9}, {3.6599021464018993`*^9, 3.659902225750671*^9}, {
   3.659902269756583*^9, 3.659902270383298*^9}, {3.659902350444652*^9, 
   3.6599023653334713`*^9}, {3.659902430493525*^9, 3.659902480914654*^9}, {
   3.659902554762782*^9, 3.659902656074977*^9}, {3.659902726462132*^9, 
   3.659902861889139*^9}, {3.6599032148691673`*^9, 3.6599033472344513`*^9}, {
   3.6599033943287477`*^9, 3.659903439688114*^9}, {3.659903476900391*^9, 
   3.659903525542548*^9}, {3.659903568841693*^9, 3.659903577427335*^9}, {
   3.6599040603422422`*^9, 3.659904060905425*^9}, {3.659904111088489*^9, 
   3.6599043351764803`*^9}, {3.65990437742314*^9, 3.659904408068619*^9}, {
   3.659904443856544*^9, 3.6599044822504387`*^9}, {3.6599045163256407`*^9, 
   3.659904689585359*^9}, {3.659904766503957*^9, 3.6599048731255903`*^9}, {
   3.659904906227068*^9, 3.659904906468987*^9}, {3.6599050003970823`*^9, 
   3.659905000762969*^9}, {3.659905074168062*^9, 3.659905131737034*^9}, {
   3.659905309729014*^9, 3.659905339073715*^9}, {3.659905383706476*^9, 
   3.659905449012731*^9}, {3.659905486207942*^9, 3.659905489242876*^9}, {
   3.659905551597575*^9, 3.659905554783411*^9}, {3.659905976981668*^9, 
   3.659906061306367*^9}, {3.6599061693358307`*^9, 3.659906198538073*^9}, {
   3.65990623616013*^9, 3.659906236343533*^9}, {3.659906390915649*^9, 
   3.659906392706629*^9}, {3.6599064314377537`*^9, 3.659906432387175*^9}, {
   3.6599064675452757`*^9, 3.6599064714685287`*^9}, {3.659906565298855*^9, 
   3.6599066492552958`*^9}, {3.659906724465962*^9, 3.6599067954374037`*^9}, {
   3.659906920417573*^9, 3.659907025893556*^9}, {3.659907065582921*^9, 
   3.659907183319625*^9}, {3.659907222172114*^9, 3.659907236944751*^9}, {
   3.659907306103894*^9, 3.65990730625091*^9}, {3.659907355171426*^9, 
   3.659907383625987*^9}, {3.6599074254920473`*^9, 3.659907621882299*^9}, {
   3.6599076725526333`*^9, 3.6599076926082687`*^9}, {3.659907725400155*^9, 
   3.659907878724433*^9}, {3.6599079842758827`*^9, 3.6599079844739313`*^9}, {
   3.659908089852613*^9, 3.659908128732725*^9}, {3.659908162891986*^9, 
   3.6599082078697863`*^9}, {3.659908242632257*^9, 3.659908244222211*^9}, {
   3.659908274392631*^9, 3.65990836416031*^9}, {3.65990859003843*^9, 
   3.6599085906408*^9}, {3.659909193575098*^9, 3.65990920462528*^9}, {
   3.659909257659595*^9, 3.6599092984763727`*^9}, {3.659909641606558*^9, 
   3.659909714694977*^9}, {3.659909783295433*^9, 3.659909802664422*^9}, {
   3.6599098534047813`*^9, 3.659909860837956*^9}, {3.659910070424122*^9, 
   3.659910146436648*^9}, {3.659910256486308*^9, 3.659910306685073*^9}, {
   3.6599104082628736`*^9, 3.659910504454897*^9}, {3.659910681230981*^9, 
   3.659910686688281*^9}, {3.659910788704866*^9, 3.6599108012551517`*^9}, {
   3.659911832391803*^9, 3.6599118324868727`*^9}, {3.659911891051299*^9, 
   3.659911891298026*^9}, {3.659917587890646*^9, 3.659917593461431*^9}, {
   3.659917735271576*^9, 3.6599177804535646`*^9}, {3.659917820933105*^9, 
   3.6599178561825247`*^9}, {3.659917887584189*^9, 3.659918098912581*^9}, {
   3.659919131790474*^9, 3.659919141022876*^9}, {3.659922026656192*^9, 
   3.659922110885497*^9}, {3.659925170054744*^9, 3.659925313744814*^9}, {
   3.659926189600053*^9, 3.659926216272781*^9}, {3.659935227264112*^9, 
   3.659935227728035*^9}}],

Cell[CellGroupData[{

Cell["Aplicaci\[OAcute]n: Compuertas l\[OAcute]gicas", "Subchapter",
 CellChangeTimes->{{3.6599255653106203`*^9, 3.659925573814535*^9}}],

Cell["\<\
La aplicaci\[OAcute]n m\[AAcute]s trivial de una red neuronal artificial es \
que aprenda a calcular las salidas de una compuerta l\[OAcute]gica. Primero \
se calcular\[AAcute] la compuerta AND.\
\>", "Text",
 CellChangeTimes->{{3.65992557757438*^9, 3.659925634581852*^9}, {
  3.659925987481975*^9, 3.6599259931860027`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"td", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "1", "}"}]}], "}"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Datos", " ", "de", " ", 
    RowBox[{"entrenamiento", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Datos de entrenamiento.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"td", ",", " ", 
   RowBox[{"Frame", "\[Rule]", " ", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"feed", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "td"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Initialize", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Se", " ", "inicia", " ", "una", " ", "red", " ", "neuronal", " ", "de", 
    " ", "2", " ", "neuronas", " ", "en", " ", "la", " ", "capa", " ", "de", 
    " ", "entrada", " ", "y", " ", "1", " ", "en", " ", "la", " ", "de", " ", 
    
    RowBox[{"salida", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red sin entrenar son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SGD", "[", 
    RowBox[{"td", ",", "2000", ",", "4", ",", "3"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "entrena", " ", "la", " ", "red", " ", "con", " ", "2000", " ",
      "iteraciones"}], ",", " ", 
    RowBox[{
     RowBox[{
     "sets", " ", "de", " ", "4", " ", "elementos", " ", "y", " ", "\[Eta]"}],
      " ", "=", " ", "3."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red entrenada son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ShowInfo", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.659908408434352*^9, 3.659908683248211*^9}, {
   3.6599087876316853`*^9, 3.659908857974122*^9}, 3.6599090510580463`*^9, {
   3.659909138929482*^9, 3.659909150116515*^9}, {3.65990986787351*^9, 
   3.6599098821626587`*^9}, {3.6599101346673317`*^9, 3.659910176662353*^9}, {
   3.659910373839717*^9, 3.6599103874460173`*^9}, {3.6599118508919086`*^9, 
   3.659911851017771*^9}, {3.659917607222137*^9, 3.6599176148370247`*^9}, {
   3.659917797277699*^9, 3.659917804499463*^9}, {3.6599181067940483`*^9, 
   3.659918208054164*^9}, {3.6599256424173813`*^9, 3.659925692705991*^9}, {
   3.65992593698785*^9, 3.6599259495604362`*^9}, {3.659926009221183*^9, 
   3.659926177405992*^9}, {3.659926505514627*^9, 3.6599265060724688`*^9}}],

Cell[BoxData["\<\"Datos de entrenamiento.\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935706140829*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], 
     RowBox[{"{", "1", "}"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.659918194218508*^9, 3.6599182093146963`*^9}, 
   3.6599191447572308`*^9, 3.659925317748679*^9, {3.6599256585634336`*^9, 
   3.6599256935722446`*^9}, {3.659925937483941*^9, 3.659925949689774*^9}, 
   3.659926026443894*^9, 3.659926180015134*^9, 3.659926219371542*^9, 
   3.6599357061420383`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Los resultados de la red sin entrenar son:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.6599357061433887`*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.603201}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.65993570614424*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.658653}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.65993570614585*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.696236}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935706146555*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.7442}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935706147245*^9}],

Cell[BoxData["\<\"Los resultados de la red entrenada son:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935707510181*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.000121962}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935707511141*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.0445972}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935707512035*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.0445972}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935707512906*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.946987}}\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.659935707513771*^9}],

Cell[BoxData["\<\"Informaci\[OAcute]n del resultado:\"\>"], "Print",
 CellChangeTimes->{{3.65990858395303*^9, 3.659908617217311*^9}, {
   3.6599086494858713`*^9, 3.659908706339695*^9}, {3.65990877884387*^9, 
   3.659908858230485*^9}, {3.6599090524935617`*^9, 3.659909056495311*^9}, {
   3.6599091394130898`*^9, 3.659909150515234*^9}, {3.6599098683393717`*^9, 
   3.659909882463585*^9}, {3.6599101380941677`*^9, 3.65991017694042*^9}, {
   3.6599103780678368`*^9, 3.6599103883425617`*^9}, 3.65991185135435*^9, 
   3.659911895073106*^9, {3.659917599801612*^9, 3.6599176152161427`*^9}, {
   3.659917792607174*^9, 3.65991780486194*^9}, {3.659918144198704*^9, 
   3.659918208595747*^9}, 3.6599191439464083`*^9, 3.659925317050255*^9, {
   3.659925658564992*^9, 3.659925693573539*^9}, {3.659925937485333*^9, 
   3.659925949691039*^9}, 3.659926026445417*^9, 3.659926180013311*^9, 
   3.659926219370357*^9, 3.6599357075146303`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.9, 0.36, 0.054], PointSize[0.0055000000000000005`], 
     AbsoluteThickness[1.6], CapForm["Butt"], PointBox[CompressedData["
1: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
HthMS1Kh1WrJu2+NdGwqbnvsWuj2mZamomePOV/ffKTlqRjRTlZt945WpCLg
ZWXX57V0Riqs812jrF/RmalY0nK38dPndHYq6u/fwJoqOicVwr1TxVWVdK7y
+9mwsMW6B3ReqvLn++IrL+/SJ1Lx9Hn61Y136AJlXhURbetv0oXK/kY5Sbyv
00Wp0DdMm/f3Cl2s/L72uJlIiugS5fvnzgrsdp4uTcWMRufGXWfo8lRMTjbe
N+oUfT8VL/sOSSrMpytTYSZ1Omt2lK5KxR9blz7PDtHVqbDZFn5SlEPXKO9n
UjeJ2l66LhXm60WytN30h1QMmPHj3piddIPyfXzbm11PpxtT0W98i5/rUulm
Zf+Cqf/9SKJ/p0K9pvs3uZQWKHBtcQPGxtFqCjQNHF50J4pWV+Dosf4emyJo
DQUOnx2/omMoranAZNerLkeCaC0FZHYT8s39aW0Fzuyv0Wv0pXUUeJ1vWKbw
pnUVWOsYmT3Dgx6swE/tmTmv3Wg9Ba4GX3gc50LrK3DklqPRJEfaQAGDmN1X
XtjThgo8uFi6Nc6WNlKgzf3FNlPW0tMUuJwR61y3moYCJ63e705dSZso1/PK
W5pa0qYKNJ7Kiv1hTpspYFt7fUbuItpcgScD92sLF9CWCkgL9vfqPo+2UuDQ
mrGzbhnT1gp8G5YbHwJaqOwnU9xi6nTaXoH6oz3TGifTjgpI9j2xPDqRdlUg
Yup4Q5fxtEiBmpiYiXoGtJcCzr0Xr6nVp30VaFf2evfe4bS/AheazrfbMFQ1
/wp0NJ4tGzZINf/K+jeeTXnXXzX/Cui3FrQ6oqOafwXmV3R959FLNf8KGHmE
fTLqoZp/BbIkl7sKuqnmX7lfZ+qyks6q+VeuJ1vnJWqo5l+BDxeTh1u3U82/
AnnXl18Y1kY1/wpUT9Fwa2ypmn8F4tWHG13+t5Tzr0CKWEcn8Td9QoHpy1b2
sv1BFyi/Z+mCMeOa6EIFnh7YaKP2lS5SoHST7p5Hn+hiBbZ3ePPv0Ae6RIFR
XUZ7Br+lSxX44uz4e2UtXa5A1Pp228e8ou8rkLQnbLF6NV2pQMDYxT1eVtFV
ClSKnnwufExXK+A2cGe14iFdo0DR+k4vve/RdUofyfy2rJz+oMDOxzd7j79N
NygwsUerpd1u0o0KzP5yMbXxGt2sQOQK3/qHV+jfyn4j9lieLaIFacgacObG
zvO0Whqa+49dFHaWVk9D0f3QZ86naY00PPswPMDiBK2Zpvz3Sobe1GO0VhpK
z1hWDz5Ca6fhVkTpns6HaJ00VNUGePzaT+um4Zjxq4V12fTgNLRbt2XMw920
Xho8LE7qXN1J66fhV7x2t5PbaYM09PlPp+s+BW2Yhv7WM3opkmmjNGiH/BgW
I6OnpSG5z63pQQk00mC00GC1VyxtkoawqH3+zlG0aRr2Zh/Kto2gzdIwqej8
3VWhtLny/izXtFompi3TsHZMq8mLAmirNJh4GHqYbqWtlfWT3I6YbKGFabC2
Gftxlhdtn4bgj79HwZ12TMPyk0tFM91o1zRI/PKOz3ShRWkQLU3/DkfaKw0L
9kunGjvQvmmIn9Q9aK4d7Z+Gjl0OXlqwjhYr68vvtjS3psPSUOzZafaKVbQk
DU/yXwXarKBj0+C+736BwzJamoYxjfaf3MxpeRqmyrQH+i2iFcr7ve5pHraA
zkhDw/BfftJ5dGYaHmWO37nDhM5Ow2i7rMJDs+gc5ft/Lb1/dgadmwb74ZNr
b05VzX8avIZtanhqpJr/NFxd9+nLxwmq+U9DhWzuR8F41fynYVTZj2daBqr5
T8MWd+n14aNU85+G84Nk+2aOUM1/GmT/RWxbMUw1/2nY86ppjttg1fynIfS6
c+vIAar5T0PgRpczmf1U858G8/pg23N9VPOfhrKKSX8eaqvmPw1/H/WI/dpd
Nf9pWKNxoGOXbqr5T0OHm77BYzRV86+ch1OabxZ3VM1/Gu5f+jV9c3vV/KfB
c9jVcGlb1fynodG1+Xy+mmr+0xBlN6D2QQvV/KdjyMDSPz/+mnP+0/Gnc7ha
/9+0ejr2Pq78YfKD1kjHJB/L/1yaaM10NA8JP5L0ldZKx2CPZtfCBlo7HWf0
p2nXfqR10qEnenZU8z2tm45ZuzaNn1ZHD07HE3vfLMfXtF46jh6P+538ktZP
R9PVabOKn9MG6Qju2130tYo2TMfI0H2SQU9oo3S8axMcbfmInpaO5f8MvSPu
00hHRLtlpmfu0ibpaNPOtdXHO7Sp8vxhXfYNKP2/muk/rsa7j+N4rN3LCuVH
WkJ+rqikkm6iTyRRUuuESArR6KdV2i1phEYSYrmu73WdU8LRiqQSkkZaWaYl
JKlGJam0HJZJu68/3ufP5+Occ13f8/l+XrAbRytqH8xcVQl7cJRXtlhxuByW
ceT0tu992W14NUcN8t3Wn0phX46CVgR725bA/hxl/ebpG34d3sTRm0m3l/xc
BAdxNELpNeZlARzMUf9fJ+9OvgyHS79/ahwQkAtHctS+d1+9PAeO4eidm49t
UxYcyxFrsIycoITjOaoem37c/wycwNFyW4fUjAw4kaNyThHVKoeTOAr/Z80c
UwFO4ajCRfNJCAencpR43WrN5Z/gNI7i7sZe+5AKM44+WHz/gY7BCo4GXpTo
/3gEzpT2b2qrXk0SrORo+/a9HWMPwtnSfR6Ypdh8AM6V5h94wCovAc6X3u86
Ln3gB7iIo+6rh1677oaLOTKK2KbHxcKlHGVHeI949T1cxtHdj8+77HbAFRxt
PZJz+sdIuEq6z9fu1k8j4GqOjg8PYOZhcK3Uh11cY3wwXMfRN8/pQ+23cANH
v1cs6jTdAjdL82ydeGX3JrhFmkdYtM+jALido/TGhhrz9XAnRyNbeybt94V7
OLKIcl/a5AOrOBpTcnTxf1fBfdK+m60akyqD+6X7+nZeyRtPWIMn83VP/+u2
Qt0/T8bTa38876bunyeV5e2cL5ap++dpwTDnM5uXqPvnyZD/J6zcSd0/Tz91
xg39eqG6f55ueUXsSnRQ989T4Lrwmx326v55+uUPwwfL56r75ykvf3jRpTnq
/nkyWdwdoj9b3T9PZp+8VTut1P3ztOdo27LnM9X983T/L4eIpebq/nma5jJ4
y6Xp6v55GvTh3gxDE3X/PHVnLLq5d6q6f5648ZoTuyep++cpOi7Xw8dY3T9P
acM6lt8Zp+6fp2zZNwZWY9X98yQOP3RRbqDuX/r9HNuRw/TV/fO04dO7hbtG
qvvnyfq34AVduur+eTq0aP7nfsPU/fO0w/HLn+5rq/vnyaYu+q3jEHX/PG33
mmZY8B91/zwdtS3+0lRT3T9POvMbyoRB6v55UlyWpUwbWIH+ecoPPWEy8gOc
wNPSsNueg1RworQPL7/W/qsbTuLpRLSO7PkrOIWnlTOuz3jYAqfytD8+7mhl
E5zG01m/9ISb9TDjKdEwTPPKQ1jBU1mUtW5uNZzJ09/C3HNZv8FKnpLM/qg4
Ww5n87R1mlNk5i9wrnQfH5uVp4vhfGk/DrwLzLwCF/GUNaw662weXMxTs+PN
6KwcuJSn+LkjKi8q4TKeOncapBeehiuk7/dOHCgR4SqeXN7FNVWcgqt58nKM
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
tw1XPoRJTr83zrOv/MPV4f9ZNTd9
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Costo\"", TraditionalForm], None}, {
     FormBox["\"Iteraci\[OAcute]n\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{},
  PlotLabel->FormBox[
   "\"Valores de la funci\[OAcute]n de costo\"", TraditionalForm],
  PlotRange->{{0, 2000.}, {0, 0.1684817269928765}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.659918194218508*^9, 3.6599182093146963`*^9}, 
   3.6599191447572308`*^9, 3.659925317748679*^9, {3.6599256585634336`*^9, 
   3.6599256935722446`*^9}, {3.659925937483941*^9, 3.659925949689774*^9}, 
   3.659926026443894*^9, 3.659926180015134*^9, 3.659926219371542*^9, 
   3.659935707598193*^9}]
}, Open  ]],

Cell["\<\
La compuerta XOR es un poco m\[AAcute]s complicada, y necesita una red con \
una capa oculta. Si no se agrega esta capa oculta la red converge a dar 0.5 \
como resultado en todas las entradas.\
\>", "Text",
 CellChangeTimes->{{3.65992643309614*^9, 3.659926486361459*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"td", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "1", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", "1", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "0", "}"}]}], "}"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Datos", " ", "de", " ", 
    RowBox[{"entrenamiento", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Datos de entrenamiento.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"td", ",", " ", 
   RowBox[{"Frame", "\[Rule]", " ", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"feed", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "td"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Initialize", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "1"}], "}"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "inicia", " ", "una", " ", "red", " ", "neuronal", " ", "de", 
     " ", "2", " ", "neuronas", " ", "en", " ", "la", " ", "capa", " ", "de", 
     " ", "entrada"}], ",", " ", 
    RowBox[{
    "2", " ", "en", " ", "la", " ", "capa", " ", "oculta", " ", "y", " ", "1",
      " ", "en", " ", "la", " ", "de", " ", 
     RowBox[{"salida", "."}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red sin entrenar son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SGD", "[", 
    RowBox[{"td", ",", "2000", ",", "4", ",", "3"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Se", " ", "entrena", " ", "la", " ", "red", " ", "con", " ", "2000", " ",
      "iteraciones"}], ",", " ", 
    RowBox[{
     RowBox[{
     "sets", " ", "de", " ", "4", " ", "elementos", " ", "y", " ", "\[Eta]"}],
      " ", "=", " ", "3."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", "\"\<Los resultados de la red entrenada son:\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowResults", "[", "feed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ShowInfo", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.659926458268635*^9, 3.659926462420582*^9}, {
  3.659926494755622*^9, 3.65992651798256*^9}}],

Cell[BoxData["\<\"Datos de entrenamiento.\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935709808485*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], 
     RowBox[{"{", "0", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], 
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], 
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], 
     RowBox[{"{", "0", "}"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.659926523336327*^9, 3.659935709809491*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Los resultados de la red sin entrenar son:\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.6599357098108053`*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.624163}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935709811417*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.628092}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.6599357098120003`*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.645496}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.6599357098125677`*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.64807}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.65993570981313*^9}],

Cell[BoxData["\<\"Los resultados de la red entrenada son:\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711649292*^9}],

Cell[BoxData["\<\"{0, 0} \[Rule] {{0.0418888}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711650515*^9}],

Cell[BoxData["\<\"{0, 1} \[Rule] {{0.962252}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711651754*^9}],

Cell[BoxData["\<\"{1, 0} \[Rule] {{0.962347}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711652927*^9}],

Cell[BoxData["\<\"{1, 1} \[Rule] {{0.04012}}\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711654089*^9}],

Cell[BoxData["\<\"Informaci\[OAcute]n del resultado:\"\>"], "Print",
 CellChangeTimes->{3.659926523335422*^9, 3.659935711655306*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.9, 0.36, 0.054], PointSize[0.0055000000000000005`], 
     AbsoluteThickness[1.6], CapForm["Butt"], PointBox[CompressedData["
1:eJw813lYjV3bBvBKEkIIRUhCqGQukrOEkCZJ0oQ0SSpNGnfzbt5zeydshBBC
iEIISZIkIYRK5hCS8O3veK/7ef95j9+z9rrP+1zXvY5DEzZtt9+iICcnV9dP
Tu7///9//+tcLDbeftFG/+pi+g8YNqAqxyupgqyMh28m/dpizFgVE08fW1A+
hrEaangtmTGqjNVRsUd5ub4KY03EvHYauGUAYy2Y+30fn9qfsTbGaZp//qPM
WAcf3beV8P/zZGy0yNaZ+591MWOP1P5pP8bT0KjbeiXxP+vh1sv6RP3/bIDT
pr7Lm5QYG0IxofZN4n+eCW7eWwfD/zwLd6J8k5/1ZTwb96yigjP+8xyoh2Pk
gv88F+FN2PpWkfE8FDjP95f85/lIlvs3fOV/NsKeAxmuv/swNkbKh/Ylx//z
Amg8Mrjm/p8XQqFa8GDYfzaB+RuXHTcVGC+Cdciz/Mj/bArP1bGrZvznxdB2
L41slWcMROuMmJzHmAXo6xqssP1v3Qwz0opeKP23bgb5BMu2S3LMujkkX6vW
hjJmmaP2g4K+/n/rSxCRcvpu9b8rtL4EH+ZE/F3IWM4C37ttW4//ZdYtUNxs
E67FWG4pGodIT/L/MOtL4TImKbkfY7ll6FRf+yWql1lfBodP8e87fzPryxGR
me3vxZi1HGqzhm9r7mHWLXHzVFmbPWOWJVLKlt27/YtZXwGnqcnaZoxZKzDR
Zn1TaTezvhJpq8+9NWTMWonT3nttjvxk1lehY8OUPtqMWavw+/L2P3k/mHUr
6DkXzldjzLLCtYzBx7K+M+uroXD0g20/xqzVEPhItOO7mHVrjEO4xu9vzLo1
tJq+GYQylrNBZ3Cqy+evzLoNLm8o2eXLWM4WGY5K7a+/kGGLfsOGzXVjzLKF
xa6QhKZOcoUtNB/U37JnLGeH9W1Nf2s+M/vtsOGq8YTljFl28BCc0L36idlv
Byz9MXghYzl7RH9puFvykdlvj7tbh7sbMGbZo7YstvzwB2a/PVT2vnmhxVhu
DTQHal+XvGf2r8GjYkWPYYxZa3CC5VOc/o7ZvwbfZuieUGAs5wDFK+PXRL5l
9jsgVk5P8qWD2e+AIROmRfowrnDACsOfn5+/YfavhdzR7V0OjLEWEXLb46vb
mf1roTHlHmcx44q1qBrro1nSxux3RG30kHG6jOEIHXlxzq5WZr8joHHfbzDj
Ckc4BKccYb1m9q/DzeS4pV9fMfvXQXVKnNFmxqx1eDJ0SfSDl8z+dXCISByw
hLGcE45wvzafamH2O+GirsnH8YxZTqic1ndu1gtmvxNM570//us5s389JFOT
7LYwxnqon3bVqHvG7F8P1pPev8aMK9bjguTZ7/3NzH5nLN0Y3H8gYzhDcGzi
hOCnzH5nqKfbmDQ9YfY7Q2P2CodFjOU2YFmO06Z9j5n9G9By84K7ImPWBkhr
85d6NTH7N8CoS2fQrUfMfheY+PmcnMwYLrj/YPuk5EZmvwsO3Zvr8+ohs98F
rIRDgaaM5Vwxa8Le+ZIGZr8r3u38ePbrA2a/Kz5E27SuZFzhClFlcNm+ema/
G45qds3+eZ/Z74ZOZfdlqxiz3PB7pf773XXMfjeM8745+vM9Zr87DunG3TVl
DHeoTJL8zqxl9rvD29R89+O7zH533NARHNVhLOeBc438MQE1ZC0PFGrN7Dh7
h3meBzzGLFPurSZ7eGDFEdEOMGZ5oPTrvQmJt8lSD/xoSR1QWcXkecBCbDKp
D+MWD8R3rvHFLSZ/I859GF0bdZPJ34iVM2+sPHuDyd+Irgj/xg+VTP5G2Cmr
+mgzZm3ERC3Bj7XXmfyNmBJwNSL1GpO/EdHRFm3nrjL5GyEZf3xWawWTvwnX
X21bN4Sx1iZ8Cn66wugKk78JBsp6cu6XmfxN8L8bFph4icnfhLxlZzgHy5n8
TdA9W+p4o4zJ34SmyEWlry4y+ZtwM7Lx6J8LTP5m3Iv4MXEkY63N+BP2UV2v
lMnfDPuhHbGLzzP5m7H/0aeVtueY/M0IPtgW5HaWyd8Mne70Dt8SJn8zfpiH
Hwg+w+RvhqaZZm7EaSbfE++WVp6POsXke6IinfsrqpjJ98TgqBjbnSeZfE+M
/7uueMcJJt8TVZdvqmw9zuTLnhdosd69iMn3xDk1rTTbY0y+Jy7Pj84xPcrk
b0HRbGv3qUeY/C245ef6XrWQyd+CwQnmk78fYvK3oFvspdB4kMnfgvuxCsFn
Cpj8LTjfNtY76wCTvwXD+NkPNu9n8regIOtn4bx9TL4X/llWNfWVMvle2F+7
0OH+HibfC+tb16lIdjP5Xphu+OGLSz6T74UT67nfNXcx+V4o0i3s91jC5Hth
5T4nda6YyfdCwFjuqKW5TL430jf3/d4lZPK9UX1RXyoVMPneiO1dqmzJZ/K9
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
K5kVjvS4NNEfdzInHKZlG3sWOJCl4Zi1duXqYEtycTjqR/8ZVGDC9A/HhPvl
F+sMmf7hGNB35v1uHaZ/OHpczGs1NZj+4XCJ/am/aBDTPwJmEvutzvJM/wg0
HZ0hF/r9IvWPgDR14past2RD2XrZhqEFz8iIwBPbuMgL98m2EfBM4qjV3iB7
RKAj5p7dqwvkwAi0qOzZ/+M4mRUBzUjP0IH7yZwIlIeEz5sgIksjEK79z8Yo
nVwcgTfrX0y1iyVXRODfwH1T/YPJdRFY+dLldJoXuSUCnYMO6xx1JndG4LNb
9PO71mS5nWDHGy78bk5W3Qn9ZFe+1nym/06o5TaY2E5n+u9E6fec9KTxTP+d
uK1xqObScKb/TnxVNbXt7cf034lYpWR39F6g/jsh6CowS+8ks3ZiX0T5giet
ZM5ORFc+yjB8TJbuhNfBd8FZd8nFOxEmuTPty1VyxU54vp/xfsM5ct1O+NcU
dtw9Sm7ZiZDN+xyW7yV37oRplatrFZ8sFwmrlz36dmyyaiQaRm//9DKarBWJ
Ix8yrkcGkQ0j4TJJ7t4YLzIiYdjpPOOGM9lW9vuMIXLhNmSPSBQd2rl+pgXT
PxI561/Zdhkx/SMx61Ry9xV9pn8kSq+K3QXaTP9IvJ1nywsaxfSPxAKnN5J1
Kkz/SDSFHY5eJs/0j8TRss+LTH+UUv9I2Fstem76ntwZiV2XZm+wbCHLRcGq
+uBJ54dk1SjULN3zILSarBWFUjPfcskVsmEUPNx2u9wsISMK9YsmFfw+QraN
QsfQFSzjvWSPKPAWlT6NE5ADo2CowN9Tm0ZmRaFuZsiJSXFkThT2voj8lBRC
lkahvZ/D4g++5OIomE21iNvgTq6IQm+VYXq9A7kuCoXNR4ztVjL9ozB5+DfP
R4uZ/lFo/Kny0nMu0z8aXu8usX5NY/pHQ7k9T02oxfSPRvBw1a3zRzL9o6Gp
5WvbMpDpHw2R4+PsHHmmfzQ6ghM/Wfw8T/2jwTGInyv3kRwYDae4d1OuviKz
oqGY3Jya2kTmRKNBizViTS1ZGo27s1RzJlaSi6NhEfGiuPsCuSIaI/u5za0/
Sa6LhvXGcQ9PHiS3RCNQ88ky7i5yZzS01MMWh3HJcjEYtlgp2C2VrBoDpdq6
nBUxZK0Y8MbYWc7fQTaMQdNT4xVTfMmIgdPTMFMNd7JtDPymG9SrrGX6x2BI
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
H2uKXxZdqyWr8bHHSjlk8U2yOh+1BwZZVV4ia/Ixt+/rqXZnyVp8LA3LUmgv
IuvwEZ466U5CAVmXj5qpjyKm5JP1+AhIeinXwCcb8qF5R+TEziDP4aNQzSXU
IpFsJOs364iVchTZhC/73pQbHgSTwcenpyPlD/uRLfiwNE+8Hb+JbMnHyJeD
J3o6k634ePkgs4+1PdmWD+s+rzwWryQ78LHjr+JMI3OyEx8JD//4Gi0gu/DR
v6tNHrPIHnyo9L75ZD2N7Cl73r7FU7Zok334qEwy3pcwmuzPh8LQ2WsODyMH
ys7PMW/2gwHkENn+Nx+NlPqQI/i47b/zDOuHO91/Pva3rdLo84bM4mPB3VMc
/iNyEh+Dj0ztN6uKzOZD9bid3/NSciYf83e+OSw+Qubw4fXo1nGPPLKAD0R+
8p2XQRbz4VweWq0RTc7nI9dDdGnANrKUjwr7wzP7u5EL+LDzGTtihA25UDZP
7QxHA5CL+JAGSVsdZpKLZfMNm3aCrU0ukZ3X0uH7bw8nl/IhOrnx5Ki+5HI+
rOSMbwT/cKP7z0fWrab6J2/IlXwY7sm/ZfOYXMXH9g+/eferyTV83ClO0/Eo
J9fxUbC8a+vv4+QGPpJn911/YC+5SXaf2qRP13HJzXxEJd98rZ5IbuGj5FLO
xvYQcqtsvomGSyu8yB18eLT8iD3kRP7AR/fVlf/EK8mdfKRUHD+Xa0Lu4uP4
x4vC/Qbkbtl8pJOzLmiRe2XvY345q3kYWU6AKk0f9sC+ZEUB0qdMDFj205Xu
vwAVjUqGWW/JKgJ8eWt+5cVTsqoAhxaOH2RaS1YTQI/7e0BhBVldAJafzdGx
Z8iaAnx8cKR5z0GylgANc0/xp4vJOgJcmTLx6vV0sq4ACWYNjt4xZD0BpB9P
LhsZSDYUoNakNKFuE3mOADmlff8I15KNBDCZf+uwlyXZRADlYrNQ84VkCNAz
uG7dVAOyhQAGA1+bjZlAthTApkdusroa2UqAuMM3fozvR7YVQGPqq0Ozelzo
/gtQdk5zqu1HspPsfVi2gREtZBcBxqZs237sAdlDgL/bIjTe3iR7CnDBNX3j
zItkHwFe369bkHSc7C/A17As8UspOVAANYWRASsE5BAB/Ac0nChLJUcI8OGV
hbVRFDlaAJ2QX4uvBJBZAuSOFIXbbiInCXB4W33H+7VktgAu5jtTuSvImQKU
uPksN1tE5giw0pej+duQLBAg9WpXz2Udslj2/Ww41pipTs4XoHp38wFPFbJU
Nr+F1x2XyZELBOgaUfR6ZtcGuv8ChIz4YTqlg1wkQOSAYa6Tm8nFAhxIT5g1
o45cIoDcvadnzCrJpQK0864/dC0llwtg8a0zM7GIXCFAxmq92tNScqXs+x9v
k/1eQK4SoK59yTX9NHKNAAflldx3xpDrBGjM3re+NojcIICz9ezDel7kJtn3
mtBhInAmN8vO4/7fIX1tyC0CnJ9cOSJuCblVgCS+aImCEblDdt6zWrOz9cgf
BLAcMP3jxAnkTgFSPnavuTaC3CVAmMf7Ut8B5G7Z/Ys8OXT0P2e6/wLsvS3v
8OAbWU6IefNOhAo7yIpCXGvP8fd4RlYWIn0i12BOPVlFCM+Fx06p3iKrClHl
3f7+exlZTYgTp9Y/eF1MVhcisHGa25ODZE0h/uplJzzOI2sJEZBxc97LHLKO
ECv1JgV9SSLrCpEj6K87IJKsJ8SbnS/tpm8nGwpxrFC3zcGTPEcI7jufppT1
ZCMhnD8aa1+1JpsIsXeq2YU+FmQIsbx6psDamGwhhBG/5sg+A7KlEDW3X3T2
TiRbCVE4ZrmHhwbZVvb81Pef7gwmOwiha3Gdv1iR7CQ7v6P3l5b9Wk/3Xwix
5pRe089kDyE+f2o5Xt1K9hRik91Ue7cnZB/ZfqP5Lb/ukf2FYC2zttl9gxwo
RGXJZZFlGTlEiFuL2o7/LiZHCFGkND3z3CFytBDX0/pO3ZlPZgmhz/oRtYRH
ThJCWJMRPYJNZgvxdIu79ucYcqYQrmajttTtIHOE2Ge6xeSCL1kgxJGh/aRH
3MliIS4a3Ezdt5acL8Ses+HvpavIUiHMXXuvHTYjFwjh4g6lc/PJhUIc9Fx4
/I4+uUiI2MDOkx0TycVC1N/dpjRoNLlEiNM9NYVGquRSIfKFs3K2KpHLhShd
UXvqYK8T3X8hFpU/UX7zlVwpxM2I3Zkz3pKrhJj8wmtu3AtyjRAbVHm/Hz4k
1wmh2pz0aHYNuUH2PZ44eVV8jdwkhFts1mnFC+RmWf8LB/aHnyS3CDF0bkL6
l4PkVtn90bi+KTif3CFEe/0AnR4e+YMQD//0u8VOI3cK8clxh8U4FrlLCNGR
IcKLYeRuITIvHznluo3cK8STler8fp5kORGELxbOKnUmK4rAafqbut2OrCyC
stXaLH1LsooI83pMFn41JauKILfoUvqluWQ1EW7+bA/J0SOrizA1teGr90Sy
pgiRp478WTaarCUCS8TP1htK1hFBX1q1R12ZrCtCcjB7ysB/6+j+i/C9eYy2
4g+yoQhTqhtS+3wkzxEhbuZg+/6tZCMR/PvpRY54SjYRQWPGrl9T6skQ4bHf
/du4TbYQ4dXq1a3uFWRLEfbri8yTz5OtRDAYbvK8+ATZVoRTRY+KXx0kO4gw
d/GAktG7yU4iVIljXjoJyC4iNMi3ztqdQfYQIX9G9743CWRP2fnOi9E1iiT7
iHAu0rQiO4jsL0LRwSGb3/uQA0XgC2sGWHuQQ0QYbbf+1Ll15AgR0LPPdpIN
OVqEmoq8V5JlZJYI8x8u3qhmSk4SwWuD8KZgLpktgqfbYZUx+uRM2ftcS9M/
rEPmyM5/gdNEY02yQIT78+Z11A0ni0XoeG4dFjCQnC/CILmHt4b2IUtFKFDo
8+hijyPdfxH+Phu9x/cruVCE5Speo8a9IxeJcCRm7qKml+RiEVyyXvYXPyaX
iBDfdTvc9T65VAT2lbXxurfJ5SIcNfum9auCXCHC4v7qdvdKyZUiPGiAyrFi
cpUIX1O+WGUWkmtk5zvm7KAdUnKdCEl5Y1e4i8kNsnzVyl+2HHKTCM1xlqMt
2eRmEdwf2R20YJFbZM97kyVcFkFuFcFy7am21YHkDhHy+OEcZx/yBxF4Dfs5
/h7kThHS5HpbEp3IXSIEH7OPltqSu0WYMyDG9ZoluVeEiR3r4t6CLJeLq/k3
m0cYkxVzESh/JnD5TLJyLry8B82LnUpWycX0rJopFyeQVXPxXPARvzXIarmQ
79kRbTaMrJ6Ln6m+DzMHkDVzEW3zfNkzBbJWLk7s7rgz6/dauv+54H0pcM/6
RtbNxchvc/98eE/Wy4Whb+Veu1ayYS6cDOPMy5rJc3KxfOaulqkPyUa5yFy3
JnT3XbJJLkazO36PuElGLoLF+7bzL5MtctFjcefOiPNky1y46pYO3H2SbJWL
wacrpk0tJNvKPG6JzkUp2SEXH/wOfLORkJ1yoWK/SvCOS3bJhabpUfn0dLJH
LqrM5843SCR75qJ7uLfhoyiyTy70/1zpSAoh++eiz+MbG+ZvIwfmgqOsmPxp
CzkkFzu2DvQ46kaOyMUfx+AOv3Xk6FyMz27QMLQls3Ix1vjB51+W5KRcHHym
5lVlRmbnwsBxacSuBeTMXHhXj9DeMZvMycWXQybuNnpkQS6yhaHTDSeRxbL9
ofEJI8aR82XztJ/s8W8kWZoLXbcZFR+HkAtk7/PWf0+LMrkwFw+cSn48kicX
5eLKhJbKBz0OdP9l87lyT7HhG7kkF+Ii79NNH8iluYhw4d5+2UYuz4XfrIXL
Pj8nV+RiZZSTjnwTuTIXCl4v3UfdJ1fl4vPv+q6Z1eSaXPQfPeOF7XVynez5
vr2jQ8rJDbl477SsYNdZclMu2tTGht86QW7Oxbx4Yc7Pw+QW2frM22+n7yO3
5mKYZ2O8Zx65IxexP1+s2ccnf8jFeu9BLq8yyZ25OHQ9XTQlhdyVi6yj7H+B
ceTuXISYmfAvR5B7c3Ha4MVq1WCynBhi3snpXlvJimLYy3fqVniSlcV4FfXG
bJwbWUUMdb+Xwax1ZFUxRgn0S9ttyWpiFI3RGmy3kqwuhlXY0KArS8iaYpz3
cns2cxFZS4w9P7xtCueRdcQICeRf1zYk64rhtX7lvH1TyXpimG/tOTBxItlQ
jI9ZI/of1STPEWNa/dBNc0aSjcRo8PM9dm0I2UQMz8N5Lx36kyFG+ccp8u8V
yBZi5JfkKiX3rqH7L4ZzTMgn7R9kKzH8a63OVn4m24pRpX9mnd9bsoMYaaNN
64e/JjuJ8bMfe8LVZrKLGEvXzTAPbiR7yPLsGw2n1JE9xXgyeeK7F7fJPmIc
eH7FL/862V82Hxfnky6XyIFiDF9bUKJ1nhwihsKqNeEdxeQIMd6lanWdOUqO
FmOW+u0piQVklmy9ctAQxz3kJDEsh5w5pCcms8Wonhb/XolHzhRjcfeSJ60Z
ZI4Y8XJ3tt9MJgtk89/+tvBYHFksht2QsATBTnK+GErmq36xdpClYoz8u2xA
0DZygRiOVStPe3qTC8UIPLnw04aN5CIxbi5TKHPcQC4W48S+9BFr15JLxAiz
ruxxtCGXiuFqt9/bZQW5XIxP48es37KEXCFGRL5uTdAicqUYx1WrLsXPJ1eJ
kT61Z5pwJrlGjHFfr6kWTSfXibHk3lT/m5PIDWJcjzRe0Dqe3CRGyd9/4X1H
k5vFmHgqW3uaGrlFNs8ZPfPsB5NbxRi83vl0jDK5Q4xTVtXcIgXyBzEmbfKp
f95rT/dfjKOTHYPUfpK7xMh0Kt26+gu5W/b+r85dTntP7hUj5VG09+02spwE
OQFGm1VayIoS/P0z+qT9E7KyBHE/nSzzG8gqEvx5PVXvbS1ZVYIB7lXrjG+T
1SQYOjy4KvM6WV2CuhLvqNeXyJoSZP77sG1RKVlLgsvFlrvzTpN1JOhNrFT6
XUTWlUBhxvHDbofJehKccLWPubGPbCjB2+NKyTPyyXMkuHBsfHm+iGwkwfS7
38cP4pJNJNgX0HqclUGGBA9rV2z+mUy2kODQgNRFQSyypez5GnILPkWSrSS4
Vz3GMSCUbCv7/eUlOV+2kx0kuLOl9VW4H9lJgvrf/tbyW8guErgk2dzLcid7
SOB7U27zWGeypwTZK7qVih3IPhKctisuXWpD9pc97+nB0OcryIESdEucFkZa
kEMkUO1c2U9jMTlCgprP8o8uGpOjZeeztm+h+xwyS4J5yS/C+80gJ0kwKHms
xempZLYEk3qtB3jokDMluK6vVKU6nsyRwOLHo8hKDbJAgpO3NmhFqZHFEpge
mn5uzhByvgTvdFqNv/QnS2X7N+kcKVYkF8jOTzFbfsc/O7r/EvycfwNGPeQi
CfILAz3lvpOLZf3ijf3ufCaXSJDhe8dG8o5cKkFITMMwvzZyuQRZNn1PLWoh
V0iw7bWqrtpTcqUE7keLQj8+JFdJIGVxcm/XkWskCD0allF4h1wnwea6MTbp
N8kNEoh7TVsCrpKbJCjJ3WfiWE5ulmDvln6bcJ7cIjuvhHnW+qfJrRIYePz8
q3mc3CHBo6tqwUMKyR8kKL+44aDiAXKn7Hs4skvUu5vcJbtf8w8t+Skmd0vw
0t7maBef3CtBi/62qq5sslweDBY27fqZRlbMw8jpW7X/JJGV81DaoeDcl0VW
ycN9USxUo8iqebDIuvJgbBhZLQ9LHY8MNQgiq+fB5NiEbviTNfNgFKya7OhN
1sqDWpn7uYBNZJ08NJT/TktzJevm4WR9/Z9DTmS9PPB2Phxyaw3ZMA8zVv+4
9NaaPCcPm/tOUxqykmyUh1M7vNvnLSWb5MGWddhlI8jIw40pbV7ZC8kWeZCP
GNvn8jyyZR6mZNvM6JxJtpLt50e/1dEn2+ah+eLhGS66ZIc81Jo2/hNOJDvl
YZXbEKf6cWSXPOg7u8wbOprskYfJO6rE9iPInnm42u4RI1Il+8j2f5zzqnkg
2T8PP8+tvTGpHzkwD1W+jTpBCuSQPFSOq/l7+Y8t3f88FL9YbTfkFzk6D3sL
QkZv6iKz8iC02+B0/jM5KQ+KJeP6D3lPZuchhvVsmm87OTMPjralZTf+r6W6
j+vxbP8AniniLnInC0VTI2opRc1KH5buWBGKRqsQohB5aJie3AlREcv3evjG
oqzQKoRQk1RIKumWh/xqZKsWKqHV7/rj8+f7dV3neZ3H8TmP1/WCTlTyVT+4
bPaUTlbhTamHaWwdnaJC74BFXa+raVEFsw2DbDzv06kq+LeoHuSX02kqJLra
1pqW0BkqPDbQcEoqorNU+HTLWrPfNTpbha2HuyaG5dN5Sv179mS9yqXzVWje
NHS/33m6QAWD7nuFj36lC1Uo29U9b9FpuliF9EllUx6coEtVKGzbuW6BRN9V
wWT7vI7qFLpSBVPryAqfZLpGhYhZC98/T6DrVHBLGrh+7QH6iQqbLzV91RlL
Nyj5DrB2iImmm1SoirbZr7+bblahrXHKuNM/0i0qrEqM6J2+lW5XIU0MNK4K
pTtUeFZq/VNwCN2tQsNuO6OBQXSPCnaVRd1pK2kNAW/DLIfN9qc1BTQXl618
tZTWFhB9o73twGJaR4CmxsfsKQtpPQEWhc4Z9R70cAGXHxpXx86hDQXYZb+Z
bDebNhLQs3jUtUbQJgJi1nSHH3WkzQQs1m9bPseBNhcweIz/tj5b2lJAeX12
3qXJtLWAOqu5ozdb0HYClsceybCaQDsI6KvvWto6jnYUMCvnufW5MTQElPz7
qvmmUbSLgID495g2gnYT4GajFf7PMNpdwNyj3ndLdGlPAX/dWeZ4eBDtJeD+
6vgSfy3aR8D1sB/WTu5H+wrQ64p3/ezjfM6/gBWfIv8484YOFCC/OpDl/ZoO
EnAv+VSK1gs6REBhcenpy3V0qABXo3fVmyrpLQLumHxpbFVKhyvnt1sR0XaD
3qXknZT9PucSHSlgx3cjY3aep/co610yxril03ECLtqE3DZU0/HK+ZK27Wg9
Ricq+2XV25UcopMF5CXlvDsZS6cIGKFnkBezmxYFeF0aGxa0jU4VsLXqzVcL
NtBpSv6rzr5wWk1nCPjbfPsBKz86S0B33DZz08V0toBn6ocXRs+j8wSstiuy
NnSl8wW0Xwg6ZjiDLhDQ9HVvo9E0ulDAsfCLI760oosFJJaVWtiMp0sFTP5i
o8nMMfRdAad1X77xGkFXKufNDZFChtA1AsRyF5O4AXSdcl/EnO3pvfM4/0p/
e3tSy7voBgGTFq0//qaNbhJwKHq+n9ErulnA7x/ftMx9TrcICMw8NeunR3S7
gA39r/vm3qc7BFS0Jjq03qa7lXwqtlVPKqR7BLyIKp8Ukk9riBjg/fqb37Jp
TRFtA201P2bQ2iLGlg6Kcj1B64g4ZFV1/thxWk9EpOO7g38m0cNFfPt9reGs
/bShiJfzXnlI0bSRiJluyZN6dtAmItbf88jyC6PNRBwtiq0sDqbNRZgE5CVb
BdKWIiZMn9cl+NLWImJsK97qeNN2ItIis/dGedAOIlx/Ccv5MJt2FFESlBK6
dQYNEYkvT9zomEa7iPhXuIG0fTLtJkKrYMeA3gm0uwi7w8s+7DWhPUWEGrqE
GYykvURMzfh90+lhtI8It5o1b6cPpn1FOK0ueVv1GR0g4uKysNANnzw4/0p9
TVprdTvoIBEJfp8/Pt9Ch4hwXPxtkfcfdKgIl6gJRn1P6S0i0q+tbM6spcNF
vB2iMvW9T+9S8hU23BlaSkeKGJy192lJIb1HxLhTB5dEXabjRHw/yMLeOYeO
FzF9i84OjUw6UURZSoPxrV/oZBE/OPuYHBTpFBG7Z42P8DlKiyKuHOyzn3CI
ThWhPUpw+xBLp4kY1frbuYoIOkPETwZ9a9LD6Szl/p1x3hyzic4Wcbx4yp0V
6+g8EYV7jofOXknni+jWtg+w8KULRPhvqPx5uDddKOJEhaVBv3l0sYgVTga1
7a50qYimW151jc70XRGH1+aPfOxAV4qYbTw0pdqGrlHyuT1xQeUkuk7EE8f6
WZWm9BOl3pnd66qN6AYR56KW3P6fAd2k3NejD7wbh9DNyvc/YHj7QLpFRP6w
aA2NfnS7CO9xYYb6H905/yIuLOj4fuI7ulvE+LRXv89qoXtETPtkvcD/D1pD
Uv5/Fz+LeEZrSrCL8Ht44hGtLWFOpv7t25W0joS3tYUP28toPQmewxf1Gd2k
h0twdr08072ANpSgNaZJtfsCbSRh9KgS7bxztIkE15hF+1rSaTMJm4OjR5mf
oM0lLM2ce2W1iraUkN9wanXGEdpagmlIgnFrPG0noXaj5lO7WNpBQsfd/r9E
RNCOEtzGHVp/L5yGhCHlp6aP2Uy7SAiom6e9OZh2k9BpmFBTGki7S8jV3SCN
86M9JRxq6QiIWEJ7SdCWrYyfe9I+Sr1XJ1TOnEv7SvA50LY9/Vs6QMLe/kf+
redEByr9uDle3jmNDpLQo3/N8M/JdIiEdS/XRS6bSIdKcHjgWn1/HL1FWT90
7dD/GNHhErJ/+mtKkQG9S4KL6vU3M4bSkRJ+j4o0v65N75Gg01bRhc/oOKU+
u860kk/fcf4lxLsY2MzvpBMlTD618PjjNjpZwrQtVfVBzXSKBKvAq10fXtCi
hMVXpjYfrKdTJbR4BJ8ze0inSYj+797/XK+gMyS89L7029JSOktCICb+9aGI
zpZgv0D3rXCVzpPQZXy0GBfofAmrb74LaD5HF0jIaPrh1uEMulDp55lB7c4n
6WIJEwusnv8t0KUSnNwGJJ08St9V7s+H8v4+CXSlhGPd+VP19tE1Eta26H55
J5quk3CjU7sybhf9RMKq83/azdlGN0jIsehcoBNKN0loeBf8ZdVaulmCSiv5
rGol3SLBqyq3edUPdLuEUCf9h7ZL6A4J1qpPoZoL6G4JSZmXrjyaS/dI0D9x
JPusC60ho2fEU8/YGbSmjHj9xuPLHWhtGcMGdO1znkLryKi/tWasiSWtJ+NJ
wgGf/uPp4TJKtS7avh5LG8qosnQ6/2AkbSTjWnB4WYE+bSKjeV9h5K+6tJkM
1dmN1aqBtLmMrUtf3DjYj7aUcT50s0vMp7mcfxmDLaL8d3bSdjKeGa8fuu1v
2kHG1Kk/Lwx7TTvKMMpbPiGskYay3xTr+K1PaRcZWtKaiB2PaDdlP5sNfVEP
aHcZ/aMyB8ffoT1lLF8Xp065RXvJGGu0sSD9Bu0jo3PYHf/Ll2lfGWb6g+Lu
5dIBMm7a/GzbdJYOlPFNWVPAP+l0kIyru1YMGXmSDpExflr0dHuRDlX6aXap
cckxeouM0QVbtXcm0uHK+XJs01P307tkePWtuV66h46U8f7xfvd3u+k9MgIL
DDxNfqTjZAT5xNyeH0bHy5iTOv+3qPV0oozrhe//dXENnSxjhcnHhy3L6RQZ
G/1qdcf70qKMLxbq5ixfTKfKKNT+okjtSafJqC1O/rphLp0h40RPy0jT2XSW
jFXfnw8IcqazZRRfWKGT/TWdp+RplDD6oy2dL8Ol9Fq8qxVdIKPd5Ee/o+Z0
oYzPr7onvBxHF8s4tuSW8XRjulTGwheh2omf03dlbA555tE8jK6UkTZVbpml
Q9fIGJM6s1E9gK6TMWTqMus+DfqJjLiTu6sCPs3h/MuwvILS4k66SUbZRns9
i3a6WUZN3YeMI3/SLUq/J5kk9TbR7TLcr3x7O/g53aG8/6F3Tv3/6G5l/x9b
P/eooXuUfBszJxdV0BpqnOp9lGBfRmuqseZXPfvsm7S2Gv2ed5paXKd11KjP
NPfOyKf11DC0/65sQi49XI3uqxoRZ87ShmrU7Wvd8lUGbaRGSf9LZ3JP0iZq
7JP7GzlKtJka7c93lJf8TJurMdPvVu6iw7SlGsHX42v/L562ViMhd6fNlr20
nRr+/zjdHBhNO6hhGhS5X9pFOyrPy9v/O3U7DTVaNWfk3d80x/n/AZ5Qzk8=

      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Costo\"", TraditionalForm], None}, {
     FormBox["\"Iteraci\[OAcute]n\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{},
  PlotLabel->FormBox[
   "\"Valores de la funci\[OAcute]n de costo\"", TraditionalForm],
  PlotRange->{{0, 2000.}, {0, 0.134195295364816}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.659926523336327*^9, 3.6599357117533484`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Aplicaci\[OAcute]n: Determinar el idioma de un texto", "Subchapter",
 CellChangeTimes->{{3.6599328279735928`*^9, 3.659932835781384*^9}}],

Cell["\<\
El objetivo de esta aplicaci\[OAcute]n es determinar el idioma de una cadena \
de texto. Cada idioma posee una distribuci\[OAcute]n caracter\[IAcute]stica \
de la frecuencia de aparici\[OAcute]n de cada uno de sus caracteres. \
Aprovechando este tipo de distribuci\[OAcute]n se puede entrenar una red \
neuronal.\
\>", "Text",
 CellChangeTimes->{{3.659937163460154*^9, 3.659937278867896*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GenLangDist", "[", "lang_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "joineddict", ",", "diclen", ",", "dictcounts", ",", "dictfrec"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"joineddict", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"DictionaryLookup", "[", 
         RowBox[{"{", 
          RowBox[{"lang", ",", "All"}], "}"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"diclen", "=", 
       RowBox[{"StringLength", "[", "joineddict", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dictcounts", "=", 
       RowBox[{"CharacterCounts", "[", "joineddict", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dictfrec", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"dictcounts", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "/", "diclen"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Alphabet", "[", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"dictfrec", ",", 
        RowBox[{"Ticks", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Thread", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{"i", ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"Length", "[", 
                   RowBox[{"CharacterRange", "[", 
                    RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], "]"}]}], 
                 "}"}]}], "]"}], ",", 
              RowBox[{"CharacterRange", "[", 
               RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}], "}"}], "]"}],
            ",", "Automatic", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
        RowBox[{"AxesLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Letra\>\"", ",", "\"\<Frecuencia\>\""}], "}"}]}], ",", 
        
        RowBox[{"BaseStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"FontSize", "\[Rule]", "13"}], "}"}]}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "lang"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"GenLangDist", "[", "\"\<Spanish\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"GenLangDist", "[", "\"\<English\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"GenLangDist", "[", "\"\<French\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.659937032971423*^9, 3.6599371215720577`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDwA2IQDQEf7I/9yWXe0H/YHirgcNf3esSeL5OgfA4HI1Z2
+Wlya6B8AYdMMd8AjyVLoXwRh/mCXk1TJu2A8iUclneUCbWltkH5Mg5XWDbI
v5wyEcpXcOgS/ns9yq8ZyldyWDrRrLu4YjOUr+Kgfff/wnyPKihfzeGgVdNe
Lz9uKF/D4ZPiVQ4eoxVQvpbDImPdw6IH50P5Og7iTzhT7r1cD+XrOTz9smHf
1fVboXwDBzuzIoaNi6ZD+YYOE7+7Wa5dnwflGznozU4Wlb2wHco3dnj7PJ8/
OxHmXxOH2305ZZWFq6F8UwcOl48xEwtg9ps5sKy41tk2swXKN3fwzC48OT99
mx2Eb+GwcumDwn9NkVB5S4fV7nquO9QjoHwrh2yp/Yd276y3h8UPAypwQOVy
oPEF0PgiaHwJNL4MGl8Bja+ExldB46uh8TXQ+FpofB00vh4a3wCNb4jGN0Lj
G6PxTdD4pmh8MzS+ORrfAo1vica3QuOP5p/Bmn8APB7nyA==
    "], {{{}, {}, {}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], LineBox[{27, 1}],
        LineBox[{28, 2}], LineBox[{29, 3}], LineBox[{30, 4}], 
       LineBox[{31, 5}], LineBox[{32, 6}], LineBox[{33, 7}], LineBox[{34, 8}],
        LineBox[{35, 9}], LineBox[{36, 10}], LineBox[{37, 11}], 
       LineBox[{38, 12}], LineBox[{39, 13}], LineBox[{40, 14}], 
       LineBox[{41, 15}], LineBox[{42, 16}], LineBox[{43, 17}], 
       LineBox[{44, 18}], LineBox[{45, 19}], LineBox[{46, 20}], 
       LineBox[{47, 21}], LineBox[{48, 22}], LineBox[{49, 23}], 
       LineBox[{50, 24}], LineBox[{51, 25}], LineBox[{52, 26}]}}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       StyleBox[
        PointBox[{53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
         68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78}],
        FontSize->13]}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Letra\"", TraditionalForm], 
    FormBox["\"Frecuencia\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 13},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"Spanish\"", TraditionalForm],
  PlotRange->{{0., 26.}, {0, 0.1528224961038857}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{{1, 
      FormBox["\"a\"", TraditionalForm]}, {2, 
      FormBox["\"b\"", TraditionalForm]}, {3, 
      FormBox["\"c\"", TraditionalForm]}, {4, 
      FormBox["\"d\"", TraditionalForm]}, {5, 
      FormBox["\"e\"", TraditionalForm]}, {6, 
      FormBox["\"f\"", TraditionalForm]}, {7, 
      FormBox["\"g\"", TraditionalForm]}, {8, 
      FormBox["\"h\"", TraditionalForm]}, {9, 
      FormBox["\"i\"", TraditionalForm]}, {10, 
      FormBox["\"j\"", TraditionalForm]}, {11, 
      FormBox["\"k\"", TraditionalForm]}, {12, 
      FormBox["\"l\"", TraditionalForm]}, {13, 
      FormBox["\"m\"", TraditionalForm]}, {14, 
      FormBox["\"n\"", TraditionalForm]}, {15, 
      FormBox["\"o\"", TraditionalForm]}, {16, 
      FormBox["\"p\"", TraditionalForm]}, {17, 
      FormBox["\"q\"", TraditionalForm]}, {18, 
      FormBox["\"r\"", TraditionalForm]}, {19, 
      FormBox["\"s\"", TraditionalForm]}, {20, 
      FormBox["\"t\"", TraditionalForm]}, {21, 
      FormBox["\"u\"", TraditionalForm]}, {22, 
      FormBox["\"v\"", TraditionalForm]}, {23, 
      FormBox["\"w\"", TraditionalForm]}, {24, 
      FormBox["\"x\"", TraditionalForm]}, {25, 
      FormBox["\"y\"", TraditionalForm]}, {26, 
      FormBox["\"z\"", TraditionalForm]}}, Automatic}]], "Output",
 CellChangeTimes->{{3.6599371063075666`*^9, 3.659937122825492*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJzt080rwwEYB/BfOKwUO4zMpma01jaz99moPe0gSbJRZJai5UZqlFwYO3Cx
xVpIWS4ieX+5IMoKObjQhuTtgNRom+KCPDvs+QscPPX09HnqOT1981s6rI4U
hmGqv/tn/lbEJPAGrSNbqyZcwEOsmWvPG0WzQGo/Cx88zaDZkB3qrS/PTpgD
m8zT3RtvG50D18fdV7HPYTQfdNrz8OXeFFoA4lBehbnMjxZCrSVYd566gS6E
hsesoObehhZB+4Q34yLqQoshwJa93pzMoSXg3ilyLfgm0DKQtPofzOoVtBxm
43FLF2sRrQDfae2hLTKJVsKH98i4PG5Hq8BZkOYfcybu1fDex4p7outoDSh6
h7jF4SW0FrjpUDoenUbrIPPWzumpHETrQZr7sl8V6keXQKxpfmDt2YE2wG4H
r7G5xoM2QlvAXO9zd5oS/2GSC5LJImYTc4hziPnEAmIhcSGxiFhMLCGWEcuJ
FcRKYhWxmlhDrCXWEeuJS4gNxEbi//z81fx8Afwf8IY=
    "], {{{}, {}, {}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], LineBox[{27, 1}],
        LineBox[{28, 2}], LineBox[{29, 3}], LineBox[{30, 4}], 
       LineBox[{31, 5}], LineBox[{32, 6}], LineBox[{33, 7}], LineBox[{34, 8}],
        LineBox[{35, 9}], LineBox[{36, 10}], LineBox[{37, 11}], 
       LineBox[{38, 12}], LineBox[{39, 13}], LineBox[{40, 14}], 
       LineBox[{41, 15}], LineBox[{42, 16}], LineBox[{43, 17}], 
       LineBox[{44, 18}], LineBox[{45, 19}], LineBox[{46, 20}], 
       LineBox[{47, 21}], LineBox[{48, 22}], LineBox[{49, 23}], 
       LineBox[{50, 24}], LineBox[{51, 25}], LineBox[{52, 26}]}}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       StyleBox[
        PointBox[{53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
         68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78}],
        FontSize->13]}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Letra\"", TraditionalForm], 
    FormBox["\"Frecuencia\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 13},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"English\"", TraditionalForm],
  PlotRange->{{0., 26.}, {0, 0.11370771469410355`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{{1, 
      FormBox["\"a\"", TraditionalForm]}, {2, 
      FormBox["\"b\"", TraditionalForm]}, {3, 
      FormBox["\"c\"", TraditionalForm]}, {4, 
      FormBox["\"d\"", TraditionalForm]}, {5, 
      FormBox["\"e\"", TraditionalForm]}, {6, 
      FormBox["\"f\"", TraditionalForm]}, {7, 
      FormBox["\"g\"", TraditionalForm]}, {8, 
      FormBox["\"h\"", TraditionalForm]}, {9, 
      FormBox["\"i\"", TraditionalForm]}, {10, 
      FormBox["\"j\"", TraditionalForm]}, {11, 
      FormBox["\"k\"", TraditionalForm]}, {12, 
      FormBox["\"l\"", TraditionalForm]}, {13, 
      FormBox["\"m\"", TraditionalForm]}, {14, 
      FormBox["\"n\"", TraditionalForm]}, {15, 
      FormBox["\"o\"", TraditionalForm]}, {16, 
      FormBox["\"p\"", TraditionalForm]}, {17, 
      FormBox["\"q\"", TraditionalForm]}, {18, 
      FormBox["\"r\"", TraditionalForm]}, {19, 
      FormBox["\"s\"", TraditionalForm]}, {20, 
      FormBox["\"t\"", TraditionalForm]}, {21, 
      FormBox["\"u\"", TraditionalForm]}, {22, 
      FormBox["\"v\"", TraditionalForm]}, {23, 
      FormBox["\"w\"", TraditionalForm]}, {24, 
      FormBox["\"x\"", TraditionalForm]}, {25, 
      FormBox["\"y\"", TraditionalForm]}, {26, 
      FormBox["\"z\"", TraditionalForm]}}, Automatic}]], "Output",
 CellChangeTimes->{{3.6599371063075666`*^9, 3.659937123554373*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJzt071LQgEQAHBr6AsHKQcHBxUxMTFLnz5F8MKCyChoCoQiJcWiGqJaM15J
oNQSoVBEU0sNfRtFvIJKaKhJMLCgpCGkL+hbqOgcur+goYPj+N103HFyd19L
Z75AIGj6yu/6E3f2QF9vYJdds2MDwsUpLs6Po4sgWiNPe4XzaBG4Xkb51edp
tBjO4pkbPraDloBvzFYSYENoKRxcG5rzHJNoGdTG2rqzDIdWgOc+rNmY2EQr
Yao3HVyUtKFVEOF6Go8bWLQahrfD55Hn3DwaYJzZda8ygtYCw4sc7vgKWgf1
H8pbrnQJrYeCVlFCUxFFV8HpQ+Zi1tOProbXypmjR3MMbYCOQ39objC3HyMs
1Pn3r1TLaAZST4Nb/GVuHhO4LsoaLb4g2gyugUKxTShBs3CyOfSWKO9CW8Dl
lHGmPS/aCu/JqLM9OWLP3UfwO+A3i4hFxGJiCbGUWEasIFYSq4jVxBpiLbGO
WE9cRVxNbCA2EjPEJmIzMUtsIbYS///PX/2fT0iG8KY=
    "], {{{}, {}, {}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], LineBox[{27, 1}],
        LineBox[{28, 2}], LineBox[{29, 3}], LineBox[{30, 4}], 
       LineBox[{31, 5}], LineBox[{32, 6}], LineBox[{33, 7}], LineBox[{34, 8}],
        LineBox[{35, 9}], LineBox[{36, 10}], LineBox[{37, 11}], 
       LineBox[{38, 12}], LineBox[{39, 13}], LineBox[{40, 14}], 
       LineBox[{41, 15}], LineBox[{42, 16}], LineBox[{43, 17}], 
       LineBox[{44, 18}], LineBox[{45, 19}], LineBox[{46, 20}], 
       LineBox[{47, 21}], LineBox[{48, 22}], LineBox[{49, 23}], 
       LineBox[{50, 24}], LineBox[{51, 25}], LineBox[{52, 26}]}}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       StyleBox[
        PointBox[{53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
         68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78}],
        FontSize->13]}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Letra\"", TraditionalForm], 
    FormBox["\"Frecuencia\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 13},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"French\"", TraditionalForm],
  PlotRange->{{0., 26.}, {0, 0.11611568460447279`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{{1, 
      FormBox["\"a\"", TraditionalForm]}, {2, 
      FormBox["\"b\"", TraditionalForm]}, {3, 
      FormBox["\"c\"", TraditionalForm]}, {4, 
      FormBox["\"d\"", TraditionalForm]}, {5, 
      FormBox["\"e\"", TraditionalForm]}, {6, 
      FormBox["\"f\"", TraditionalForm]}, {7, 
      FormBox["\"g\"", TraditionalForm]}, {8, 
      FormBox["\"h\"", TraditionalForm]}, {9, 
      FormBox["\"i\"", TraditionalForm]}, {10, 
      FormBox["\"j\"", TraditionalForm]}, {11, 
      FormBox["\"k\"", TraditionalForm]}, {12, 
      FormBox["\"l\"", TraditionalForm]}, {13, 
      FormBox["\"m\"", TraditionalForm]}, {14, 
      FormBox["\"n\"", TraditionalForm]}, {15, 
      FormBox["\"o\"", TraditionalForm]}, {16, 
      FormBox["\"p\"", TraditionalForm]}, {17, 
      FormBox["\"q\"", TraditionalForm]}, {18, 
      FormBox["\"r\"", TraditionalForm]}, {19, 
      FormBox["\"s\"", TraditionalForm]}, {20, 
      FormBox["\"t\"", TraditionalForm]}, {21, 
      FormBox["\"u\"", TraditionalForm]}, {22, 
      FormBox["\"v\"", TraditionalForm]}, {23, 
      FormBox["\"w\"", TraditionalForm]}, {24, 
      FormBox["\"x\"", TraditionalForm]}, {25, 
      FormBox["\"y\"", TraditionalForm]}, {26, 
      FormBox["\"z\"", TraditionalForm]}}, Automatic}]], "Output",
 CellChangeTimes->{{3.6599371063075666`*^9, 3.659937124893029*^9}}]
}, Open  ]],

Cell["\<\
El entrenamiento no se realizar\[AAcute] sobre el diccionario debido a que el \
objetivo es clasificar un texto, y en los textos la distribuci\[OAcute]n de \
frecuencia de caracteres es modificada por las palabras que se suelen repetir \
m\[AAcute]s com\[UAcute]nmente. Los datos de entrenamiento se \
generar\[AAcute]n a partir de muestras de textos. El muestreo se realiza \
seleccionando partes aleatorias del texto y contando la frecuencia de aparici\
\[OAcute]n de cada caracter. Esto genera una lista de 26 elementos, donde \
cada una corresponde a la frecuencia de aparici\[OAcute]n de cada letra en \
orden alfab\[EAcute]tico. Los textos de entrenamiento disponibles \
est\[AAcute]n en los idiomas Espa\[NTilde]ol, Ingles, Franc\[EAcute]s y Alem\
\[AAcute]n.\
\>", "Text",
 CellChangeTimes->{{3.659937305771235*^9, 3.659937341954743*^9}, {
  3.659937379178846*^9, 3.659937623641363*^9}, {3.659937656105071*^9, 
  3.659937672065298*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"categoricalConvTable", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetTrainingData", "[", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "path", ",", " ", "files", ",", " ", "samplesize", ",", " ", "samples",
         ",", " ", "trainingdata", ",", "text", ",", "langname", ",", " ", 
        "del", ",", " ", "len", ",", " ", "samplepos", ",", " ", "textsample",
         ",", "counts", ",", "dist", ",", "languages", ",", "basearray"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"path", " ", "=", " ", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
         "\"\<TrainingData/\>\""}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SetDirectory", "[", "path", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"files", " ", "=", " ", 
        RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"samplesize", "=", " ", "5000"}], ";", "\[IndentingNewLine]", 
       RowBox[{"samples", " ", "=", " ", "50"}], ";", "\[IndentingNewLine]", 
       RowBox[{"trainingdata", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"langname", " ", "=", " ", 
           RowBox[{"FileBaseName", "[", "f", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"text", " ", "=", 
           RowBox[{"Import", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"text", " ", "=", " ", 
           RowBox[{"ToLowerCase", "[", "text", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"text", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"text", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<\[AAcute]\>\"", "\[Rule]", " ", "\"\<a\>\""}], 
               ",", " ", 
               RowBox[{
               "\"\<\[EAcute]\>\"", " ", "\[Rule]", " ", "\"\<e\>\""}], ",", 
               RowBox[{"\"\<\[IAcute]\>\"", "\[Rule]", " ", "\"\<i\>\""}], 
               ",", " ", 
               RowBox[{
               "\"\<\[OAcute]\>\"", " ", "\[Rule]", " ", "\"\<o\>\""}], ",", 
               " ", 
               RowBox[{
               "\"\<\[UAcute]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}], ",", 
               " ", 
               RowBox[{
               "\"\<\[NTilde]\>\"", " ", "\[Rule]", " ", "\"\<n\>\""}], ",", 
               " ", 
               RowBox[{
               "\"\<\[UDoubleDot]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}]}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"del", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{
             RowBox[{"Keys", "[", 
              RowBox[{"CharacterCounts", "[", "text", "]"}], "]"}], ",", 
             RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"text", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"text", ",", 
             RowBox[{"del", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"len", " ", "=", " ", 
           RowBox[{"StringLength", "[", "text", "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Genera", " ", "muestras", " ", "y", " ", "toma", " ", "la", " ", 
            "distribuci\[OAcute]n"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Do", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"samplepos", " ", "=", " ", 
              RowBox[{"RandomInteger", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"len", "-", "samplesize"}]}], "}"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"textsample", " ", "=", " ", 
              RowBox[{"StringTake", "[", 
               RowBox[{"text", ",", 
                RowBox[{"{", 
                 RowBox[{"samplepos", ",", 
                  RowBox[{"samplepos", "+", "samplesize"}]}], "}"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"counts", " ", "=", " ", 
              RowBox[{"CharacterCounts", "[", "textsample", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"dist", " ", "=", " ", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"counts", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "/", "samplesize"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", " ", 
                  RowBox[{"Alphabet", "[", "]"}]}], "}"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"dist", " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"dist", ",", "langname"}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"dist", " ", "=", " ", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"dist", ",", 
                RowBox[{
                 RowBox[{"Missing", "[", 
                  RowBox[{"_", ",", "_"}], "]"}], "\[Rule]", "0"}]}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"trainingdata", ",", "dist"}], "]"}], ";"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"{", "samples", "}"}]}], "\[IndentingNewLine]", "]"}], 
          ";"}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"f", ",", "files"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"languages", " ", "=", " ", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"trainingdata", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"basearray", " ", "=", " ", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{"0", ",", 
          RowBox[{"Length", "[", "languages", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"categoricalConvTable", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"languages", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"basearray", ",", 
              RowBox[{"i", "\[Rule]", " ", "1"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "languages", "]"}]}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "trainingdata", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CategoricalToNumeric", "[", "td_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "data", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"data", " ", "=", " ", "td"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"data", " ", "=", " ", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{"data", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"categoricalConvTable", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], " ", "\[Rule]", " ", 
              RowBox[{
               RowBox[{"categoricalConvTable", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], ";"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "categoricalConvTable", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "data", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NumericToCategorical", "[", "list_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"data", ",", "found"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"data", " ", "=", " ", "list"}], ";", "\[IndentingNewLine]", 
       RowBox[{"found", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"found", " ", "+=", " ", 
           RowBox[{"Count", "[", 
            RowBox[{
             RowBox[{"{", "data", "}"}], ",", 
             RowBox[{
              RowBox[{"categoricalConvTable", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "categoricalConvTable", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"found", " ", "\[NotEqual]", " ", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Do", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"data", " ", "=", " ", 
              RowBox[{"Replace", "[", 
               RowBox[{"data", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"categoricalConvTable", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], " ", "\[Rule]", " ", 
                 RowBox[{
                  RowBox[{"categoricalConvTable", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "categoricalConvTable", "]"}]}], "}"}]}],
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "data", "]"}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "Return", "[", "\"\<Clasificaci\[OAcute]n erronea\>\"", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetDistFromText", "[", "text_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "t", ",", "del", ",", "counts", ",", "dist", ",", "samplesize"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"t", " ", "=", " ", "text"}], ";", "\[IndentingNewLine]", 
       RowBox[{"t", " ", "=", " ", 
        RowBox[{"ToLowerCase", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"t", "=", "  ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"t", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<\[AAcute]\>\"", "\[Rule]", " ", "\"\<a\>\""}], ",", 
            " ", 
            RowBox[{"\"\<\[EAcute]\>\"", " ", "\[Rule]", " ", "\"\<e\>\""}], 
            ",", 
            RowBox[{"\"\<\[IAcute]\>\"", "\[Rule]", " ", "\"\<i\>\""}], ",", 
            " ", 
            RowBox[{"\"\<\[OAcute]\>\"", " ", "\[Rule]", " ", "\"\<o\>\""}], 
            ",", " ", 
            RowBox[{"\"\<\[UAcute]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}], 
            ",", " ", 
            RowBox[{"\"\<\[NTilde]\>\"", " ", "\[Rule]", " ", "\"\<n\>\""}], 
            ",", " ", 
            RowBox[{
            "\"\<\[UDoubleDot]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}]}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"del", " ", "=", " ", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Keys", "[", 
           RowBox[{"CharacterCounts", "[", "t", "]"}], "]"}], ",", 
          RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"t", " ", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"t", ",", 
          RowBox[{"del", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"counts", " ", "=", " ", 
        RowBox[{"CharacterCounts", "[", "t", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"samplesize", " ", "=", " ", 
        RowBox[{"StringLength", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"counts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "/", "samplesize"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"Alphabet", "[", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{"dist", ",", 
          RowBox[{
           RowBox[{"Missing", "[", 
            RowBox[{"_", ",", "_"}], "]"}], "\[Rule]", "0"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dist", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetRandomTestData", "[", "]"}], " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "path", ",", " ", "files", ",", " ", "samplesize", ",", " ", "samples",
         ",", " ", "trainingdata", ",", " ", "f", ",", "langname", ",", 
        "text", ",", "del", ",", "len", ",", "samplepos", ",", "textsample", 
        ",", "counts", ",", "dist"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"path", " ", "=", " ", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
         "\"\<TrainingData/\>\""}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SetDirectory", "[", "path", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"files", " ", "=", " ", 
        RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"samplesize", "=", " ", "5000"}], ";", "\[IndentingNewLine]", 
       RowBox[{"samples", " ", "=", " ", "50"}], ";", "\[IndentingNewLine]", 
       RowBox[{"trainingdata", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"f", " ", "=", " ", 
        RowBox[{
         RowBox[{"RandomSample", "[", 
          RowBox[{"files", ",", "1"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"langname", " ", "=", " ", 
        RowBox[{"FileBaseName", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"text", " ", "=", 
        RowBox[{"Import", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"text", " ", "=", " ", 
        RowBox[{"ToLowerCase", "[", "text", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"text", " ", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"text", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<\[AAcute]\>\"", "\[Rule]", " ", "\"\<a\>\""}], ",", 
            " ", 
            RowBox[{"\"\<\[EAcute]\>\"", " ", "\[Rule]", " ", "\"\<e\>\""}], 
            ",", 
            RowBox[{"\"\<\[IAcute]\>\"", "\[Rule]", " ", "\"\<i\>\""}], ",", 
            " ", 
            RowBox[{"\"\<\[OAcute]\>\"", " ", "\[Rule]", " ", "\"\<o\>\""}], 
            ",", " ", 
            RowBox[{"\"\<\[UAcute]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}], 
            ",", " ", 
            RowBox[{"\"\<\[NTilde]\>\"", " ", "\[Rule]", " ", "\"\<n\>\""}], 
            ",", " ", 
            RowBox[{
            "\"\<\[UDoubleDot]\>\"", " ", "\[Rule]", " ", "\"\<u\>\""}]}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"del", " ", "=", " ", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Keys", "[", 
           RowBox[{"CharacterCounts", "[", "text", "]"}], "]"}], ",", 
          RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"text", " ", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"text", ",", 
          RowBox[{"del", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"len", " ", "=", " ", 
        RowBox[{"StringLength", "[", "text", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"samplepos", " ", "=", " ", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"len", "-", "samplesize"}]}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"textsample", " ", "=", " ", 
        RowBox[{"StringTake", "[", 
         RowBox[{"text", ",", 
          RowBox[{"{", 
           RowBox[{"samplepos", ",", 
            RowBox[{"samplepos", "+", "samplesize"}]}], "}"}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"counts", " ", "=", " ", 
        RowBox[{"CharacterCounts", "[", "textsample", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"counts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "/", "samplesize"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"Alphabet", "[", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"dist", ",", 
          RowBox[{"CategoricalToNumeric", "[", "langname", "]"}]}], "}"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{"dist", ",", 
          RowBox[{
           RowBox[{"Missing", "[", 
            RowBox[{"_", ",", "_"}], "]"}], "\[Rule]", "0"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dist", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"TestResult", "[", "td_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "sample", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sample", " ", "=", " ", 
        RowBox[{
         RowBox[{"RandomSample", "[", 
          RowBox[{"td", ",", "1"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Se escogi\[OAcute] una muestra aleatoria en: \>\"", " ", "<>", 
         " ", 
         RowBox[{"NumericToCategorical", "[", 
          RowBox[{"sample", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], " ", "<>", 
         "\"\<, y el resultado de la red al calcular su resultado es: \>\"", 
         " ", "<>", " ", 
         RowBox[{"NumericToCategorical", "[", 
          RowBox[{"Round", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"FeedForward", "[", 
             RowBox[{"sample", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "]"}], "]"}]}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ScoreResults", "[", 
    RowBox[{"td_", ",", 
     RowBox[{"trials_:", "100"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"data", ",", "score"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"score", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"GetRandomTestData", "[", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"data", "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", "\[Equal]", " ", 
            RowBox[{"Round", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"FeedForward", "[", 
               RowBox[{"data", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
           " ", 
           RowBox[{"score", "++"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
        ",", 
        RowBox[{"{", "trials", "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Pruebas superadas: \>\"", " ", "<>", " ", 
        RowBox[{"ToString", "[", "score", "]"}], " ", "<>", " ", 
        "\"\< de \>\"", " ", "<>", " ", 
        RowBox[{"ToString", "[", "trials", "]"}], " ", "<>", " ", 
        "\"\<.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClassifyText", "[", "text_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "dist", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dist", " ", "=", " ", 
        RowBox[{"GetDistFromText", "[", "text", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Resultado de la clasificaci\[OAcute]n: \>\"", " ", "<>", " ", 
         RowBox[{"NumericToCategorical", "[", 
          RowBox[{"Round", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"FeedForward", "[", "dist", "]"}], "]"}], "]"}], "]"}]}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"td", " ", "=", 
   RowBox[{"CategoricalToNumeric", "[", 
    RowBox[{"GetTrainingData", "[", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Initialize", "[", 
    RowBox[{"{", 
     RowBox[{"26", ",", "26", ",", "4"}], "}"}], "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGD", "[", 
   RowBox[{"td", ",", "200", ",", "10", ",", "3"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Test 1.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestResult", "[", "td", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Test 2.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ScoreResults", "[", "td", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Test 3.\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "ClassifyText", "[", 
   "\"\<En el principio cre\[OAcute] Dios los cielos y la tierra. Y la tierra \
estaba desordenada y vac\[IAcute]a, y las tinieblas estaban sobre la faz del \
abismo, y el Esp\[IAcute]ritu de Dios se mov\[IAcute]a sobre la faz de las \
aguas. Y dijo Dios: Sea la luz; y fue la luz. Y vio Dios que la luz era \
buena; y separ\[OAcute] Dios la luz de las tinieblas. Y llam\[OAcute] Dios a \
la luz D\[IAcute]a, y a las tinieblas llam\[OAcute] Noche. Y fue la tarde y \
la ma\[NTilde]ana un d\[IAcute]a.\>\"", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ClassifyText", "[", 
  "\"\<In the beginning God created the heaven and the earth. And the earth \
was waste and void; and darkness was upon the face of the deep: and the \
spirit of God moved upon the face of the waters. And God said, Let there be \
light: and there was light. And God saw the light, that it was good: and God \
divided the light from the darkness. And God called the light Day, and the \
darkness he called Night. And there was evening and there was morning, one \
day.\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"ShowInfo", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.659932867743372*^9, 3.659933034827691*^9}, {
   3.6599330886853037`*^9, 3.659933236841154*^9}, {3.659933271444338*^9, 
   3.6599333049196253`*^9}, {3.6599334543323517`*^9, 3.65993347072902*^9}, {
   3.659933534340192*^9, 3.659933538548366*^9}, 3.6599336343574057`*^9, {
   3.659933696844008*^9, 3.659933772299573*^9}, {3.659933848549431*^9, 
   3.6599339585914307`*^9}, {3.659933997615103*^9, 3.659934066057029*^9}, {
   3.659934099047036*^9, 3.6599341012959538`*^9}, {3.659934165039351*^9, 
   3.659934169364889*^9}, {3.659934260845233*^9, 3.659934261523334*^9}, {
   3.659934327164485*^9, 3.659934489920456*^9}, {3.6599345329767323`*^9, 
   3.659934545250003*^9}, {3.659934581374588*^9, 3.659934618811349*^9}, {
   3.6599346653336353`*^9, 3.659934704108684*^9}, {3.659934842650635*^9, 
   3.6599348867642813`*^9}, {3.659934927758157*^9, 3.659934998809301*^9}, {
   3.659935083304237*^9, 3.659935084762933*^9}, {3.6599351242068663`*^9, 
   3.6599351502083893`*^9}, {3.659935590158731*^9, 3.6599355934011517`*^9}, {
   3.659935665780664*^9, 3.6599356682442713`*^9}, {3.659938009494513*^9, 
   3.65993801806433*^9}, {3.659938136327649*^9, 3.6599382054696627`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Test 1.\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938230314619*^9}],

Cell[BoxData["\<\"Se escogi\[OAcute] una muestra aleatoria en: Spanish, y el \
resultado de la red al calcular su resultado es: Spanish\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938230315857*^9}],

Cell[BoxData["\<\"Test 2.\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938230317031*^9}],

Cell[BoxData["\<\"Pruebas superadas: 100 de 100.\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938243425273*^9}],

Cell[BoxData["\<\"Test 3.\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.65993824342598*^9}],

Cell[BoxData["\<\"Resultado de la clasificaci\[OAcute]n: Spanish\"\>"], \
"Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938243426712*^9}],

Cell[BoxData["\<\"Resultado de la clasificaci\[OAcute]n: English\"\>"], \
"Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.659938243427279*^9}],

Cell[BoxData["\<\"Informaci\[OAcute]n del resultado:\"\>"], "Print",
 CellChangeTimes->{3.6599356805409727`*^9, 3.6599379712436*^9, 
  3.6599382434277487`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.9, 0.36, 0.054], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], CapForm["Butt"], PointBox[CompressedData["
1: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
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Costo\"", TraditionalForm], None}, {
     FormBox["\"Iteraci\[OAcute]n\"", TraditionalForm], None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{FontFamily -> "Times"},
  Method->{},
  PlotLabel->FormBox[
   "\"Valores de la funci\[OAcute]n de costo\"", TraditionalForm],
  PlotRange->{{0, 200.}, {0, 0.8659393804968978}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.659935694072291*^9, 3.659937983991198*^9, 
  3.659938243458496*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1016},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 106, 1, 102, "Title"],
Cell[CellGroupData[{
Cell[711, 27, 107, 1, 73, "Chapter"],
Cell[821, 30, 66543, 1147, 599, "Text"],
Cell[CellGroupData[{
Cell[67389, 1181, 460, 11, 35, "Input"],
Cell[67852, 1194, 2819, 59, 250, "Output"]
}, Open  ]],
Cell[70686, 1256, 4722, 134, 656, "Text"],
Cell[CellGroupData[{
Cell[75433, 1394, 301, 8, 35, "ItemNumbered"],
Cell[75737, 1404, 687, 23, 37, "ItemNumbered"],
Cell[76427, 1429, 675, 22, 37, "ItemNumbered"],
Cell[77105, 1453, 761, 23, 41, "ItemNumbered"],
Cell[77869, 1478, 842, 26, 51, "ItemNumbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78760, 1510, 106, 1, 73, "Chapter"],
Cell[78869, 1513, 202, 4, 35, "Text"],
Cell[79074, 1519, 23359, 538, 2831, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[102458, 2061, 136, 1, 69, "Subchapter"],
Cell[102597, 2064, 334, 6, 35, "Text"],
Cell[CellGroupData[{
Cell[102956, 2074, 3501, 91, 286, "Input"],
Cell[106460, 2167, 908, 12, 25, "Print"],
Cell[107371, 2181, 914, 27, 92, "Output"],
Cell[CellGroupData[{
Cell[108310, 2212, 929, 12, 25, "Print"],
Cell[109242, 2226, 911, 12, 25, "Print"],
Cell[110156, 2240, 911, 12, 25, "Print"],
Cell[111070, 2254, 912, 12, 25, "Print"],
Cell[111985, 2268, 910, 12, 25, "Print"],
Cell[112898, 2282, 924, 12, 25, "Print"],
Cell[113825, 2296, 915, 12, 25, "Print"],
Cell[114743, 2310, 913, 12, 25, "Print"],
Cell[115659, 2324, 913, 12, 25, "Print"],
Cell[116575, 2338, 912, 12, 25, "Print"],
Cell[117490, 2352, 921, 12, 25, "Print"]
}, Open  ]],
Cell[118426, 2367, 27347, 461, 258, "Output"]
}, Open  ]],
Cell[145788, 2831, 281, 5, 35, "Text"],
Cell[CellGroupData[{
Cell[146094, 2840, 2988, 86, 286, "Input"],
Cell[149085, 2928, 121, 1, 25, "Print"],
Cell[149209, 2931, 662, 23, 92, "Output"],
Cell[CellGroupData[{
Cell[149896, 2958, 142, 1, 25, "Print"],
Cell[150041, 2961, 125, 1, 25, "Print"],
Cell[150169, 2964, 127, 1, 25, "Print"],
Cell[150299, 2967, 127, 1, 25, "Print"],
Cell[150429, 2970, 123, 1, 25, "Print"],
Cell[150555, 2973, 137, 1, 25, "Print"],
Cell[150695, 2976, 126, 1, 25, "Print"],
Cell[150824, 2979, 125, 1, 25, "Print"],
Cell[150952, 2982, 125, 1, 25, "Print"],
Cell[151080, 2985, 124, 1, 25, "Print"],
Cell[151207, 2988, 132, 1, 25, "Print"]
}, Open  ]],
Cell[151354, 2992, 27070, 457, 262, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178473, 3455, 142, 1, 69, "Subchapter"],
Cell[178618, 3458, 402, 7, 59, "Text"],
Cell[CellGroupData[{
Cell[179045, 3469, 2724, 70, 261, "Input"],
Cell[181772, 3541, 3653, 77, 264, "Output"],
Cell[185428, 3620, 3651, 77, 264, "Output"],
Cell[189082, 3699, 3650, 77, 264, "Output"]
}, Open  ]],
Cell[192747, 3779, 954, 15, 83, "Text"],
Cell[CellGroupData[{
Cell[193726, 3798, 25677, 585, 3561, "Input"],
Cell[CellGroupData[{
Cell[219428, 4387, 130, 2, 25, "Print"],
Cell[219561, 4391, 240, 3, 25, "Print"],
Cell[219804, 4396, 130, 2, 25, "Print"],
Cell[219937, 4400, 153, 2, 25, "Print"],
Cell[220093, 4404, 129, 2, 25, "Print"],
Cell[220225, 4408, 171, 3, 25, "Print"],
Cell[220399, 4413, 171, 3, 25, "Print"],
Cell[220573, 4418, 159, 2, 25, "Print"]
}, Open  ]],
Cell[220747, 4423, 3902, 77, 264, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
